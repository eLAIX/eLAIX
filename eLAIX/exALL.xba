<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="exALL" script:language="StarBasic">&apos;****************************************************************************
&apos; eLAIX   : Writing ILIAS learning modules offline with OpenOffice.org Writer
&apos; Author  : Harry Boldt - h.boldt@boldt-media.de - http://elaix.org
&apos; License : GPL
&apos;****************************************************************************

&apos; This module is part of eLAIX. You can redistribute it and/or
&apos; modify it under the terms of the GNU Lesser General Public
&apos; License as published by the Free Software Foundation, either
&apos; version 3 of the License, or (at your option) any later version.
&apos; 
&apos; This program is distributed in the hope that it will be useful,
&apos; but WITHOUT ANY WARRANTY; without even the implied warranty of
&apos; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
&apos; Lesser General Public License for more details.
&apos; 
&apos; You should have received a copy of the GNU Lesser General Public
&apos; License along with this program. If not, please visit the Free
&apos; Software Foundation website at http://www.gnu.org/licenses/.


Option Explicit

sub ExportParagraph(oPara as object)
dim iParaType as integer
dim aParaSet() as long
dim iCount as long 
dim iStartPos as long
dim iStopPos as integer
dim iLevel as integer

	iParaType = oPara.ParaType	
	select case iParaType
		case PARA_TYPE_TEXT
			ExportTextPortions(oPara)

		case PARA_TYPE_LIST
			ExportList(oPara, true)
			
		case PARA_TYPE_TABLE
			ExportTable(oPara)

		case PARA_TYPE_FRAMESTART
			ExportFrameStart(oPara)

		case PARA_TYPE_FRAMESTOP
			ExportFrameStop(oPara)

		case PARA_TYPE_FILELIST
			ExportFileList(oPara)
		
	end select
	&apos;check if there&apos;s a pagebreak after the paragraph
	&apos;if (oPara.ID &lt; ubound(gaDocParagraph())) and (oPara.BreakType = com.sun.star.style.BreakType.PAGE_AFTER) then
	&apos;	ExportPageBreak(oPara)
	&apos;end if
end Sub


sub ExportTextPortions(oPara As Object) 
  &apos; oParagraph : the paragraph to be exported
  &apos; pAlign     : if set, use the frame alignment instead of object alignment
  &apos; pCaption   : if set, this is the caption of a graphic
  &apos; pLocation  : indicates where the paragraph is located, values: C_CONTENT, C_HEADER, C_FOOTER
  
dim sExportString as string 
dim aPortionSet()
dim iPortionCount as long
dim sTextPortionType as string
dim oPortion as object
dim aMediaSet()
dim oMedia as object
dim i as long
dim j as integer
dim iCount as integer
dim iLen as integer
dim sLaTeX as string
dim sIdent as long
dim iNoTextWrap as long


	&apos;step 1: get the text portions of the paragraph
	sExportString = &quot;&quot; 
	aPortionSet() = GetTextPortionSet(oPara.ID)

	&apos;step 2: concatenate all text portions and handle media export of textportions
	iPortionCount = ubound(aPortionSet())
	for i = 1 to iPortionCount
		oPortion = gaDocTextPortion(aPortionSet(i))
		sTextPortionType = oPortion.TextPortionType
		&apos;do not export graphic captions, these are handled by AppendMediaRec, accordion captions are also handeled
		if (oPortion.ParaStylename &lt;&gt; &quot;Illustration&quot;) and (oPortion.ParaStylename &lt;&gt; &quot;ILIAS_Accordion_Caption&quot;) then
			Select Case sTextPortionType
				Case &quot;Text&quot; &apos;this portion is a text object! 
					&apos;check if last portion was a formula and append a blank if there is none
					iLen = len(sExportString)
					if iLen &gt; 6 then
						if mid(sExportString, iLen - 5) = &quot;[/tex]&quot; then
							sExportString = sExportString &amp; &quot; &quot; 
						end if
					end if	
					sExportString = sExportString &amp; GetTextPortionExportString(oPortion)
					
				Case &quot;TextField&quot; &apos;this portion is a reference
					sExportString = sExportString &amp; GetTextFieldExportString(oPortion)
					
				Case &quot;Bookmark&quot; &apos;this portion is a bookmark
					sExportString = sExportString &amp; GetBookmarkExportString(oPortion)

				Case &quot;Footnote&quot; &apos;this portion is a footnote
					sExportString = sExportString &amp; GetFootnoteExportString(oPortion)

				Case &quot;Marginale&quot; &apos;this portion is a marginale
					sExportString = sExportString &amp; GetMarginaleExportString(oPortion)

				Case &quot;Frame&quot; &apos;this portion is a frame
					&apos;it could be a formula
					if oPortion.FrameStyleName = &quot;Formula&quot; then
						sLaTeX = &quot;[tex]&quot; &amp; ReplaceTexString(oPortion.FormulaTeX) &amp; &quot;[/tex]&quot;
						&apos;set a blank before formula if there is text before
						iLen = len(sExportString)
						if iLen &gt; 0 then
							if mid(sExportString, iLen) &lt;&gt; &quot; &quot; then 
								sLaTeX = &quot; &quot; &amp; sLaTeX
							end	if
						end if
			    		sExportString = sExportString &amp; sLaTeX
					end if					
			end select
		end if	
    	&apos;export media joined to this text portion
		iNoTextWrap = com.sun.star.text.WrapTextMode.NONE
		oMedia = GetDocMediaByPortionID(oPortion.ID)
	if not isNull(oMedia) then
			&apos;graphics with surrounding portions should be exported as IntLink	
			if (oMedia.TextWrap = iNoTextWrap) and (oMedia.AnchorType = 1) and (oMedia.HoriOrient = 3) and (iPortionCount &gt; 1) then
				sExportString = sExportString &amp; &quot;&lt;IntLink Target=&quot;&quot;il_0_mob_&quot; &amp; oMedia.ID &amp; &quot;&quot;&quot; Type=&quot;&quot;MediaObject&quot;&quot;/&gt;&quot;
			else
				&apos;a single graphic should be exported as a MediaTag
				ExportMediaTag(oMedia)
			end if	
		end if		

	next i
	 
	&apos;step 3: export the concatenated text
	if sExportString &lt;&gt; &quot;&quot; then 
	    ExportParagraphTag (oPara, sExportString)
	endif
end sub


function ExportList(oPara as object, bSetClass as boolean) as object
dim iParaCount as long
dim iListLevel as integer
dim iListType as integer
dim iNumberingLevel as integer
dim iNumberingType as integer
dim oNextPara as object
dim sStylename as string
dim iRow as integer
dim iCol as integer
dim iChapter as integer

	iParaCount = UBound(gaDocParagraph())
	ExportListHeader(oPara, bSetClass)
	iListLevel = oPara.NumberingLevel
	iListType = oPara.NumberingType
	sStyleName = oPara.ParaStyleName
	iRow = oPara.TableRow
	iCol = oPara.TableCol
	iChapter = oPara.ChapterID
	
    &apos;enumerate paragraphs that are list items (NumberingType ist not an empty string)
	do while (oPara.NumberingType &lt;&gt; &quot;&quot;) and (oPara.NumberingLevel = iListLevel) and _
			(oPara.NumberingType = iListType) and (oPara.ParaStylename = sStylename) and _
			(oPara.TableRow = iRow) and (oPara.TableCol = iCol) and _
			(oPara.ChapterID = iChapter)
	
		WriteToStream(goExportXML, &quot;&lt;ListItem&gt;&quot;)
		ExportTextPortions(oPara)
		gaDocParagraph(oPara.ID).State = PARA_STATE_EXPORTED
		
		&apos;check next item to decide wether it has to be handeled within this item
		if (oPara.ID &lt; iParaCount) then
			iNumberingLevel = oPara.NumberingLevel
			iNumberingType = oPara.NumberingType
			oNextPara = gaDocParagraph(oPara.ID + 1)
			
			&apos;do nothing, if the next paragraph has another Stylename
			if oNextPara.ParaStylename &lt;&gt; sStylename then

			&apos;the item has a higher level (is a new list)
			elseif oNextPara.NumberingLevel &gt; oPara.NumberingLevel then
				oPara = ExportList(oNextPara, false)
				&apos;gaDocParagraph(oPara.ID).State = PARA_STATE_PENDING
				
			&apos;the item has the same level and could be a bullet list or an unnumbered paragraph)	
			elseif oNextPara.NumberingLevel = iNumberingLevel then
			&apos;elseif ((oPara.NumberingType &lt;&gt; 6) and (oNextPara.NumberingType = 6)) or not (oNextPara.NumberingIsNumber) then
				oPara = oNextPara
				gaDocParagraph(oPara.ID).State = PARA_STATE_PENDING
				&apos;enumerate all items with the same level
				do while oPara.NumberingLevel = iNumberingLevel
					&apos;the item could be an unnumbered paragraph
					if not oPara.NumberingIsNumber then 
						ExportTextPortions(oPara)
						gaDocParagraph(oNextPara.ID).State = PARA_STATE_EXPORTED
					&apos;the item could be a bullet list	
					elseif (oPara.NumberingType = 6) and (iNumberingType &lt;&gt; 6) then	
						oPara = ExportList(oPara, true)
						&apos;gaDocParagraph(oPara.ID).State = PARA_STATE_PENDING
					else
						exit do	
					end if	
					
					if oPara.State = PARA_STATE_EXPORTED then
						if (oPara.ID &lt; iParaCount) then
							oPara = gaDocParagraph(oPara.ID + 1)
						else
							exit do
						end if	
					end if
				loop			
			
			end if
			
		end if
		WriteToStream(goExportXML, &quot;&lt;/ListItem&gt;&quot;)	
		
		if oPara.State = PARA_STATE_EXPORTED then
			if (oPara.ID &lt; iParaCount) then
				oPara = gaDocParagraph(oPara.ID + 1)
			else
				exit do
			end if
		end if	
	
	loop
	ExportListFooter
	ExportList = oPara
end function


sub ExportListHeader(oPara as object, bSetClass as boolean)
dim sNumberingType as string
dim sStylestring as string

	WriteToStream(goExportXML, &quot;&lt;PageContent&gt;&quot;)
    sNumberingType = GetILIASListType(oPara.NumberingType)
	sStyleString = oPara.ParaStyleName
    if sNumberingType = &quot;Unordered&quot; then
    	if bSetClass then
			WriteToStream(goExportXML, &quot;&lt;List Type=&quot;&quot;Unordered&quot;&quot; Class=&quot;&quot;&quot; &amp; sStyleString &amp; &quot;&quot;&quot;&gt;&quot;)
		else
			WriteToStream(goExportXML, &quot;&lt;List Type=&quot;&quot;Unordered&quot;&quot;&gt;&quot;)
		end if	
    else
    	if bSetClass then
			WriteToStream(goExportXML, &quot;&lt;List Type=&quot;&quot;Ordered&quot;&quot; NumberingType=&quot;&quot;&quot; &amp; sNumberingType &amp; &quot;&quot;&quot; Class=&quot;&quot;&quot; &amp; sStyleString &amp; &quot;&quot;&quot;&gt;&quot;)
		else
			WriteToStream(goExportXML, &quot;&lt;List Type=&quot;&quot;Ordered&quot;&quot; NumberingType=&quot;&quot;&quot; &amp; sNumberingType &amp; &quot;&quot;&quot;&gt;&quot;)
		end if	
    end if  	

end sub

sub ExportListFooter
	WriteToStream(goExportXML, &quot;&lt;/List&gt;&quot;)
	WriteToStream(goExportXML, &quot;&lt;/PageContent&gt;&quot;)
end sub


function GetLastNumberingTypeByLevel(oPara as object)
dim iPos as long

	iPos = oPara.ID - 1
	do while iPos &gt; 0
		if gaDocParagraph(iPos).NumberingLevel = oPara.NumberingLevel then
			exit do
		end if
		iPos = iPos - 1
	loop

	GetLastNumberingType = gaDocParagraph(iPos).NumberingType
end function


sub ExportTable(oPara as object)
dim iTableRelativeWidth as integer
dim iTableBorderWidth as integer
dim oTablePara as object
dim iActRow as long
dim iActCol as long
dim iParaCount as long
dim aParaSet() as long
dim sAlign as string
dim sBackColor as string
dim sBorderWidths as string
dim sBorderColors as string
dim sBorderStyles as string
dim sClass as string
dim i as long

	WriteToStream(goExportXML, &quot;&lt;PageContent&gt;&quot;)
	if oPara.TableIsWidthRelative then 
		iTableRelativeWidth = oPara.TableRelativeWidth
	elseif oPara.TableWidth &lt; oPara.PageInnerWidth then
		iTableRelativeWidth = oPara.TableWidth / oPara.PageInnerWidth * 100
	else	
		iTableRelativeWidth = 100
	end if		
	
	if oPara.TableBorderWidths &lt;&gt; &quot;&quot; then 
		iTableBorderWidth = 1
	else
		iTableBorderWidth = 0
	end if

	aParaSet() = GetParaSetTable(oPara.ID)		
	iParaCount = ubound(aParaSet())
	sAlign = GetIliasTableAlignString(oPara.ParaAdjust)
	i = 1
	WriteToStream(goExportXML, &quot;&lt;Table Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot; Class=&quot;&quot;&quot; &amp; oPara.TableName &amp; &quot;&quot;&quot; Border=&quot;&quot;&quot; &amp; iTableBorderWidth &amp;_
					&quot;&quot;&quot; HorizontalAlign=&quot;&quot;&quot; &amp; sAlign &amp; &quot;&quot;&quot; Width=&quot;&quot;&quot; &amp; iTableRelativeWidth &amp; &quot;%&quot;&quot;&quot; &amp; &quot; CellSpacing=&quot;&quot;1&quot;&quot; CellPadding=&quot;&quot;4&quot;&quot;&gt;&quot;)
	if oPara.TableCaption &lt;&gt; &quot;&quot; then
		WriteToStream(goExportXML, &quot;&lt;Caption Align=&quot;&quot;bottom&quot;&quot;&gt;&quot; &amp; oPara.TableCaption &amp; &quot;&lt;/Caption&gt;&quot;
	end if	
	do while i &lt;= iParaCount
		WriteToStream(goExportXML, &quot;&lt;TableRow&gt;&quot;)
		oTablePara = gaDocParagraph(aParaSet(i))
		iActRow = oTablePara.TableRow
		do while (i &lt;= iParaCount) and (oTablePara.TableRow = iActRow)
			iActCol = oTablePara.TableCol
						
			sBackColor = oTablePara.TableBackColor
			sBorderColors = ReplaceString(oTablePara.TableBorderColors, &quot;&quot;, &quot; &quot;)
			sBorderWidths = ReplaceString(oTablePara.TableBorderWidths, &quot;&quot;, &quot; &quot;)
			sBorderStyles = ReplaceString(oTablePara.TableBorderStyles, &quot;&quot;, &quot; &quot;)
			sClass = sBackColor &amp; sBorderColors &amp; sBorderWidths &amp; sBorderStyles
			WriteToStream(goExportXML, &quot;&lt;TableData Class=&quot;&quot;&quot; &amp; sClass &amp; &quot;&quot;&quot;&gt;&quot;)
			
			do while (oTablePara.TableRow = iActRow) and (oTablePara.TableCol = iActCol)
				if gaDocParagraph(aParaSet(i)).State &lt;&gt; PARA_STATE_EXPORTED then
					ExportParagraph(oTablePara)
					gaDocParagraph(aParaSet(i)).State = PARA_STATE_EXPORTED
				end if	
				i = i + 1
				if i &lt;= iParaCount then
					oTablePara = gaDocParagraph(aParaSet(i))	
				else
					exit do
				end if
			loop	
			WriteToStream(goExportXML, &quot;&lt;/TableData&gt;&quot;)			
		loop
		WriteToStream(goExportXML, &quot;&lt;/TableRow&gt;&quot;)
	loop				
	WriteToStream(goExportXML, &quot;&lt;/Table&gt;&quot;)
	WriteToStream(goExportXML, &quot;&lt;/PageContent&gt;&quot;)
End sub


function GetIliasCssBorderStyles(sBorderStyles as string) as string
dim aStyles(3)
dim iCount as integer
dim i as integer
dim sStyles as string

	aStyles() = ArrayOutOfString(sBorderStyles, &quot; &quot;)
	sStyles = &quot;&quot;
	iCount = uBound(aStyles())
	for i = 0 to iCount
		select case aStyles(i)
			case 0  : sStyles = sStyles &amp; &quot;solid&quot; &amp; &quot; &quot;
			case 1  : sStyles = sStyles &amp; &quot;dotted&quot; &amp; &quot; &quot;
			case 2  : sStyles = sStyles &amp; &quot;dashed&quot; &amp; &quot; &quot;
			case 10 : sStyles = sStyles &amp; &quot;outset&quot; &amp; &quot; &quot;
			case 11 : sStyles = sStyles &amp; &quot;inset&quot; &amp; &quot; &quot;
			case else
				sStyles = sStyles &amp; &quot;double&quot; &amp; &quot; &quot;
		end select
	next i	
	GetIliasCssBorderStyles = Rtrim(sStyles)	
end function


sub ExportFrameStart(oPara as object)
dim sFrameType as string
dim sFrameCaption as string
dim sFrameStylename as string
dim i as long
dim IsFirstAccordion as boolean


	if oPara.FrameStyleName = &quot;ILIAS_FileList&quot; then
		WriteToStream(goExportXML, &quot;&lt;PageContent&gt;&quot;
		WriteToStream(goExportXML, &quot;&lt;FileList&gt;&quot;

	elseif oPara.FrameStyleName = &quot;ILIAS_Accordion_Vertical&quot; then
		WriteToStream(goExportXML, &quot;&lt;PageContent&gt;&quot;
		WriteToStream(goExportXML, &quot;&lt;Tabs Type=&quot;&quot;VerticalAccordion&quot;&quot; HorizontalAlign=&quot;&quot;Center&quot;&quot; Behavior=&quot;&quot;AllClosed&quot;&quot; Template=&quot;&quot;VerticalAccordion&quot;&quot;&gt;&quot;)

	elseif oPara.FrameStyleName = &quot;ILIAS_Accordion_Horizontal&quot; then
		WriteToStream(goExportXML, &quot;&lt;PageContent&gt;&quot;
		WriteToStream(goExportXML, &quot;&lt;Tabs Type=&quot;&quot;HorizontalAccordion&quot;&quot; HorizontalAlign=&quot;&quot;Center&quot;&quot; Behavior=&quot;&quot;AllClosed&quot;&quot; Template=&quot;&quot;HorizontalAccordion&quot;&quot;&gt;&quot;)

	elseif oPara.FrameStyleName = &quot;ILIAS_Accordion_Element&quot; then
		psFrameCaption = GetParagraphString(oPara.ID + 1) 
		WriteToStream(goExportXML, &quot;&lt;Tab PCID=&quot;&quot;&quot; &amp; oPara.ID &amp; &quot;&quot;&quot;&gt;&quot;)
		&apos;WriteToStream(goExportXML, &quot;&lt;TabCaption&gt;&quot; &amp; sFrameCaption &amp; &quot;&lt;/TabCaption&gt;&quot;)
		
	elseif left(oPara.FrameStylename, 5) = &quot;ILIAS&quot; then
		sFrameStylename	= Mid(oPara.FrameStylename, 7)
		WriteToStream(goExportXML, &quot;&lt;PageContent&gt;&quot;
		WriteToStream(goExportXML, &quot;&lt;Section Characteristic=&quot;&quot;&quot; &amp; sFrameStylename  &amp; &quot;&quot;&quot; PCID=&quot;&quot;&quot; &amp; oPara.ID &amp; &quot;&quot;&quot;&gt;&quot;)
	else
		WriteToStream(goExportXML, &quot;&lt;PageContent&gt;&quot;
		WriteToStream(goExportXML, &quot;&lt;Section Characteristic=&quot;&quot;&quot; &amp; oPara.FrameStylename &amp; &quot;&quot;&quot; PCID=&quot;&quot;&quot; &amp; oPara.ID &amp; &quot;&quot;&quot;&gt;&quot;)
	end if
end sub


sub ExportFrameStop(oPara as object)
dim sFrameType as string
dim i as long
dim IsLastAccordion as boolean
dim iParaCount as long
dim sFrameCaption as string

	if oPara.FrameStyleName = &quot;ILIAS_FileList&quot; then
		WriteToStream(goExportXML, &quot;&lt;/FileList&gt;&quot;
		WriteToStream(goExportXML, &quot;&lt;/PageContent&gt;&quot;

	elseif oPara.FrameStyleName = &quot;ILIAS_Accordion_Vertical&quot; then
		WriteToStream(goExportXML, &quot;&lt;/Tabs&gt;&quot;)
		WriteToStream(goExportXML, &quot;&lt;/PageContent&gt;&quot;
		
	elseif oPara.FrameStyleName = &quot;ILIAS_Accordion_Horizontal&quot; then
		WriteToStream(goExportXML, &quot;&lt;/Tabs&gt;&quot;)
		WriteToStream(goExportXML, &quot;&lt;/PageContent&gt;&quot;

	elseif oPara.FrameStyleName = &quot;ILIAS_Accordion_Element&quot; then
		WriteToStream(goExportXML, &quot;&lt;TabCaption&gt;&quot; &amp; psFrameCaption &amp; &quot;&lt;/TabCaption&gt;&quot;)
		WriteToStream(goExportXML, &quot;&lt;/Tab&gt;&quot;)
	else
		WriteToStream(goExportXML, &quot;&lt;/Section&gt;&quot;)
		WriteToStream(goExportXML, &quot;&lt;/PageContent&gt;&quot;)
	end if
end sub


sub ExportFileList(oPara as object)
dim sExportString as string
dim sFileName as string
dim aPortionSet()
dim oPortionRec as object
dim iCount as integer
dim i as integer

	&apos;step 1: get the text portions of the paragraph
	sExportString = &quot;&quot; 
	aPortionSet() = GetTextPortionSet(oPara.ID)

	&apos;it could be the caption of the FileList
	if oPara.ParaStyleName = &quot;ILIAS_FileList_Caption&quot; then
		iCount = ubound(aPortionSet())
		for i = 1 to iCount
			oPortionRec = gaDocTextPortion(aPortionSet(i))
			sExportString = sExportString &amp; oPortionRec.GetString
		next i
		WriteToStream(goExportXML, &quot;&lt;Title Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&gt;&quot; &amp; sExportString &amp; &quot;&lt;/Title&gt;&quot;)
			
	elseif oPara.ParaStyleName = &quot;ILIAS_FileList_Element&quot; then
		oPortionRec = gaDocTextPortion(aPortionSet(1))
		sExportString = FileNameOutOfPath(oPortionRec.HyperLinkURL)
		sFilename = GetCleanFilename(ConvertFromURL(sExportString))
		WriteToStream(goExportXML, &quot;&lt;FileItem PCID=&quot;&quot;&quot; &amp; oPara.ID &amp; &quot;&quot;&quot;&gt;&quot; 
		WriteToStream(goExportXML, &quot;&lt;Identifier Catalog=&quot;&quot;ILIAS&quot;&quot; Entry=&quot;&quot;il_0_file_&quot; &amp; oPara.ID &amp; &quot;&quot;&quot;/&gt;&quot;
		WriteToStream(goExportXML, &quot;&lt;Location Type=&quot;&quot;LocalFile&quot;&quot;&gt;&quot; &amp; sFilename &amp; &quot;&lt;/Location&gt;&quot;
		WriteToStream(goExportXML, &quot;&lt;Format&gt;application/&quot; &amp; GetFileNameExtension(sExportString) &amp; &quot;&lt;/Format&gt;&quot;
		WriteToStream(goExportXML, &quot;&lt;/FileItem&gt;&quot; 
	end if	
end sub


function GetParagraphString(iParaID as long) as string
dim i as long
dim iPortionCount as long
dim sString as string
dim oPara as object

	iPortionCount = ubound(gaDocTextPortion())
	for i = 1 to iPortionCount
		oPara = gaDocTextPortion(i)
		if gaDocTextPortion(i).ParaID = iParaID then
			sString = sString &amp; gaDocTextPortion(i).GetString
		elseif gaDocTextPortion(i).ParaID &gt; iParaID then
			exit for
		end if
	next i
	GetParagraphString = sString
end function


sub ExportMediaTag(oMedia as object)
dim sIdent as string
dim sPurpose as string
dim sLayout as string
dim sAlign as string
dim iMediaWidth as integer
dim iMaxWidth as integer

	select case gsExportType
		case &quot;LM&quot;: sIdent = &quot;il_0_mob_&quot; &amp; CStr(oMedia.ID) &amp; &quot;&quot;&quot;&quot;
		case &quot;EP&quot;: sIdent = &quot;il_0_mob_&quot; &amp; CStr(oMedia.ID) &amp; &quot;&quot;&quot;&quot;
		case &quot;GL&quot;: sIdent = &quot;il_0_mob_&quot; &amp; CStr(oMedia.ExtMediaID) &amp; &quot;&quot;&quot;&quot;
	case else
		sIdent = &quot;il_0_mob_&quot; &amp; CStr(oMedia.ID) &amp; &quot;&quot;&quot;&quot;
	end select
	sPurpose = &quot;&quot;&quot;Standard&quot;&quot;&quot;	
	iMediaWidth = Int(oMedia.Width / 26.459)
	&apos;iMaxWidth = Int(goDlgExport.Model.txtMaxImageWidth.Text)
	&apos;if (iMaxWidth = 0) or (iMediaWidth &lt;= iMaxWidth) then
	&apos;	sLayout = &quot;&quot;
	&apos;else
		sLayout = GetMediaLayoutString(oMedia)
	&apos;end if  
	sAlign = &quot;HorizontalAlign=&quot; &amp; GetIliasAlignString(oMedia)

	WriteToStream(goExportXML, &quot;&lt;PageContent&gt;&quot;)
	WriteToStream(goExportXML, &quot;&lt;MediaObject&gt;&quot;)
	WriteToStream(goExportXML, GetTag(&quot;MediaAlias&quot;, &quot;OriginId=&quot;&quot;&quot; &amp; sIdent, &quot;&quot;, true))
	WriteToStream(goExportXML, GetTag(&quot;MediaAliasItem&quot;, &quot;Purpose=&quot; &amp; sPurpose, &quot;&quot;, false))
	WriteToStream(goExportXML, GetTag(&quot;Layout&quot;, sLayout &amp; &quot; &quot; &amp; sAlign, &quot;&quot;, true))
	
	if oMedia.Caption &lt;&gt; &quot;&quot; then
		WriteToStream(goExportXML, GetTag(&quot;Caption&quot;, &quot;Align=&quot;&quot;bottom&quot;&quot;&quot;, oMedia.Caption, true))
	end if
	WriteToStream(goExportXML, &quot;&lt;/MediaAliasItem&gt;&quot;)

	if gbOptActivateFullSize then
		if iMediaWidth &gt; iMaxWidth then
			WriteToStream(goExportXML, GetTag(&quot;MediaAliasItem&quot;, &quot;Purpose=&quot;&quot;&quot; &amp; &quot;Fullscreen&quot;&quot;&quot;, &quot;&quot;, true))
		end if
	end if
	WriteToStream(goExportXML, &quot;&lt;/MediaObject&gt;&quot;)
	WriteToStream(goExportXML, &quot;&lt;/PageContent&gt;&quot;)
end sub


function GetTextPortionExportString(oPortion as object) as string   
dim sNumberingStyleName As String
dim sResult as string
dim vLink as string
dim vURL as string
dim vPos as integer
dim lCharColor as long
dim sTextFarbe as string
dim vParaStyle as string
dim vCharStyle as string
dim vEsc as integer
dim aList()
dim i as integer
dim sClass as string
dim sAnchor as string
dim sTempStr as string
dim iAsc as integer
dim sType as string

	sResult = oPortion.GetString
	if sResult &lt;&gt; &quot;&quot; then
		&apos;first check if paragraph is ILIAS Code formatted
		vParaStyle = left(oPortion.ParaStyleName, 10)
		if vParaStyle = &quot;ILIAS Code&quot; then
			sResult = ReplaceSymbolsCode(sResult)
			
		&apos;then check if textportion is a hyperlink
		elseif oPortion.HyperLinkURL &lt;&gt; &quot;&quot; then
		
			&apos;it could be an external Link
			if left(oPortion.HyperLinkURL, 4) = &quot;http&quot; then
				dim sTarget as string
				&apos;the target should be something that does not start with &quot;_&quot;
				if oPortion.HyperLinkTarget &lt;&gt; &quot;&quot; then
					if left(oPortion.HyperLinkTarget, 1) &lt;&gt; &quot;_&quot; then
						sTarget = &quot; TargetFrame=&quot;&quot;&quot; &amp; oPortion.HyperLinkTarget &amp; &quot;&quot;&quot;&quot; 
					end if	
				end if
				vURL = &quot; Href=&quot;&quot;&quot; &amp; ReplaceSymbols(oPortion.HyperLinkURL) &amp; &quot;&quot;&quot;&quot;
				vLink = ReplaceSymbols(sResult)
				sResult = &quot;&lt;ExtLink&quot; &amp; vURL &amp; sTarget &amp; &quot;&gt;&quot; &amp; vLink &amp; &quot;&lt;/ExtLink&gt;&quot;
				
			&apos;it could be an internal link	
			elseif left(oPortion.CharStyleName, 10) = &quot;ILIAS Link&quot; then
				dim sLink as string
				sLink = mid(oPortion.HyperLinkURL, 2)
				sType = mid(oPortion.CharStyleName, 12)
				sResult = &quot;&lt;IntLink Target=&quot;&quot;&quot; &amp; sLink &amp; &quot;&quot;&quot; Type=&quot;&quot;&quot; &amp; sType &amp; &quot;&quot;&quot; TargetFrame=&quot;&quot;&quot; &amp; oPortion.HyperLinkTarget &amp;_
						 &quot;&quot;&quot;&gt;&quot; &amp; oPortion.GetString &amp; &quot;&lt;/IntLink&gt;&quot;
						 
			&apos;it could be an internal link to a bookmark
			elseif left(oPortion.HyperLinkURL, 1) = &quot;#&quot; then
				dim sBookmark as string
				dim iChapterID as long
				dim oBookmarkPortion as object
				sBookmark = mid(oPortion.HyperLinkURL, 2)
				oBookmarkPortion = GetTextPortionByBookmark(sBookmark)
				if not isnull (oBookmarkPortion) then
					iChapterId = gaDocParagraph(oBookmarkPortion.ParaID).ChapterID
					sResult = &quot;&lt;IntLink Target=&quot;&quot;il_0_pg_&quot; &amp; CStr(iChapterID) &amp; &quot;&quot;&quot; Type=&quot;&quot;PageObject&quot;&quot; Anchor=&quot;&quot;&quot; &amp; sBookmark &amp; &quot;&quot;&quot;&gt;&quot; &amp; oPortion.Getstring &amp; &quot;&lt;/IntLink&gt;&quot;
				end if    
			end if    
		else
			sResult = ReplaceSymbols(sResult) 	
			&apos;check if textportion is a list
			sNumberingStyleName = oPortion.NumberingStyleName
			if sNumberingStyleName &lt;&gt; &quot;&quot; then  &apos;the paragraph is a list
				vPos = InStr(sResult, &quot;.&quot;)
				if vPos &gt; 0 then
					if IsNumeric(Left(sResult, vPos - 1)) then
						sResult = Mid(sResult,vPos + 1)
					end if
				end if	
			&apos;the TextPortion could be a list formatted as a paragraph
			elseif gaDocParagraph(oPortion.ParaID).ParaFirstLineIndent &lt; 0 then
				aList = ArrayOutOfString(sResult, chr(9))
				if uBound(aList()) &gt; 0 then
					if len(aList(0)) &lt;= 5 then
						sClass = oPortion.ParaStyleName &amp; &quot;Label&quot;
						sResult = &quot;&amp;lt;span class=&quot;&quot;ilc_text_inline_&quot; &amp; sClass &amp; &quot;&quot;&quot;&amp;gt;&quot; &amp; aList(0) &amp; &quot;&amp;lt;/span&amp;gt;&quot;
						for i = 1 to ubound(aList)
							sResult = sResult &amp; aList(i)
						next i
					end if	
				end if	
			end if
	
			&apos;delete the CharStyleName here, if the text portion is hard formatted
			&apos;if oPortion.CharFontNameState = com.sun.star.beans.PropertyState.DIRECT_VALUE  then
			&apos;	vCharStyle = &quot;&quot;
			&apos;else	
				vCharStyle = oPortion.CharStyleName
			&apos;end if   
			
			if oPortion.Id = 11 then
				vCharStyle = vCharStyle
			end if
	
			&apos;only reflect hard formatted text portions, if the character style is standard
			if vCharStyle = &quot;&quot; then
				if oPortion.CharWeight = com.sun.star.awt.FontWeight.BOLD then  &apos;this portion is formatted in bold
					select case sResult
						case gsTab &apos; do nothing
						case &quot; &quot; &apos; do nothing
						case else 
							sResult = &quot;&lt;Strong&gt;&quot; &amp; sResult &amp; &quot;&lt;/Strong&gt;&quot; 
					end select	
				end if    
		
				&apos;check subscript and superscript formatting
				vEsc = oPortion.CharEscapement
				if oPortion.CharEscapement &lt; 0 then  &apos;this portion is formatted in subscript
					sResult = &quot;&amp;lt;sub&amp;gt;&amp;lt;font size=&quot;&quot;-2&quot;&quot;&amp;gt;&quot; &amp; sResult &amp; &quot;&amp;lt;/sub&amp;gt;&amp;lt;/font&amp;gt;&quot; 
				elseif oPortion.CharEscapement &gt; 0 then  &apos;this portion is formatted in superscript
					sResult = &quot;&amp;lt;sup&amp;gt;&amp;lt;font size=&quot;&quot;-2&quot;&quot;&amp;gt;&quot; &amp; sResult &amp; &quot;&amp;lt;/sup&amp;gt;&amp;lt;/font&amp;gt;&quot; 
				end if
		
				if (oPortion.CharPosture = com.sun.star.awt.FontSlant.ITALIC) then  &apos;this portion is formatted in italic
					sResult = &quot;&lt;Emph&gt;&quot; &amp; sResult &amp; &quot;&lt;/Emph&gt;&quot;  
				end if
		
				&apos;check if the textportion is underlined
				if (oPortion.CharUnderline &gt; 0) then
					sResult = &quot;&amp;lt;u&amp;gt;&quot; &amp; sResult &amp; &quot;&amp;lt;/u&amp;gt;&quot;	
				end if         	

				if oPortion.CharFontPitch =  com.sun.star.awt.FontPitch.FIXED then
			        sResult = &quot;&lt;Code&gt;&quot; &amp; sResult &amp; &quot;&lt;/Code&gt;&quot; 
				end if
			else	
				vCharStyle = ReplaceString(vCharStyle, &quot;_&quot;, &quot; &quot;)
				select case vCharStyle
					case  &quot;ILIAS_Important&quot; : sResult = &quot;&lt;Important&gt;&quot; &amp; sResult &amp; &quot;&lt;/Important&gt;&quot;
					case  &quot;ILIAS_Comment&quot;   : sResult = &quot;&lt;Comment Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&gt;&quot; &amp; sResult &amp; &quot;&lt;/Comment&gt;&quot;
					case  &quot;ILIAS_Quotation&quot; : sResult = &quot;&lt;Quotation Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&gt;&quot; &amp; sResult &amp; &quot;&lt;/Quotation&gt;&quot;
					case  &quot;ILIAS_Accent&quot;    : sResult = &quot;&lt;Accent&gt;&quot; &amp; sResult &amp; &quot;&lt;/Accent&gt;&quot;
					case  &quot;ILIAS_Keyword&quot;   : sResult = &quot;&lt;Keyw&gt;&quot; &amp; sResult &amp; &quot;&lt;/Keyw&gt;&quot;
					&apos;case  &quot;ILIAS Code&quot;      : sResult = &quot;&lt;Code&gt;&quot; &amp; sResult &amp; &quot;&lt;/Code&gt;&quot;
					case  &quot;ILIAS_LaTeX&quot;     : sResult = &quot;[tex]&quot; &amp; sResult &amp; &quot;[/tex]&quot;
					case  &quot;Standard&quot;     	
				end select	        
				sResult = &quot;&amp;lt;span class=&quot;&quot;ilc_text_inline_&quot; &amp; vCharStyle &amp; &quot;&quot;&quot;&amp;gt;&quot; &amp; sResult &amp; &quot;&amp;lt;/span&amp;gt;&quot;
			end if  

			if (oPortion.ParaStyleName = gsMarginaleLeftStyle) or (oPortion.ParaStyleName = gsMarginaleRightStyle) then
				sAnchor = ReplaceString(oPortion.GetString, &quot;_&quot;, &quot;.&quot;)
				sAnchor = ReplaceString(sAnchor, &quot;_&quot;, &quot; &quot;)
				sResult = &quot;&lt;Anchor Name=&quot;&quot;a&quot; &amp; sAnchor &amp; &quot;&quot;&quot;&gt;&quot; &amp; sResult &amp; &quot;&lt;/Anchor&gt;&quot;
			end if

		end if	
	else  &apos;the paragraph is only a return
		&apos;check if paragraph is ILIAS Code formatted
		vParaStyle = left(oPortion.ParaStyleName, 10)
		if vParaStyle = &quot;ILIAS Code&quot; then
			sResult = &quot;&lt;br/&gt;&quot;
		else
			sResult = &quot;&lt;br/&gt;&lt;br/&gt;&quot;
		end if  
	end if
	GetTextPortionExportString = sResult
end function


function GetBookmarkExportString(oPortionRec as object) as string
dim sAnchor as string

	sAnchor = ReplaceString(oPortionRec.Bookmark, &quot;_&quot;, &quot; &quot;)
	GetBookmarkExportString = &quot;&lt;Anchor Name=&quot;&quot;&quot; &amp; sAnchor &amp; &quot;&quot;&quot;&gt;&quot; &amp; oPortionRec.GetString &amp; &quot;&lt;/Anchor&gt;&quot;

end function


function GetTextFieldExportString(oPortionRec as object) as string
dim sResult as string
dim sTarget as string
dim sText as string
dim sRef as string
dim i as integer
dim lCharColor as long
dim sTextColor as string
dim iNumberOfNull as integer

	sTarget = &quot;&quot;
	sResult = oPortionRec.GetString
	if sResult &lt;&gt; &quot;&quot; then
		&apos;first get the Paragraph to which is referenced
		for i = 1 to ubound(gaDocChapter())
			if gaDocChapter(i).ReferenceMark = oPortionRec.TextField then
				sTarget = &quot;il_0_st_&quot; &amp; gaDocParagraph(i).ID
				exit for
			end if
		next i
  		
  		if sTarget &lt;&gt; &quot;&quot; then
			sText = ReplaceSymbols(oPortionRec.GetString)
			sResult = &quot;&lt;IntLink Target=&quot;&quot;&quot; &amp; sTarget &amp; &quot;&quot;&quot; Type=&quot;&quot;StructureObject&quot;&quot;&gt;&quot; &amp; sText &amp; &quot;&lt;/IntLink&gt;&quot;
		else	
			sResult = oPortionRec.GetString
		end if

		if oPortionRec.CharWeight = com.sun.star.awt.FontWeight.BOLD THEN  &apos;this portion is formatted in bold
			if len(sResult) &gt; 1 then
		        sResult = &quot;&lt;Strong&gt;&quot; &amp; sResult &amp; &quot;&lt;/Strong&gt;&quot; 
		    elseif asc(sResult) &lt;&gt; 9 and sResult &lt;&gt; &quot; &quot; then
		        sResult = &quot;&lt;Strong&gt;&quot; &amp; sResult &amp; &quot;&lt;/Strong&gt;&quot; 
		    end if    
		endif    
    
      &apos;check textcolor other than black
      lCharColor = oPortionRec.CharColor
      if lCharColor &lt;&gt; -1 AND oPortionRec.HyperLinkURL = &quot;&quot; AND oPortionRec.CharStyleName &lt;&gt; &quot;ILIAS Zitat&quot; then
        sTextColor = GetIliasHexColorString(lCharColor)
        sResult = &quot;&amp;lt;font color=&quot;&quot;&quot; &amp; sTextColor &amp; &quot;&quot;&quot;&amp;gt;&quot; &amp; sResult &amp; &quot;&amp;lt;/font&amp;gt;&quot;
      endif
    
      &apos;check subscript and superscript formatting
      if oPortionRec.CharEscapement &lt; 0 THEN  &apos;this portion is formatted in subscript
        sResult = &quot;&amp;lt;sub&amp;gt;&amp;lt;font size=&quot;&quot;-2&quot;&quot;&amp;gt;&quot; &amp; sResult &amp; &quot;&amp;lt;/sub&amp;gt;&amp;lt;/font&amp;gt;&quot; 
      elseif oPortionRec.CharEscapement &gt; 0 THEN  &apos;this portion is formatted in superscript
        sResult = &quot;&amp;lt;sup&amp;gt;&amp;lt;font size=&quot;&quot;-2&quot;&quot;&amp;gt;&quot; &amp; sResult &amp; &quot;&amp;lt;/sup&amp;gt;&amp;lt;/font&amp;gt;&quot; 
      endif

      &apos;check citation: only format citation if paragraph isn&apos;t already citation
      if (oPortionRec.CharStyleName = &quot;ILIAS Citation&quot;) and (oPortionRec.ParaStyleName &lt;&gt; &quot;ILIAS Citation&quot;) then
        sResult = &quot;&lt;Quotation Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&gt;&quot; &amp; sResult &amp; &quot;&lt;/Quotation&gt;&quot; 
      end if  

		if oPortionRec.CharFontPitch =  com.sun.star.awt.FontPitch.FIXED then
	        sResult = &quot;&lt;Code&gt;&quot; &amp; sResult &amp; &quot;&lt;/Code&gt;&quot; 
		end if
		
		if oPortionRec.CharPosture = com.sun.star.awt.FontSlant.ITALIC THEN  &apos;this portion is formatted in italic
	        sResult = &quot;&lt;Emph&gt;&quot; &amp; sResult &amp; &quot;&lt;/Emph&gt;&quot;  
		endif
	end if	
      
	GetTextFieldExportString = sResult
end function 


function GetFootnoteExportString(oPortionRec as object) as string
dim aList()
dim sResult as string
dim iPos as integer
dim sURL as string
dim sLink as string
dim i as integer
  
	aList = ArrayOutOfString(oPortionRec.Footnote, &quot; &quot;)
	sResult = &quot;&quot;
	for i = 0 to ubound(aList())    
		if (left(aList(i),4) = &quot;http&quot;) or (left(aList(i),3) = &quot;www&quot;) then  &apos;this portion is a hyperlink
			sURL = ReplaceString(aList(i), &quot;&amp;amp;amp;&quot;, &quot;&amp;&quot;  )
			sLink = ReplaceSymbolsFootnote(aList(i))
			sResult = sResult &amp; &quot;&amp;lt;a href=&quot;&quot;&quot; &amp; sURL &amp; &quot;&quot;&quot; target=&quot;&quot;_blank&quot;&quot;&amp;gt;&quot; &amp; sLink &amp; &quot;&amp;lt;/a&amp;gt;&quot; &amp; &quot; &quot;
		else
			sResult = sResult &amp; ReplaceSymbols(aList(i)) &amp; &quot; &quot;
		end if  
	next i
	GetFootnoteExportString = &quot;&lt;Footnote&gt;&quot; &amp; sResult &amp; &quot;&lt;/Footnote&gt;&quot;   &apos;get the footnote text
end function


sub ExportParagraphTag(oPara as object, sExportString as string) 
&apos;exports the text of the paragraph, pString is the prepared concatenated paragraph string
dim sParaStyleShort as string
dim sStyle as string
dim sSubStyle as string
dim sCharacterStr as string
dim sAlign as string
	
	if oPara.ParaType = PARA_TYPE_LIST then
		WriteToStream(goExportXML, &quot;&lt;PageContent&gt;&quot;) 
		WriteToStream(goExportXML, &quot;&lt;Paragraph Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot; Characteristic=&quot;&quot;List&quot;&quot;&gt;&quot;) &apos;write new paragraph
		WriteToStream(goExportXML, sExportString) 
		WriteToStream(goExportXML, &quot;&lt;/Paragraph&gt;&quot;) 
		WriteToStream(goExportXML, &quot;&lt;/PageContent&gt;&quot;) 

	else  &apos;the paragraph is not a list
		&apos;check the ParaStyleName of the current paragraph
		sParaStyleShort = left(oPara.ParaStyleName, 4)  
		if sParaStyleShort = &quot;ILIAS&quot; then
			sStyle = GetIliasParagraphStyleString(oPara.ParaStyleName)
			sSubStyle = GetIliasParagraphSubStyleString(oPara.ParaStyleName)
		end if	
			
		&apos;******* added to reflect table content format *************
		if oPara.ParaStyleName = &quot;Table Contents&quot; then
			sStyle = &quot;TableContent&quot;
			sSubStyle = &quot;&quot;
		&apos;***********************************************************				
		else 
			sStyle = oPara.ParaStyleName
			sSubStyle = &quot;&quot;
		end if		
		
		&apos;the alignment of this paragraph could be hard formatted
		&apos;if oPara.ParaAdjust &gt; 0 then
		&apos;	sAlign = GetCssAlignString(oPara.ParaAdjust)
		&apos;	sStyle = sStyle &amp; &quot; ilc_text_block_align&quot; &amp; sAlign
		&apos;end if

		sCharacterStr =  &quot;Characteristic=&quot;&quot;&quot; &amp; sStyle &amp; &quot;&quot;&quot; &quot;
		
		if sSubStyle &lt;&gt; &quot;&quot; then &apos; this paragraph is formatted as Code
			sCharacterStr = sCharacterStr &amp; &quot;SubCharacteristic=&quot;&quot;&quot; &amp; sSubStyle &amp; _
		                            &quot;&quot;&quot; ShowLineNumbers=&quot;&quot;&quot; &amp; gsOptShowLineNo &amp;  &quot;&quot;&quot; AutoIndent=&quot;&quot;y&quot;&quot; &quot;
		end if
		                            
		WriteToStream(goExportXML, &quot;&lt;PageContent&gt;&quot;) &apos;write new paragraph
		WriteToStream(goExportXML, GetTag(&quot;Paragraph&quot;, sCharacterStr &amp; &quot;Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&quot;, sExportString, true))
		WriteToStream(goExportXML, &quot;&lt;/PageContent&gt;&quot;) &apos;write new paragraph			

	end if
end sub


function GetMediaLayoutString(oMedia as object) as string
dim iWidth as integer
dim iHeight as integer
dim iMediaType as integer
dim sExtension as string
dim iPropHeight as integer
dim iMaxWidth as integer

	iMediaType = gaExtMedia(oMedia.ExtMediaID).MediaType
	
	if iMediaType = MEDIA_TYPE_MEDIA then
		sExtension = GetFileNameExtension(oMedia.MediaURL)
		select case sExtension
			case &quot;mp3&quot;
				iWidth = 200
				iHeight = 20
			case else	
				if oMedia.Width &gt; 200 then
					iWidth = oMedia.Width
				else
					iWidth = 200
				end if
				if oMedia.Height &gt; 200 then
					iHeight = oMedia.Height
				else
					iHeight = 200
				end if	
		end select		
		GetMediaLayoutString = &quot;Width=&quot;&quot;&quot; &amp; iWidth &amp; &quot;&quot;&quot; Height=&quot;&quot;&quot; &amp; iHeight &amp; &quot;&quot;&quot;&quot;

	&apos;for graphics and embbeded elements
	else
		iWidth = CStr(Int(oMedia.Width / 26.459))
		iHeight = CStr(Int(oMedia.Height / 26.459))
		iMaxWidth = Int(goDlgExport.Model.txtMaxImageWidth.Text)		
		if iMaxWidth = 0 then
			GetMediaLayoutString = &quot;&quot;
		elseif iMaxWidth &lt; iWidth then
			iPropHeight = Int(iMaxWidth * iHeight / iWidth)
			GetMediaLayoutString = &quot;Width=&quot;&quot;&quot; &amp; iMaxWidth &amp; &quot;&quot;&quot; Height=&quot;&quot;&quot; &amp; iPropHeight &amp; &quot;&quot;&quot;&quot;	
		else
			GetMediaLayoutString = &quot;Width=&quot;&quot;&quot; &amp; iWidth &amp; &quot;&quot;&quot; Height=&quot;&quot;&quot; &amp; iHeight &amp; &quot;&quot;&quot;&quot;
		end if 
	end if			
end function


function GetIliasAlignString(oMedia as object, optional bStringOnly)

	&apos;check the horizontal orientation and wrap mode
	if (oMedia.HoriOrient = com.sun.star.text.HoriOrientation.RIGHT) or _
		(oMedia.TextWrap = com.sun.star.text.WrapTextMode.LEFT) then
		GetILIASAlignString = &quot;&quot;&quot;RightFloat&quot;&quot;&quot;
		
	elseif (oMedia.HoriOrient = com.sun.star.text.HoriOrientation.LEFT) or _
		(oMedia.TextWrap = com.sun.star.text.WrapTextMode.RIGHT) then
		GetILIASAlignString = &quot;&quot;&quot;LeftFloat&quot;&quot;&quot;
	
	&apos;nothing of that, so the graphic is aligned according ParaAdjust
	elseif oMedia.ParaAdjust = com.sun.star.style.ParagraphAdjust.LEFT then
		GetILIASAlignString = &quot;&quot;&quot;Left&quot;&quot;&quot;
	elseif oMedia.ParaAdjust = com.sun.star.style.ParagraphAdjust.RIGHT then
		GetILIASAlignString = &quot;&quot;&quot;Right&quot;&quot;&quot;
	else
		GetILIASAlignString = &quot;&quot;&quot;Center&quot;&quot;&quot;
	end if
	if not isMissing(bStringOnly) then
		GetILIASAlignString =  ReplaceString(GetILIASAlignString, &quot;&quot;, &quot;&quot;&quot;&quot;)
	end if 
		
end function


function GetIliasTableAlignString(sAlign as string) as string

	select case sAlign
		case 1: GetIliasTableAlignString = &quot;Right&quot;
		case 2: GetIliasTableAlignString = &quot;Center&quot;
		case else GetIliasTableAlignString = &quot;Left&quot;
	end select
end function


function GetPageAlias(piPos as integer) as string
dim vStr as string

	vStr = CStr(Ubound(gaHeadIdent()))
	vStr = &quot;&quot;&quot;il_0_pg_&quot; &amp; CStr(piPos) &amp; &quot;&quot;&quot;&quot;
	GetPageAlias = vStr
end function


sub ExportMetadata(psEntry, psTitle, psDescription as string, paKeywords(), bClose as boolean)
dim vItem as string
dim i as integer
dim vAnz as integer

  WriteToStream(goExportXML, &quot;&lt;MetaData&gt;&quot;)
  WriteToStream(goExportXML, GetTag(&quot;General&quot;, &quot;Structure=&quot; &amp; gsStru, &quot;&quot;, false))
  WriteToStream(goExportXML, &quot;&lt;Identifier Catalog=&quot;&quot;ILIAS&quot;&quot; Entry=&quot; &amp; psEntry &amp; &quot;/&gt;&quot;)
  WriteToStream(goExportXML, GetTag(&quot;Title&quot;,&quot;Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&quot;, psTitle, true))
  WriteToStream(goExportXML, &quot;&lt;Language Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;/&gt;&quot;)
  WriteToStream(goExportXML, GetTag(&quot;Description&quot;,&quot;Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&quot;, psDescription, true))
  vAnz = Ubound(paKeywords())
  if vAnz &lt; 1 then
   &apos; WriteToStream(goExportXML, GetTag(&quot;Keyword&quot;,&quot;Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&quot;, &quot;&quot;, true))
  else
    for i = 0 to vAnz
      vItem = LTrim(RTrim(paKeywords(i)))
      WriteToStream(goExportXML, GetTag(&quot;Keyword&quot;,&quot;Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&quot;, vItem, true))
    next i
  end if  
  WriteToStream(goExportXML, &quot;&lt;/General&gt;&quot;)
  if bClose then WriteToStream(goExportXML, &quot;&lt;/MetaData&gt;&quot;)
end sub


sub ExportMedia
dim iCount as integer
dim i as integer
dim sTitle as string
dim sDescription as string
dim sFilename as string
dim sIdent as string
dim aKeywords(0)
dim sLayout as string
dim sAlign as string
dim sExtension as string
dim sImageTyp as string
dim iMediaType as integer
dim iPos as integer
dim iMediaWidth as integer
dim iMaxWidth as integer
dim bSetMagnifier as boolean

	iPos = 0
	iCount = ubound(gaDocMedia())
	for i = 1 to iCount
		if gaDocMedia(i).IsInUse then
			iPos = iPos + 1			
			iMediaType = gaExtMedia(gaDocMedia(i).ExtMediaID).MediaType
			
			&apos;the media is an image
			if iMediaType = MEDIA_TYPE_IMAGE then			
				sDescription = gaDocMedia(i).Title
				sTitle = gaDocMedia(i).MediaName
				sFileName = FileNameOutOfPath(gaExtMedia(gaDocMedia(i).ExtMediaID).FileName)
				sIdent = &quot;&quot;&quot;il_0_mob_&quot; &amp; CStr(i) &amp; &quot;&quot;&quot;&quot;
				sLayout = GetMediaLayoutString(gaDocMedia(i))
				sAlign = &quot;HorizontalAlign=&quot; &amp; GetIliasAlignString(gaDocMedia(i))
				sExtension = GetFileNameExtension(sFileName)
				if sExtension &lt;&gt; &quot;jpg&quot; then
					sImageTyp = &quot;image/&quot; &amp; sExtension
				else
					sImageTyp = &quot;image/jpeg&quot;
				end if

				WriteToStream(goExportXML, &quot;&lt;MediaObject&gt;&quot;)
				ExportMetadata(sIdent, sTitle, sDescription, aKeywords(), true)			
				WriteToStream(goExportXML, &quot;&lt;MediaItem Purpose=&quot;&quot;Standard&quot;&quot;&gt;&quot;)
				WriteToStream(goExportXML, GetTag(&quot;Location&quot;,&quot;Type=&quot;&quot;LocalFile&quot;&quot;&quot;, sFileName, true))
				WriteToStream(goExportXML, &quot;&lt;Format&gt;&quot; &amp; sImageTyp &amp; &quot;&lt;/Format&gt;&quot;)
				WriteToStream(goExportXML, GetTag(&quot;Layout&quot;, sLayout &amp; &quot; &quot; &amp; sAlign, &quot;&quot;, true))
				WriteToStream(goExportXML, &quot;&lt;/MediaItem&gt;&quot;)

				iMaxWidth = Int(goDlgExport.Model.txtMaxImageWidth.Text)
				bSetMagnifier = goDlgExport.Model.optActivateFullSize.State = 1
				iMediaWidth = CStr(Int(gaDocMedia(i).Width / 26.459))
				if bSetMagnifier and (iMaxWidth &gt; 0) and (iMaxWidth &lt; iMediaWidth) then
					WriteToStream(goExportXML, &quot;&lt;MediaItem Purpose=&quot;&quot;Fullscreen&quot;&quot;&gt;&quot;)								
					WriteToStream(goExportXML, GetTag(&quot;Location&quot;,&quot;Type=&quot;&quot;LocalFile&quot;&quot;&quot;, sFileName, true))
					WriteToStream(goExportXML, &quot;&lt;Format&gt;&quot; &amp; sImageTyp &amp; &quot;&lt;/Format&gt;&quot;)
					WriteToStream(goExportXML, GetTag(&quot;Layout &quot;, sAlign, &quot;&quot;, true))
					WriteToStream(goExportXML, &quot;&lt;/MediaItem&gt;&quot;)
				end if	
				WriteToStream(goExportXML, &quot;&lt;/MediaObject&gt;&quot;)  

			&apos;the media is a sound, video or flash element
			else
				WriteToStream(goExportXML, &quot;&lt;MediaObject&gt;&quot;)
				if FileExists(gaDocMedia(i).MediaName) then
					sTitle = sFileName
				else
					sTitle = gaDocMedia(i).MediaName
				end if	
				sDescription = gaDocMedia(i).Title
				sFileName = FileNameOutOfPath(gaExtMedia(gaDocMedia(i).ExtMediaID).FileName)
				sIdent = &quot;&quot;&quot;il_0_mob_&quot; &amp; CStr(i) &amp; &quot;&quot;&quot;&quot;
				sLayout = GetMediaLayoutString(gaDocMedia(i))
				ExportMetadata(sIdent, sTitle, sDescription, aKeywords(), true)
				WriteToStream(goExportXML, &quot;&lt;MediaItem Purpose=&quot;&quot;Standard&quot;&quot;&gt;&quot;)
				WriteToStream(goExportXML, GetTag(&quot;Location&quot;,&quot;Type=&quot;&quot;LocalFile&quot;&quot;&quot;, sFileName, true))
				WriteToStream(goExportXML, GetTag(&quot;Layout&quot;, sLayout &amp; &quot; &quot; &amp; sAlign, &quot;&quot;, true))
				WriteToStream(goExportXML, &quot;&lt;/MediaItem&gt;&quot;)
				WriteToStream(goExportXML, &quot;&lt;/MediaObject&gt;&quot;)
  			end if	                
		end if	
     next i
end sub   


sub MoveMediaObjectsToSubFolders &apos;new ILIAS packaging system
dim sImageFolder as string
dim sNewFolder as string
dim sMediaName as string
dim sFileFrom as string
dim sFileTo as string
dim sFullName as string
dim iCount as long
dim i as integer

On Error Goto ErrorHandler
	sImageFolder = gsExportMediaDir &amp; &quot;/images&quot;
	iCount = ubound(gaExtMedia())
	if iCount &gt; 0 then
		for i = 1 to iCount
			sFullName = gaExtMedia(i).FileName
			if FileExists(sFullName) then
				sMediaName = FileNameOutOfPath(sFullName)
		        sNewFolder = gsExportMediaDir &amp; &quot;/expDir_&quot; &amp; i &amp; &quot;/dsDir_&quot; &amp; i
		        sFileTo = sNewFolder &amp; &quot;/&quot; &amp; sMediaName		        
		        MkDir(sNewFolder)
		        FileCopy(sFullName, sFileTo)
			else	
				select case gaExtMedia(i).MediaType
					case MEDIA_TYPE_IMAGE    : giMissedGraphics = giMissedGraphics + 1
					case MEDIA_TYPE_EMBEDDED : giMissedEmbeddedObject = giMissedEmbeddedObject + 1
				end select			   
			end if			
		next i		
		RmDir(sImageFolder)
	end if	
	Exit sub
  
ErrorHandler:  
	giMissedGraphics = giMissedGraphics + 1       
	Resume Next       
end sub


sub ExportPageBreak(oPara as object, iPageID as long)
dim sIdent as string
dim sTitle as string
dim sDescription as string
dim aKeywords()

		WriteToStream(goExportXML, &quot;&lt;/PageObject&gt;&quot;)
		WriteToStream(goExportXML, &quot;&lt;PageObject&gt;&quot;)
		sIdent = &quot;&quot;&quot;il_0_pg_&quot; &amp; iPageID &amp; &quot;&quot;&quot;&quot;
		sTitle = &quot;&quot;
		sDescription = &quot;&quot;
		ExportMetadata(sIdent, sTitle, sDescription, aKeywords(), true)

end sub


sub AddPrefixToTextPortion(oPara as object, sPrefix as string)
dim iPortionCount as long
dim i as integer

	iPortionCount = ubound(gaDocTextPortion())
	for i = 1 to iPortionCount
		if gaDocTextPortion(i).ParaID = oPara.ID then
			gaDocTextPortion(i).GetString = sPrefix &amp; gaDocTextPortion(i).GetString
			exit for
		end if
	next i	
end sub



function GetTag(aTag as String, aAttribut as String, aText as String, aClose as boolean) as string
Dim vString as String

  vString = &quot;&lt;&quot; &amp; aTag
  If aAttribut &lt;&gt; &quot;&quot; then
    vString = vString &amp; &quot; &quot; &amp; aAttribut &amp; &quot;&gt;&quot;
  end if  
  if aText &lt;&gt; &quot;&quot; then &apos; es gibt Text
    vString = vString &amp; aText
  end if  
  if aClose then
    vString = vString &amp; &quot;&lt;/&quot; &amp; aTag &amp; &quot;&gt;&quot;
  end if
  GetTag = vString
end function



sub SetTableCaptions
dim i as long
dim iParaID as long
dim iTableID as long
dim sCaption as string
dim bGoOn as boolean

	for i = ubound(gaDocTextPortion()) to 1 step -1
		if gaDocTextPortion(i).ParaStyleName = &quot;Table&quot; then
			&apos;set the paragraph.state of these portions to PARA_STATE_EXPORTED
			iParaID = gaDocTextPortion(i).ParaID
			gaDocParagraph(iParaID).State = PARA_STATE_EXPORTED
			bGoOn = true
			sCaption = &quot;&quot;
			do while bGoOn
				if (gaDocTextPortion(i).ParaStyleName = &quot;Table&quot;) then 
					&apos;concatenate the table caption
					sCaption = gaDocTextPortion(i).GetString &amp; sCaption
				else 
					bGoOn = false
				end if	
				if bGoOn then
					i = i - 1
					bGoOn = i &gt; 0
				end if	
			loop
			if (i &gt; 0) and (sCaption &lt;&gt; &quot;&quot;) then
				&apos;get the ParaRec of the last portion of the upper table
				iParaID = gaDocTextPortion(i).ParaID
				&apos;check if the paragraph is part of a table
				iTableID = gaDocParagraph(iParaID).TableParentID
				if iTableID &gt; 0 then
					&apos;set the table caption
					gaDocParagraph(iTableID).TableCaption = sCaption 
				end if	
			end if
		end if	
	next i	
end sub


function GetChapterSetByType(sType as string)
dim aChapterList()
dim iChapterCount as long
dim i as long
dim j as long

	j = 0
	iChapterCount = ubound(gaDocChapter())
	redim aChapterList(iChapterCount)
	for i = 1 to iChapterCount
		if gaDocChapter(i).ChapterType = sType then
			j = j + 1
			aChapterList(j) = gaDocChapter(i)
		end if
	next i
	redim preserve aChapterList(j)
	GetChapterSetByType = aChapterList()
end function


function GetParaSetOfChapter(iChapterID as long)
dim aParaList()
dim iParaCount as long
dim i as long
dim j as long

	j = 0
	iParaCount = ubound(gaDocParagraph())
	redim aParaList(iParaCount)
	for i = 1 to iParaCount
		if gaDocParagraph(i).ChapterID = iChapterID then
			j = j + 1
			aParaList(j) = gaDocParagraph(i).ID
		elseif gaDocParagraph(i).ChapterID &gt; iChapterID then
			exit for
		end if
	next i
	redim preserve aParaList(j)
	GetParaSetOfChapter = aParaList()
end function


function GetParaSetPageArea(iPageArea as integer)
dim aParaList()
dim iParaCount as long
dim i as long
dim j as long

	j = 0
	iParaCount = ubound(gaDocParagraph())
	redim aParaList(iParaCount)
	for i = 1 to iParaCount
		if gaDocParagraph(i).PageArea = iPageArea then
			j = j + 1
			aParaList(j) = gaDocParagraph(i).ID
		elseif gaDocParagraph(i).PageArea &gt; iPageArea then
			exit for
		end if
	next i
	redim preserve aParaList(j)
	GetParaSetPageArea = aParaList()
end function


function GetParaSetTable(iParaID as long) 
dim aParaList() as long
dim iParaCount as long
dim i as long
dim j as long

	j = 0
	iParaCount = ubound(gaDocParagraph())
	redim aParaList(iParaCount)
	for i = 1 to iParaCount
		if gaDocParagraph(i).TableParentID = iParaID then
			j = j + 1
			aParaList(j) = gaDocParagraph(i).ID
		end if
	next i
	redim preserve aParaList(j)
	GetParaSetTable = aParaList()
end function


function GetParaSetList(iParaID as long)
dim aParaList()
dim iParaCount as long
dim i as long
dim j as long

	j = 0
	iParaCount = ubound(gaDocParagraph())
	redim aParaList(iParaCount)
	for i = iParaID to iParaCount
		if gaDocParagraph(i).NumberingType &lt;&gt; &quot;&quot; then
			j = j + 1
			aParaList(j) = gaDocParagraph(i).ID
		else
			exit for	
		end if
	next i
	redim preserve aParaList(j)
	GetParaSetList = aParaList()
end function



function GetTextPortionByBookmark(sBookmark as string) as object
dim iCount as long
dim i as long

	iCount = ubound(gaDocTextPortion())
	for i = 1 to iCount
		if gaDocTextPortion(i).Bookmark = sBookmark then
			GetTextPortionByBookmark = gaDocTextPortion(i)
			exit for	
		end if
	next i
end function


function GetParaSetListOld(iParaID as long)
dim aParaList()
dim iParaCount as long
dim iNumberingType as integer
dim i as long
dim j as long

	j = 0
	iParaCount = ubound(gaDocParagraph())
	&apos;sNumberingStyleName = gaDocParagraph(iParaID).NumberingStyleName
	iNumberingType = gaDocParagraph(iParaID).NumberingType
	redim aParaList(iParaCount)
	for i = iParaID to iParaCount
		if gaDocParagraph(i).NumberingType = iNumberingType then
			j = j + 1
			aParaList(j) = gaDocParagraph(i).ID
		else
			exit for	
		end if
	next i
	redim preserve aParaList(j)
	GetParaSetList = aParaList()
end function


function GetTextPortionSet(iParaID as long)
dim iPortionCount as long
dim aPortionList()
dim i as long
dim j as long

	j = 0
	iPortionCount = ubound(gaDocTextPortion())
	redim aPortionList(iPortionCount)
	for i = 1 to iPortionCount
		if gaDocTextPortion(i).ParaID = iParaID then
			j = j + 1
			aPortionList(j) = gaDocTextPortion(i).ID
		elseif gaDocTextPortion(i).ParaID &gt; iParaID then
			exit for
		end if
	next i
	redim preserve aPortionList(j)
	GetTextPortionSet = aPortionList()
end function


function GetTextPortionStringByParaID(iParaID as long) as string
dim iPortionCount as long
dim sString
dim i as long

	sString = &quot;&quot;
	iPortionCount = ubound(gaDocTextPortion())
	for i = 1 to iPortionCount
		if gaDocTextPortion(i).ParaID = iParaID then
			sString = sString + gaDocTextPortion(i).GetString
		elseif gaDocTextPortion(i).ParaID &gt; iParaID then
			exit for
		end if
	next i
	GetTextPortionStringByParaID = sString
end function


function GetDocMediaSet(iPortionID as long)
dim iMediaCount as long
dim aMediaList()
dim i as long
dim j as long

	j = 0
	iMediaCount = ubound(gaDocMedia())
	redim aMediaList(iMediaCount)
	for i = 1 to iMediaCount
		if gaDocMedia(i).TextPortionID = iPortionID then
			j = j + 1
			aMediaList(j) = gaDocMedia(i).ID
		end if
	next i
	redim preserve aMediaList(j)
	GetDocMediaSet = aMediaList()
end function


function GetDocMediaByPortionID(iPortionID as long) as object
dim iMediaCount as long
dim i as long

	iMediaCount = ubound(gaDocMedia())
	for i = 1 to iMediaCount
		if gaDocMedia(i).TextPortionID = iPortionID then
			GetDocMediaByPortionID = gaDocMedia(i)
			exit function
		end if
	next i
end function


function GetILIASListType(iType as integer)
dim sType as string

	select case iType
		case 0: sType = &quot;Alphabetic&quot;
		case 1: sType = &quot;alphabetic&quot;
		case 2: sType = &quot;Roman&quot;
		case 3: sType = &quot;roman&quot;
		case 4: sType = &quot;Number&quot;
		case 6: sType = &quot;Unordered&quot;
	end select
	GetILIASListType = sType
end function


function GetIliasParagraphStyleString(sParaStyle as string) as string
dim sStyle as string

	select case sParaStyle
		case &quot;ILIAS Additional&quot;: sStyle = &quot;Additional&quot;
        case &quot;ILIAS Citation&quot;: sStyle = &quot;Citation&quot;
        case &quot;ILIAS Example&quot;: sStyle = &quot;Example&quot;
        case &quot;ILIAS Mnemonic&quot;: sStyle = &quot;Mnemonic&quot;
        case &quot;ILIAS Remark&quot;: sStyle = &quot;Remark&quot;
        case &quot;ILIAS Code other&quot;: sStyle = &quot;Code&quot;
        case &quot;ILIAS Code C&quot;: sStyle = &quot;Code&quot;
        case &quot;ILIAS Code C++&quot;: sStyle = &quot;Code&quot;
        case &quot;ILIAS Code Java&quot;: sStyle = &quot;Code&quot;
        case &quot;ILIAS Code PHP&quot;: sStyle = &quot;Code&quot;
        case &quot;ILIAS Code HTML&quot;: sStyle = &quot;Code&quot;
        case &quot;ILIAS Code XML&quot;: sStyle = &quot;Code&quot;
        case &quot;ILIAS Code VB&quot;: sStyle = &quot;Code&quot;
        case &quot;ILIAS Code Latex&quot;: sStyle = &quot;Code&quot;
        case &quot;ILIAS Code Delphi&quot;: sStyle = &quot;Code&quot;
        case else 
          sStyle = &quot;&quot;
	end select
	GetIliasParagraphStyleString = sStyle
end function


function GetIliasParagraphSubStyleString(sParaStyle as string) as string
dim sSubStyle as string

      select case sParaStyle
        case &quot;ILIAS Additional&quot;: sSubStyle = &quot;&quot;
        case &quot;ILIAS Citation&quot;: sSubStyle = &quot;&quot;
        case &quot;ILIAS Example&quot;: sSubStyle = &quot;&quot;
        case &quot;ILIAS Mnemonic&quot;: sSubStyle = &quot;&quot;
        case &quot;ILIAS Remark&quot;: sSubStyle = &quot;&quot;
        case &quot;ILIAS Code other&quot;: sSubStyle = &quot;n&quot;
        case &quot;ILIAS Code C&quot;: sSubStyle = &quot;c&quot;
        case &quot;ILIAS Code C++&quot;: sSubStyle = &quot;cpp&quot;
        case &quot;ILIAS Code Java&quot;: sSubStyle = &quot;java122&quot;
        case &quot;ILIAS Code PHP&quot;: sSubStyle = &quot;php3&quot;
        case &quot;ILIAS Code HTML&quot;: sSubStyle = &quot;html&quot;
        case &quot;ILIAS Code XML&quot;: sSubStyle = &quot;xml&quot;
        case &quot;ILIAS Code VB&quot;: sSubStyle = &quot;vb&quot;
        case &quot;ILIAS Code Latex&quot;: sSubStyle = &quot;latex&quot;
        case &quot;ILIAS Code Delphi&quot;: sSubStyle = &quot;delphi&quot;
        case else 
          sSubStyle = &quot;&quot;
      end select
      GetIliasParagraphSubstyleString = sSubstyle
end function


function GetFirstDocMediaRecByExtMediaID(iExtMediaID as long) as object
dim i as long

	for i = 1 to ubound(gaDocMedia())
		if (gaDocMedia(i).ExtMediaID = iExtMediaID) and (gaDocMedia(i).IsInUse) then
			GetFirstDocMediaRecByExtMediaID = gaDocMedia(i)
			exit function
		end if
	next i
end function




</script:module>