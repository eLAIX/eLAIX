<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="exLM" script:language="StarBasic">&apos;****************************************************************************
&apos; eLAIX   : Writing ILIAS learning modules offline with OpenOffice.org Writer
&apos; Author  : Harry Boldt - h.boldt@boldt-media.de - http://elaix.org
&apos; License : GPL
&apos;****************************************************************************

&apos; This module is part of eLAIX. You can redistribute it and/or
&apos; modify it under the terms of the GNU Lesser General Public
&apos; License as published by the Free Software Foundation, either
&apos; version 3 of the License, or (at your option) any later version.
&apos; 
&apos; This program is distributed in the hope that it will be useful,
&apos; but WITHOUT ANY WARRANTY; without even the implied warranty of
&apos; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
&apos; Lesser General Public License for more details.
&apos; 
&apos; You should have received a copy of the GNU Lesser General Public
&apos; License along with this program. If not, please visit the Free
&apos; Software Foundation website at http://www.gnu.org/licenses/.


Option Explicit

private psFrameCaption as string
private piBacksteps as integer
private paLayout(6)
private paPageHeader(2)
private paTocMode(1)
private paCheck(1)

Type Metadata
	docTitle as string
	docDescription as string
	docLanguage as string
	docKeywords as string
	docAuthors as string
	docCopyright as string
	propOutlineNumbering as string
End Type


sub SetIliasPathGlobals(sFilename as string) &apos;after export filename has been set
dim vFileName as string
dim vTempFolder as string
dim vFileFolder as string
dim sfa As Object &apos; SimpleFileAccess object
dim vaExt(1) As String
dim vZipDefault as string

  gsExportZIP = sFilename
  vTempFolder = GetRandomString(&quot;tmp-&quot;,12)
  vFilename = FilenameOutOfPath(gsExportZIP, gsPathSeparator) &apos; the Filename of the zip file
  vFileFolder = GetFilenameWithoutExtension(vFileName) &apos; the Filename of the zip file without extension
  gsExportZipDir = gsCurDir &amp; gsPathSeparator &amp; vTempFolder 
  gsExportXmlDir = gsCurDir &amp; gsPathSeparator &amp; vTempFolder &amp; gsPathSeparator &amp; vFileFolder
  gsExportStyleDir = gsExportXmlDir &amp; gsPathSeparator &amp; &quot;style&quot;
  ChDir(gsExportXmlDir)
  If Dir(gsExportZipDir,16)&lt;&gt; &quot;&quot; then &apos; Delete existing folder
    sfa = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
    sfa.setReadOnly(gsExportZipDir, false) &apos; gsExportZipDir is then not readonly
    RmDir(gsExportZipDir)
  end if
  MkDir(gsExportXmlDir)
  gsExportXML = ConvertToURL(gsExportXmlDir &amp; gsPathSeparator &amp; vFileFolder &amp; gsExtensionXML)
  gsExportMediaDir = gsExportXmlDir &amp; gsPathSeparator &amp; &quot;objects&quot;
  If Dir(gsExportMediaDir,16)= &quot;&quot; then &apos; Folder does not exist
    MkDir gsExportMediaDir
  end if  
end Sub


sub SetIliasPropArrays &apos;after export filename has been set

	&apos;set layout properties
	paLayout(0) = &quot;toc2win&quot;
	paLayout(1) = &quot;toc2windyn&quot;
	paLayout(2) = &quot;1window&quot;
	paLayout(3) = &quot;2window&quot;
	paLayout(4) = &quot;3window&quot;
	paLayout(5) = &quot;fullscreen&quot;
	paLayout(6) = &quot;presentation&quot;
	
	&apos;set PageHeader properies
	paPageHeader(0) = &quot;st_title&quot;
	paPageHeader(1) = &quot;pg_title&quot;
	paPageHeader(2) = &quot;none&quot;
	
	&apos;set TocMode properties
	paTocMode(0) = &quot;chapters&quot;
	paTocMode(1) = &quot;pages&quot;
	
	&apos;set Check properties
	paCheck(0) = &quot;n&quot;
	paCheck(1) = &quot;y&quot;
end sub

Sub ExportToILIAS
	gsExportType = &quot;LM&quot;
	SetIliasPropArrays
	WriteToStream(goExportXML, gsHead)
	WriteToStream(goExportXML, GetTag(&quot;ContentObject&quot;, &quot;Type=&quot; &amp; gsType, &quot;&quot;, false))
    ExportDocMetaData
    ExportStructure
    ExportDocument
    ExportMedia    
    ExportDocProperties
	WriteToStream(goExportXML, &quot;&lt;/ContentObject&gt;&quot;)
	ExportLMStyles
End Sub


sub ExportDocMetaData
dim sIdent as string
dim sTitle as string
dim sDescription as string
dim aKeywords()
dim aAuthors()
dim oMetadata as object
dim iCount as integer
dim i as integer
dim sAuthor as string

	oMetadata = GetIliasMetadata()

    sIdent = &quot;&quot;&quot;il_0_lm_0&quot;&quot;&quot;
    sTitle = ReplaceSymbolsMetadata(oMetadata.docTitle)
    sDescription = ReplaceSymbolsMetadata(oMetadata.docDescription)
    aKeywords = ArrayOutOfString(ReplaceSymbolsMetadata(oMetadata.docKeywords), &quot;,&quot;)
    gsLang = GetLanguageCode(oMetadata.docLanguage)
    ExportMetaData(sIdent, sTitle, sDescription, aKeywords(), false)   

    aAuthors = ArrayOutOfString(ReplaceSymbolsMetadata(oMetadata.docAuthors), &quot;,&quot;)
	if oMetadata.docAuthors &lt;&gt; &quot;&quot; then
	    WriteToStream(goExportXML, &quot;&lt;Lifecycle Status=&quot;&quot;&quot;&quot;&gt;&quot;)
	    WriteToStream(goExportXML, &quot;&lt;Version Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;/&gt;&quot;)
		WriteToStream(goExportXML, &quot;&lt;Contribute Role=&quot;&quot;Author&quot;&quot;&gt;&quot;)
		for i = 0 to ubound(aAuthors())
			sAuthor = ltrim(rtrim(aAuthors(i))
			WriteToStream(goExportXML, &quot;&lt;Entity&gt;&quot; &amp; sAuthor &amp; &quot;&lt;/Entity&gt;&quot;)
		next i
		WriteToStream(goExportXML, &quot;&lt;Date/&gt;&lt;/Contribute&gt;&lt;/Lifecycle&gt;&quot;
	end if  
	
	if oMetadata.docCopyright &lt;&gt; &quot;&quot; then
		WriteToStream(goExportXML, &quot;&lt;Rights Costs=&quot;&quot;&quot;&quot; CopyrightAndOtherRestrictions=&quot;&quot;Yes&quot;&quot;&gt;&quot;)
		WriteToStream(goExportXML, GetTag(&quot;Description&quot;, &quot;Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&quot;, oMetadata.docCopyright, true))
		WriteToStream(goExportXML, &quot;&lt;/Rights&gt;&quot;
	end if
	WriteToStream(goExportXML, &quot;&lt;/MetaData&gt;&quot;)
    
end sub


sub ExportStructure
dim iChapterCount as integer
dim iChapter as integer
dim iPage as integer
dim iLevel as integer
	
	iChapterCount = ubound(gaDocChapter())
	piBacksteps = 0
	iChapter = 0
	iPage = 0
	iChapter = ExportStructureElements(iChapterCount, iChapter, iPage)	
end sub


function ExportStructureElements(iChapterCount as integer, iChapter as integer, iPage as integer) as integer
dim sHeadIdent as string
dim sTitle as string
dim sDescription as string
dim aKeywords()
dim iLevel as integer
dim bContinue as boolean
dim iNextLevel as integer
dim aChapterList()
dim iID as long

	aChapterList() = GetChapterSetByType(CHAPTER_TYPE_HEADING)
	&apos;aChapterList() = gaDocChapter()
	iChapterCount = ubound(aChapterList())

	bContinue = true
	do while (iChapter &lt; iChapterCount) and bContinue

		if piBacksteps = 0 then		
			iChapter = iChapter + 1
			WriteToStream(goExportXML, &quot;&lt;StructureObject&gt;&quot;)		
			sHeadIdent = &quot;&quot;&quot;il_0_st_&quot; &amp; CStr(iChapter) &amp; &quot;&quot;&quot;&quot;
			sTitle = ReplaceSymbolsHeading(aChapterList(iChapter).GetString)
			sDescription = &quot;&quot;
			ExportMetadata(sHeadIdent, sTitle, sDescription, aKeywords(), true)
			
			if (aChapterList(iChapter).HasContent) then
				iID = aChapterList(iChapter).ID
				ExportStructurePages(iChapterCount, iID)
			end if	
		
			&apos;check if there is a next chapter
			if iChapter &lt; iChapterCount then
				iNextLevel = aChapterList(iChapter + 1).Level
				
				&apos;check if the next chapter has a higher level
				if (iNextLevel &gt; aChapterList(iChapter).Level) then
					&apos;call this function recursively
					iChapter = ExportStructureElements(iChapterCount, iChapter, iPage)
					
				&apos;check if this level is lower than the last level	
				elseif (iNextLevel &lt; aChapterList(iChapter).Level) then
					piBacksteps = aChapterList(iChapter).Level - iNextLevel - 1
					bContinue = false
				end if				
			end if
			
			WriteToStream(goExportXML, &quot;&lt;/StructureObject&gt;&quot;)
		else
			piBacksteps = piBacksteps - 1
			bContinue = false
		end if
	loop	
	ExportStructureElements = iChapter		
end function


sub ExportStructurePages(iChapterCount as long, iChapter as long)
dim iPage as long
dim sPageIdent as string
&apos;dim iCount as long

	&apos;write the page of this structure level
	&apos;iPage = gaDocChapter(iChapter).ID
	sPageIdent = &quot;&quot;&quot;il_0_pg_&quot; &amp; CStr(iChapter) &amp; &quot;&quot;&quot;&quot;
	WriteToStream(goExportXML, &quot;&lt;PageObject&gt;&quot;)
	WriteToStream(goExportXML, GetTag(&quot;PageAlias&quot;, &quot;OriginId=&quot; &amp; sPageIdent, &quot;&quot;, true))
	WriteToStream(goExportXML, &quot;&lt;/PageObject&gt;&quot;)	
	
	&apos;look for more pages on this structure level (page breaks)
	&apos;iCount = ubound(gaDocChapter())
	do while (iChapter &lt; iChapterCount)
		iChapter = iChapter + 1
		if gaDocChapter(iChapter).ChapterType = CHAPTER_TYPE_PAGE then
			&apos;iPage = gaDocChapter(iChapter).ID
			sPageIdent = &quot;&quot;&quot;il_0_pg_&quot; &amp; CStr(iChapter) &amp; &quot;&quot;&quot;&quot;
			WriteToStream(goExportXML, &quot;&lt;PageObject&gt;&quot;)
			WriteToStream(goExportXML, GetTag(&quot;PageAlias&quot;, &quot;OriginId=&quot; &amp; sPageIdent, &quot;&quot;, true))
			WriteToStream(goExportXML, &quot;&lt;/PageObject&gt;&quot;)	
		else
			exit do
		end if
	loop
end sub


sub ExportDocument
dim iChapter as long
dim oChapter as object
dim sIdent as string
dim sTitle as string
dim sDescription as string
dim aKeywords() as string
dim aParaSet() as long
dim oPara as object
dim iParaCount as long
dim i as long
dim sCharacteristic as string
dim iActPageID as long

	iActPageID = 0

	for iChapter = 1 to ubound(gaDocChapter())
	
		oChapter = gaDocChapter(iChapter)

		&apos;generate a new page object if this chapter is the first or follows solo-headline 
		if oChapter.HasContent then
		
			&apos;get the paragraphs of this chapter
			aParaSet() = GetParaSetOfChapter(oChapter.ID)	
			iParaCount = ubound(aParaSet())	
			
			&apos;export the metadata of the page		
			WriteToStream(goExportXML, &quot;&lt;PageObject&gt;&quot;)
			&apos;iActPageID = iActPageID + 1
			&apos;iActPageID = iActPageID + 1
			sIdent = &quot;&quot;&quot;il_0_pg_&quot; &amp; CStr(oChapter.ID) &amp; &quot;&quot;&quot;&quot;
			&apos;sTitle = ReplaceSymbolsHeading(oChapter.GetString)
			sTitle = oChapter.GetString
			sDescription = &quot;&quot;
			ExportMetadata(sIdent, sTitle, sDescription, aKeywords(), true)
		
			&apos;select all paragraphs of this chapter and export them
			for i = 1 to iParaCount
				oPara = gaDocParagraph(aParaSet(i)) 
				if oPara.State &lt;&gt; PARA_STATE_EXPORTED then
					ExportParagraph(oPara)
				end if	
				goDlgExport.Model.lblCountWrite.Label = oPara.ID
			next i
			
			WriteToStream(goExportXML, &quot;&lt;/PageObject&gt;&quot;)
		end if		
		
	next iChapter

	iActPageID = oChapter.ID
	
	&apos;if the header should be exported, do it here
	if gbOptIncludeHeader then
		iActPageID = iActPageID + 1
		ExportHeader(iActPageID)
	end if

	&apos;if the footer should be exported, do it here
	if gbOptIncludeFooter then
		iActPageID = iActPageID + 1
		ExportFooter(iActPageID)
	end if
	
end sub	


sub ExportHeader(iActPage as long)
dim sIdent as string
dim sTitle as string
dim sDescription as string
dim aKeywords() as string
dim aParaSet() as long
dim oPara as object
dim i as long

	giHeaderPageID = iActPage
	WriteToStream(goExportXML, &quot;&lt;PageObject&gt;&quot;)
	sIdent = &quot;&quot;&quot;il_0_pg_&quot; &amp; CStr(giHeaderPageID) &amp; &quot;&quot;&quot;&quot;
	sTitle = &quot;Header&quot;
	sDescription = &quot;&quot;
	ExportMetadata(sIdent, sTitle, sDescription, aKeywords(), true)
	
	aParaSet() = GetParaSetPageArea(PAGE_AREA_HEADER)		
	for i = 1 to ubound(aParaSet())
		oPara = gaDocParagraph(aParaSet(i)) 
		if oPara.State &lt;&gt; PARA_STATE_EXPORTED then
			ExportParagraph(oPara)
		end if	
	next i	
	WriteToStream(goExportXML, &quot;&lt;/PageObject&gt;&quot;)
end sub


sub ExportFooter(iActPage as long)
dim sIdent as string
dim sTitle as string
dim sDescription as string
dim aKeywords() as string
dim aParaSet() as long
dim oPara as object
dim i as long

	giFooterPageID = iActPage
	WriteToStream(goExportXML, &quot;&lt;PageObject&gt;&quot;)
	sIdent = &quot;&quot;&quot;il_0_pg_&quot; &amp; CStr(giFooterPageID) &amp; &quot;&quot;&quot;&quot;
	sTitle =&quot;Footer&quot;
	sDescription = &quot;&quot;
	ExportMetadata(sIdent, sTitle, sDescription, aKeywords(), true)
	
	aParaSet() = GetParaSetPageArea(PAGE_AREA_FOOTER)		
	for i = 1 to ubound(aParaSet())
		oPara = gaDocParagraph(aParaSet(i)) 
		if oPara.State &lt;&gt; PARA_STATE_EXPORTED then
			ExportParagraph(oPara)
		end if	
	next i
	WriteToStream(goExportXML, &quot;&lt;/PageObject&gt;&quot;)
end sub


sub ExportParagraph(oPara as object)
dim iParaType as integer
dim aParaSet() as long
dim iCount as long 
dim iStartPos as long
dim iStopPos as integer
dim iLevel as integer

	iParaType = oPara.ParaType	
	select case iParaType
		case PARA_TYPE_TEXT
			ExportTextPortions(oPara)

		case PARA_TYPE_LIST
			ExportList(oPara, true)
			
		case PARA_TYPE_TABLE
			ExportTable(oPara)

		case PARA_TYPE_FRAMESTART
			ExportFrameStart(oPara)

		case PARA_TYPE_FRAMESTOP
			ExportFrameStop(oPara)

		case PARA_TYPE_FILELIST
			ExportFileList(oPara)
		
	end select
	&apos;check if there&apos;s a pagebreak after the paragraph
	&apos;if (oPara.ID &lt; ubound(gaDocParagraph())) and (oPara.BreakType = com.sun.star.style.BreakType.PAGE_AFTER) then
	&apos;	ExportPageBreak(oPara)
	&apos;end if
end Sub


sub ExportDocProperties
dim sOutlineNumbering as string
dim sValue as string

	WriteToStream(goExportXML, &quot;&lt;Properties&gt;&quot;) 

	sValue = paLayout(goDlgExport.Model.listLayout.SelectedItems(0))
	WriteToStream(goExportXML, &quot;&lt;Property Name=&quot;&quot;Layout&quot;&quot; Value=&quot;&quot;&quot; &amp; sValue &amp; &quot;&quot;&quot;/&gt;&quot;

	sValue = paPageHeader(goDlgExport.Model.listPageHeader.SelectedItems(0))
	WriteToStream(goExportXML, &quot;&lt;Property Name=&quot;&quot;PageHeader&quot;&quot; Value=&quot;&quot;&quot; &amp; sValue &amp; &quot;&quot;&quot;/&gt;&quot;
	
	sValue = paTocMode(goDlgExport.Model.listTOCMode.SelectedItems(0))
	WriteToStream(goExportXML, &quot;&lt;Property Name=&quot;&quot;TOCMode&quot;&quot; Value=&quot;&quot;&quot; &amp; sValue &amp; &quot;&quot;&quot;/&gt;&quot;
	
	sValue = paCheck(goDlgExport.Model.optChapterNumeration.State)
	WriteToStream(goExportXML, &quot;&lt;Property Name=&quot;&quot;ActiveNumbering&quot;&quot; Value=&quot;&quot;&quot; &amp; sValue &amp; &quot;&quot;&quot;/&gt;&quot;

	sValue = paCheck(goDlgExport.Model.optActiveLMMenu.State)
	WriteToStream(goExportXML, &quot;&lt;Property Name=&quot;&quot;ActiveLMMenu&quot;&quot; Value=&quot;&quot;y&quot;&quot;/&gt;&quot;
	sValue = paCheck(goDlgExport.Model.optActiveTOC.State)
	WriteToStream(goExportXML, &quot;&lt;Property Name=&quot;&quot;ActiveTOC&quot;&quot; Value=&quot;&quot;&quot; &amp; sValue &amp; &quot;&quot;&quot;/&gt;&quot;
	sValue = paCheck(goDlgExport.Model.optActivePrintView.State)
	WriteToStream(goExportXML, &quot;&lt;Property Name=&quot;&quot;ActivePrintView&quot;&quot; Value=&quot;&quot;&quot; &amp; sValue &amp; &quot;&quot;&quot;/&gt;&quot;
	sValue = paCheck(goDlgExport.Model.optCleanFrames.State)
	WriteToStream(goExportXML, &quot;&lt;Property Name=&quot;&quot;CleanFrames&quot;&quot; Value=&quot;&quot;&quot; &amp; sValue &amp; &quot;&quot;&quot;/&gt;&quot;
	sValue = paCheck(goDlgExport.Model.optPublicNotes.State)
	WriteToStream(goExportXML, &quot;&lt;Property Name=&quot;&quot;PublicNotes&quot;&quot; Value=&quot;&quot;&quot; &amp; sValue &amp; &quot;&quot;&quot;/&gt;&quot;
	sValue = paCheck(goDlgExport.Model.optHistoryUserComments.State)
	WriteToStream(goExportXML, &quot;&lt;Property Name=&quot;&quot;HistoryUserComments&quot;&quot; Value=&quot;&quot;&quot; &amp; sValue &amp; &quot;&quot;&quot;/&gt;&quot;
	if gbOptIncludeHeader then
		sValue = &quot;il_0_pg_&quot; &amp; CStr(giHeaderPageID)
		WriteToStream(goExportXML, &quot;&lt;Property Name=&quot;&quot;HeaderPage&quot;&quot; Value=&quot;&quot;&quot; &amp; sValue &amp; &quot;&quot;&quot;/&gt;&quot;
	end if	
	if gbOptIncludeFooter then
		sValue = &quot;il_0_pg_&quot; &amp; CStr(giFooterPageID)
		WriteToStream(goExportXML, &quot;&lt;Property Name=&quot;&quot;FooterPage&quot;&quot; Value=&quot;&quot;&quot; &amp; sValue &amp; &quot;&quot;&quot;/&gt;&quot;
	end if	
	WriteToStream(goExportXML, &quot;&lt;/Properties&gt;&quot;) 
end sub


function GetIliasMetaData() as object
dim oMetadata as object

	oMetadata = createObject(&quot;Metadata&quot;)
	with oMetadata
		.docTitle = goDlgExport.Model.txtMetaTitle.Text
		.docDescription = goDlgExport.Model.txtMetaDescription.Text
		.docLanguage = goDlgExport.Model.cmbMetaLanguage.Text
		.docKeywords = goDlgExport.Model.txtMetaKeywords.Text
		.docAuthors = goDlgExport.Model.txtMetaAuthor.Text
		.docCopyright = goDlgExport.Model.txtMetaCopyright.Text
	end with
	GetIliasMetaData = oMetadata
end Function


sub WriteToStream(pStream as object, pString as string)
  pStream.writeString(pString)
end sub  



</script:module>