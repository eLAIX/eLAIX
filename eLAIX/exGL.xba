<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="exGL" script:language="StarBasic">&apos;****************************************************************************
&apos; eLAIX   : Writing ILIAS learning modules offline with OpenOffice.org Writer
&apos; Author  : Harry Boldt - h.boldt@boldt-media.de - http://elaix.org
&apos; License : GPL
&apos;****************************************************************************

&apos; This module is part of eLAIX. You can redistribute it and/or
&apos; modify it under the terms of the GNU Lesser General Public
&apos; License as published by the Free Software Foundation, either
&apos; version 3 of the License, or (at your option) any later version.
&apos; 
&apos; This program is distributed in the hope that it will be useful,
&apos; but WITHOUT ANY WARRANTY; without even the implied warranty of
&apos; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
&apos; Lesser General Public License for more details.
&apos; 
&apos; You should have received a copy of the GNU Lesser General Public
&apos; License along with this program. If not, please visit the Free
&apos; Software Foundation website at http://www.gnu.org/licenses/.


Option Explicit

private const cInstallationId = &quot;0&quot;
private const cInstallationUrl = &quot;&quot;
private const cSchemaVersionFile = &quot;4.1.0&quot;
private const cSchemaVersionGlossary = &quot;5.1.0&quot;
private const cSchemaVersionPage = &quot;4.2.0&quot;
private const cSchemaVersionMetadata = &quot;4.1.0&quot;
private const cSchemaVersionMedia = &quot;5.1.0&quot;
private const cSchemaVersionStyle = &quot;5.1.0&quot;
private const cTargetRelease = &quot;5.1.0&quot;
private const cxmlns_xsi = &quot;http://www.w3.org/2001/XMLSchema-instance&quot;
private const cxmlns_exp = &quot;http://www.ilias.de/Services/Export/exp/4_1&quot;
private const cxsi_schemaLocationFile = &quot;http://www.ilias.de/Services/Export/exp/4_1 http://ilias.de/test51/xml/ilias_export_4_1.xsd http://www.ilias.de/Modules/File/file/4_1 http://ilias.de/test51/xml/ilias_file_4_1.xsd&quot;
private const cxsi_schemaLocationGlossary = &quot;http://www.ilias.de/Services/Export/exp/4_1 http://ilias.de/test51/xml/ilias_export_4_1.xsd http://www.ilias.de/Modules/Glossary/htlm/4_1 http://ilias.de/test51/xml/ilias_glo_5_1.xsd http://www.ilias.de/Services/DataSet/ds/4_3 http://ilias.de/test51/xml/ilias_ds_4_3.xsd&quot;
private const cxsi_schemaLocationPage = &quot;http://www.ilias.de/Services/Export/exp/4_1 http://ilias.de/test51/xml/ilias_export_4_1.xsd http://www.ilias.de/Services/COPage/pg/4_2 http://ilias.de/test51/xml/ilias_pg_4_2.xsd&quot;
private const cxsi_schemaLocationMetaData = &quot;http://www.ilias.de/Services/Export/exp/4_1 http://ilias.de/test51/xml/ilias_export_4_1.xsd http://www.ilias.de/Services/MetaData/md/4_1 http://ilias.de/test51/xml/ilias_md_4_1.xsd&quot;
private const cxsi_schemaLocationMedia = &quot;http://www.ilias.de/Services/Export/exp/4_1 http://ilias.de/test51/xml/ilias_export_4_1.xsd http://www.ilias.de/Services/MediaObjects/mob/5_1 http://ilias.de/test51/xml/ilias_mob_5_1.xsd http://www.ilias.de/Services/DataSet/ds/4_3 http://ilias.de/test51/xml/ilias_ds_4_3.xsd&quot;
private const cxsi_schemaLocationStyle = &quot;http://www.ilias.de/Services/Export/exp/4_1 http://localhost/ilias-518/xml/ilias_export_4_1.xsd http://www.ilias.de/Services/Style/5_1 http://localhost/ilias-518/xml/ilias_style_5_1.xsd http://www.ilias.de/Services/DataSet/ds/4_3 http://ilias.de/test51/xml/ilias_ds_4_3.xsd&quot;
private const cxmlnsFile = &quot;http://www.ilias.de/Modules/File/file/4_1&quot;
private const cxmlnsGlossary = &quot;http://www.ilias.de/Modules/Glossary/htlm/4_1&quot;
private const cxmlnsPage = &quot;http://www.ilias.de/Services/COPage/pg/4_2&quot;
private const cxmlns_ds = &quot;http://www.ilias.de/Services/DataSet/ds/4_3&quot;
private const cxmlnsMetaData = &quot;http://www.ilias.de/Services/MetaData/md/4_1&quot;
private const cxmlnsMedia = &quot;http://www.ilias.de/Services/MediaObjects/mob/5_1&quot;
private const cxmlnsStyle = &quot;http://www.ilias.de/Services/Style/5_1&quot;

private const cgloID = 1
private const cFactor = 25

private psFrameCaption as string
private piBacksteps as integer
private paContentMode(2)
private paPresentationMode(1)

Type MetadataGlossary
	docTitle as string
	docDescription as string
	docLanguage as string
	docKeywords as string
	docAuthors as string
	docCopyright as string
End Type


sub SetGlossaryPropArrays &apos;after export filename has been set
	&apos;set content mode properties
	paContentMode(0) = &quot;none&quot;
	paContentMode(1) = &quot;level&quot;
	paContentMode(2) = &quot;subtree&quot;	
	&apos;set presentation mode properies
	paPresentationMode(0) = &quot;table&quot;
	paPresentationMode(1) = &quot;full_def&quot;
end sub



sub SetGlossaryPathGlobals(sFileName as string) &apos;after export filename has been set
dim sFile as string
dim sFolder as string
dim sZipFolder as string
dim sTempFolder as string
dim oSFA As Object &apos; SimpleFileAccess object

  gsExportZIP = sFilename
  sFile       = FilenameOutOfPath(gsExportZIP, gsPathSeparator) &apos;the single filename of the zip file
  sFolder     = GetFilenameWithoutExtension(sFile) &apos;the single foldername of the zip file
  sTempFolder = GetRandomString(&quot;tmp-&quot;,12)
  
  gsExportZipDir        = gsCurDir &amp; gsPathSeparator &amp; sTempFolder 
  gsExportBaseDir       = gsExportZipDir &amp; gsPathSeparator &amp; sFolder
  gsExportFileDir       = gsExportBaseDir &amp; &quot;/Modules/File/set_1&quot;
  gsExportXmlDir        = gsExportBaseDir &amp; &quot;/Modules/Glossary/set_1&quot;
  gsExportPageDir       = gsExportBaseDir &amp; &quot;/Services/COPage/set_1&quot;
  gsExportMediaDir      = gsExportBaseDir &amp; &quot;/Services/MediaObjects/set_1&quot;
  gsExportMetaDir1      = gsExportBaseDir &amp; &quot;/Services/MetaData/set_1&quot;
  gsExportMetaDir2      = gsExportBaseDir &amp; &quot;/Services/MetaData/set_2&quot;
  gsExportMetaDir3      = gsExportBaseDir &amp; &quot;/Services/MetaData/set_3&quot;
  gsExportStyleDir      = gsExportBaseDir &amp; &quot;/Services/Style/set_1&quot;
  gsExportStyleImageDir = gsExportBaseDir &amp; &quot;/Services/Style/set_1/expDir_1/dsDir_1&quot;

end Sub


sub CreateGlossaryFolderStructure &apos;creates the defaut folder structure for a glossary
  ChDir(gsExportXmlDir)
  If Dir(gsExportZipDir,16)&lt;&gt; &quot;&quot; then &apos; Delete existing folder
    oSFA = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
    oSFA.setReadOnly(gsExportZipDir, false) &apos; gsExportZipDir is then not readonly
    RmDir(gsExportZipDir)
  end if
  MkDir(gsExportZipDir)
  MkDir(gsExportFileDir)
  MkDir(gsExportXmlDir)
  MkDir(gsExportPageDir)
  MkDir(gsExportMediaDir)
  MkDir(gsExportMetaDir1)
  MkDir(gsExportMetaDir2)
  MkDir(gsExportMetaDir3)
  MkDir(gsExportStyleDir)
  MkDir(gsExportStyleImageDir)
End Sub


Sub ExportToGlossary
	gsExportType = &quot;GL&quot;
	SetGlossaryPropArrays
	ExportGlossaryManifest &apos;writes the manifest.xml into the root folder
    ExportGlossaryMediaObjects  
    ExportGlossaryFile
    ExportGlossaryItems
    ExportGlossaryCOPage
    ExportGlossaryMetaData
	ExportGlossaryStyles
End Sub


Sub ExportGlossaryManifest
Dim oStream As Object
Dim sTitle As String 

    sTitle = ReplaceSymbolsMetadata(goDlgExport.Model.txtMetaTitle.Text)
    if sTitle = &quot;&quot; then sTitle = &quot;Unknown Title&quot;
	
	oStream = GetExportFileObject(gsExportBaseDir &amp; &quot;/manifest.xml&quot;)
	goExportXML = oStream
	
	oStream.writeString(gsHead)
	oStream.writeString(&quot;&lt;Manifest MainEntity=&quot;&quot;glo&quot;&quot; Title=&quot;&quot;&quot; &amp; sTitle &amp; &quot;&quot;&quot; TargetRelease=&quot;&quot;5.1.0&quot;&quot; InstallationId=&quot;&quot;0&quot;&quot; InstallationUrl=&quot;&quot;&quot;&quot;&gt;&quot;)
	oStream.writeString(&quot;&lt;ExportFile Component=&quot;&quot;Modules/Glossary&quot;&quot; Path=&quot;&quot;Modules/Glossary/set_1/export.xml&quot;&quot;/&gt;&quot;)
	oStream.writeString(&quot;&lt;ExportFile Component=&quot;&quot;Services/MediaObjects&quot;&quot; Path=&quot;&quot;Services/MediaObjects/set_1/export.xml&quot;&quot;/&gt;&quot;)
	oStream.writeString(&quot;&lt;ExportFile Component=&quot;&quot;Services/MetaData&quot;&quot; Path=&quot;&quot;Services/MetaData/set_1/export.xml&quot;&quot;/&gt;&quot;)
	oStream.writeString(&quot;&lt;ExportFile Component=&quot;&quot;Modules/File&quot;&quot; Path=&quot;&quot;Modules/File/set_1/export.xml&quot;&quot;/&gt;&quot;)
	oStream.writeString(&quot;&lt;ExportFile Component=&quot;&quot;Services/MetaData&quot;&quot; Path=&quot;&quot;Services/MetaData/set_2/export.xml&quot;&quot;/&gt;&quot;)
	oStream.writeString(&quot;&lt;ExportFile Component=&quot;&quot;Services/COPage&quot;&quot; Path=&quot;&quot;Services/COPage/set_1/export.xml&quot;&quot;/&gt;&quot;)
	oStream.writeString(&quot;&lt;ExportFile Component=&quot;&quot;Services/MetaData&quot;&quot; Path=&quot;&quot;Services/MetaData/set_3/export.xml&quot;&quot;/&gt;&quot;)
	oStream.writeString(&quot;&lt;ExportFile Component=&quot;&quot;Services/Style&quot;&quot; Path=&quot;&quot;Services/Style/set_1/export.xml&quot;&quot;/&gt;&quot;)
	oStream.writeString(&quot;&lt;/Manifest&gt;&quot;)
	oStream.closeOutput 
End Sub


sub ExportGlossaryMediaObjects
dim oMetadata as object
dim oStream as object
dim sFileName as string
dim sDescription as string
dim sAlign as string
dim aKeywords()
dim aAuthors()
dim sKeyword as string
dim sAuthor as string
dim i as integer
dim iExportId as integer
dim iCount as integer
dim iWidth as single  
dim iHeight as single 
dim oExtMediaRec as object
dim oDocMediaRec as object
const cMediaFolder = &quot;Services/MediaObjects/set_1/expDir_&quot;

	oStream = GetExportFileObject(gsExportMediaDir &amp; gsPathSeparator &amp; XML_FILENAME)

	oStream.writeString(gsHead)
	oStream.writeString(&quot;&lt;exp:Export&quot;)	
	oStream.writeString(&quot; InstallationId=&quot;&quot;&quot; &amp; cInstallationId &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; InstallationURL=&quot;&quot;&quot; &amp; cInstallationUrl &amp; &quot;&quot;&quot;&quot;) 
	oStream.writeString(&quot; Entity=&quot;&quot;md&quot;&quot;&quot;)
	oStream.writeString(&quot; SchemaVersion=&quot;&quot;&quot; &amp; cSchemaVersionMedia &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; TargetRelease=&quot;&quot;&quot; &amp; cTargetRelease &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:xsi=&quot;&quot;&quot; &amp; cxmlns_xsi &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:exp=&quot;&quot;&quot; &amp; cxmlns_exp &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xsi:schemaLocation=&quot;&quot;&quot; &amp; cxsi_schemaLocationMedia &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns=&quot;&quot;&quot; &amp; cxmlnsMedia &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:ds=&quot;&quot;&quot; &amp; cxmlns_ds &amp; &quot;&quot;&quot;&gt;&quot;)

	
	&apos;first generate the records of type &quot;mob&quot; (in gaExtMedia)
	iExportId = 0
	iCount = ubound(gaExtMedia())
	if iCount &gt; 0 then
		for i = 1 to iCount
			iExportId = iExportId + 1
			oExtMediaRec = gaExtMedia(i)
			sFileName = FileNameOutOfPath(oExtMediaRec.FileName) &apos;separate the filename
			sDescription = oExtMediaRec.MediaTypeText
			oStream.writeString(&quot;&lt;exp:ExportItem Id=&quot;&quot;&quot; &amp; iExportId &amp; &quot;&quot;&quot;&gt;&quot;)
			oStream.writeString(&quot;&lt;ds:DataSet InstallationId=&quot;&quot;&quot; &amp; cInstallationId &amp; &quot;&quot;&quot;&quot; &amp; &quot; InstallationURL=&quot;&quot;&quot;&quot; TopEntity=&quot;&quot;mob&quot;&quot;&gt;&quot;)
			oStream.writeString(&quot;&lt;ds:Rec Entity=&quot;&quot;mob&quot;&quot;&gt;&quot;)
			oStream.writeString(&quot;&lt;Mob&gt;&quot;)
			oStream.writeString(&quot;&lt;Id&gt;&quot; &amp; i &amp; &quot;&lt;/Id&gt;&quot;)
			oStream.writeString(&quot;&lt;Title&gt;&quot; &amp; sFileName &amp; &quot;&lt;/Title&gt;&quot;)
			oStream.writeString(&quot;&lt;Description&gt;&quot; &amp; sDescription &amp; &quot;&lt;/Description&gt;&quot;)
			oStream.writeString(&quot;&lt;ImportId&gt;il_&quot; &amp; cInstallationId &amp; &quot;_mob_&quot; &amp; i &amp; &quot;&lt;/ImportId&gt;&quot;)
			oStream.writeString(&quot;&lt;Dir&gt;&quot; &amp; cMediaFolder &amp; oExtMediaRec.ID &amp; &quot;/dsDir_&quot; &amp; oExtMediaRec.ID &amp; &quot;&lt;/Dir&gt;&quot;)
			oStream.writeString(&quot;&lt;/Mob&gt;&quot;)
			oStream.writeString(&quot;&lt;/ds:Rec&gt;&quot;)
			oStream.writeString(&quot;&lt;/ds:DataSet&gt;&quot;)
			oStream.writeString(&quot;&lt;/exp:ExportItem&gt;&quot;)
		next i
	end if

	&apos;then generate the records of type &quot;mob_media_item&quot; (in gaDocMedia)
	iCount = ubound(gaDocMedia())
	if iCount &gt; 0 then
		for i = 1 to iCount
			iExportId = iExportId + 1
			oDocMediaRec = gaDocMedia(i)
			oExtMediaRec = gaExtMedia(oDocMediaRec.ExtMediaID)
			sFileName = FileNameOutOfPath(oExtMediaRec.FileName) &apos;separate the filename
			sAlign = GetIliasAlignString(oDocMediaRec, true)
			oStream.writeString(&quot;&lt;exp:ExportItem Id=&quot;&quot;&quot; &amp; iExportId &amp; &quot;&quot;&quot;&gt;&quot;)
			oStream.writeString(&quot;&lt;ds:DataSet InstallationId=&quot;&quot;&quot; &amp; cInstallationId &amp; &quot;&quot;&quot;&quot; &amp; &quot; InstallationURL=&quot;&quot;&quot;&quot; TopEntity=&quot;&quot;mob&quot;&quot;&gt;&quot;)
			oStream.writeString(&quot;&lt;ds:Rec Entity=&quot;&quot;mob_media_item&quot;&quot;&gt;&quot;)
			oStream.writeString(&quot;&lt;MobMediaItem&gt;&quot;)
			oStream.writeString(&quot;&lt;Id&gt;&quot; &amp; i &amp; &quot;&lt;/Id&gt;&quot;)
			oStream.writeString(&quot;&lt;MobId&gt;&quot; &amp; oDocMediaRec.ExtMediaID &amp; &quot;&lt;/MobId&gt;&quot;)
			iWidth = Int(gaDocMedia(i).Width) / cFactor
			iHeight = Int(gaDocMedia(i).Height) / cFactor
			oStream.writeString(&quot;&lt;Width&gt;&quot; &amp; Int(iWidth) &amp; &quot;&lt;/Width&gt;&quot;)
			oStream.writeString(&quot;&lt;Height&gt;&quot; &amp; Int(iHeight) &amp; &quot;&lt;/Height&gt;&quot;)
			oStream.writeString(&quot;&lt;Halign&gt;&quot; &amp; sAlign &amp; &quot;&lt;/Halign&gt;&quot;)
			if gaDocMedia(i).Caption &lt;&gt; &quot;&quot; then
				oStream.writeString(&quot;&lt;Caption&gt;&quot; &amp; oDocMediaRec.Caption &amp; &quot;&lt;/Caption&gt;&quot;)
			end if	
			oStream.writeString(&quot;&lt;Nr&gt;1&lt;/Nr&gt;&quot;)
			oStream.writeString(&quot;&lt;Purpose&gt;Standard&lt;/Purpose&gt;&quot;)
			oStream.writeString(&quot;&lt;Location&gt;&quot; &amp; sFileName &amp; &quot;&lt;/Location&gt;&quot;)
			oStream.writeString(&quot;&lt;LocationType&gt;LocalFile&lt;/LocationType&gt;&quot;)
			oStream.writeString(&quot;&lt;Format&gt;&quot; &amp; oExtMediaRec.MediaTypeText &amp; &quot;&lt;/Format&gt;&quot;)
			oStream.writeString(&quot;&lt;TextRepresentation/&gt;&quot;)
			oStream.writeString(&quot;&lt;/MobMediaItem&gt;&quot;)
			oStream.writeString(&quot;&lt;/ds:Rec&gt;&quot;)
			oStream.writeString(&quot;&lt;/ds:DataSet&gt;&quot;)
			oStream.writeString(&quot;&lt;/exp:ExportItem&gt;&quot;)
		next i
	end if
	oStream.writeString(&quot;&lt;/exp:Export&gt;&quot;)
	oStream.closeOutput
end sub    


sub ExportGlossaryFile
dim oStream As Object
	
	oStream = GetExportFileObject(gsExportFileDir &amp; gsPathSeparator &amp; XML_FILENAME)
	goExportXML = oStream

	oStream.writeString(gsHead)
	oStream.writeString(&quot;&lt;exp:Export&quot;)	
	oStream.writeString(&quot; InstallationId=&quot;&quot;&quot; &amp; cInstallationId &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; InstallationURL=&quot;&quot;&quot; &amp; cInstallationUrl &amp; &quot;&quot;&quot;&quot;) 
	oStream.writeString(&quot; Entity=&quot;&quot;file&quot;&quot;&quot;)
	oStream.writeString(&quot; SchemaVersion=&quot;&quot;&quot; &amp; cSchemaVersionFile &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; TargetRelease=&quot;&quot;&quot; &amp; cTargetRelease &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:xsi=&quot;&quot;&quot; &amp; cxmlns_xsi &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:exp=&quot;&quot;&quot; &amp; cxmlns_exp &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xsi:schemaLocation=&quot;&quot;&quot; &amp; cxsi_schemaLocationFile &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns=&quot;&quot;&quot; &amp; cxmlnsFile &amp; &quot;&quot;&quot;&gt;&quot;)
	oStream.writeString(&quot;&lt;/exp:Export&gt;&quot;)
	oStream.closeOutput
End Sub


sub ExportGlossaryItems
dim iChapter as long
dim oChapter as object
dim sTitle as String
Dim sItem As string
dim sDescription as string
dim aKeywords() as string
dim aParaSet() as long
dim oPara as object
dim iParaCount as long
dim i as integer
dim iDefinitions as long
dim iDefNr as integer
dim sCharacteristic as string
dim iActPageID as long
dim oStream as object
dim sString as string
dim iTermID as integer
dim sValue as string
dim iSnippetLength as integer

	oStream = GetExportFileObject(gsExportXmlDir &amp; gsPathSeparator &amp; XML_FILENAME)
	goExportXML = oStream
	
	oStream.writeString(gsHead)
	oStream.writeString(&quot;&lt;exp:Export&quot;)	
	oStream.writeString(&quot; InstallationId=&quot;&quot;&quot; &amp; cInstallationId &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; InstallationURL=&quot;&quot;&quot; &amp; cInstallationUrl &amp; &quot;&quot;&quot;&quot;) 
	oStream.writeString(&quot; Entity=&quot;&quot;glo&quot;&quot;&quot;)
	oStream.writeString(&quot; SchemaVersion=&quot;&quot;&quot; &amp; cSchemaVersionGlossary &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; TargetRelease=&quot;&quot;&quot; &amp; cTargetRelease &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:xsi=&quot;&quot;&quot; &amp; cxmlns_xsi &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:exp=&quot;&quot;&quot; &amp; cxmlns_exp &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xsi:schemaLocation=&quot;&quot;&quot; &amp; cxsi_schemaLocationGlossary &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns=&quot;&quot;&quot; &amp; cxmlnsGlossary &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:ds=&quot;&quot;&quot; &amp; cxmlns_ds &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot;&gt;&quot;)

	
	oStream.writeString(&quot;&lt;exp:ExportItem Id=&quot;&quot;1&quot;&quot;&gt;&quot;)
	oStream.writeString(&quot;&lt;ds:DataSet InstallationId=&quot;&quot;&quot; &amp; cInstallationId &amp; &quot;&quot;&quot;&quot; &amp; &quot; InstallationURL=&quot;&quot;&quot;&quot; TopEntity=&quot;&quot;glo&quot;&quot;&gt;&quot;)

	sTitle =  goDlgExport.Model.txtMetaTitle.Text
	sDescription = goDlgExport.Model.txtMetaDescription.Text
	oStream.writeString(&quot;&lt;ds:Rec Entity=&quot;&quot;glo&quot;&quot;&gt;&quot;)
	oStream.writeString(&quot;&lt;Glo&gt;&quot;)
	oStream.writeString(&quot;&lt;Title&gt;&quot; &amp; sTitle &amp; &quot;&lt;/Title&gt;&quot;)
	oStream.writeString(&quot;&lt;Description&gt;&quot; &amp; sDescription &amp; &quot;&lt;/Description&gt;&quot;)
	oStream.writeString(&quot;&lt;Id&gt;&quot; &amp; cgloID &amp; &quot;&lt;/Id&gt;&quot;)

	sValue = paContentMode(goDlgExport.Model.listGlossaryContentMode.SelectedItems(0))
	oStream.writeString(&quot;&lt;Virtual&gt;&quot; &amp; sValue &amp; &quot;&lt;/Virtual&gt;&quot;)

	sValue = paPresentationMode(goDlgExport.Model.listGlossaryPresentationMode.SelectedItems(0))
	oStream.writeString(&quot;&lt;PresMode&gt;&quot; &amp; sValue &amp; &quot;&lt;/PresMode&gt;&quot;)

	sValue = goDlgExport.Model.txtGlossarySnippetLength.Text
	iSnippetLength = Int(sValue)
	oStream.writeString(&quot;&lt;SnippetLength&gt;&quot; &amp; sValue &amp; &quot;&lt;/SnippetLength&gt;&quot;)

	oStream.writeString(&quot;&lt;ShowTax&gt;0&lt;/ShowTax&gt;&quot;)
	oStream.writeString(&quot;&lt;GloMenuActive&gt;y&lt;/GloMenuActive&gt;&quot;)
	oStream.writeString(&quot;&lt;/Glo&gt;&quot;)
	oStream.writeString(&quot;&lt;/ds:Rec&gt;&quot;)

	iDefinitions = 0
	iDefNr= 1
	iTermID = 0
	for iChapter = 1 to ubound(gaDocChapter())
	
		oChapter = gaDocChapter(iChapter)

		&apos;write a new term if the chapter has Level 1  
		if oChapter.Level = 1 then
			iTermID = iTermID + 1
			iDefNr= 0
			oStream.writeString(&quot;&lt;ds:Rec Entity=&quot;&quot;glo_term&quot;&quot;&gt;&quot;)
			oStream.writeString(&quot;&lt;GloTerm&gt;&quot;)		
			oStream.writeString(&quot;&lt;Id&gt;&quot; &amp; iTermID &amp; &quot;&lt;/Id&gt;&quot;)  
			oStream.writeString(&quot;&lt;GloId&gt;&quot; &amp; cgloID &amp; &quot;&lt;/GloId&gt;&quot;)
			oStream.writeString(&quot;&lt;Term&gt;&quot; &amp; oChapter.GetString &amp; &quot;&lt;/Term&gt;&quot;)
			oStream.writeString(&quot;&lt;Language&gt;&quot; &amp; gsLang &amp; &quot;&lt;/Language&gt;&quot;)						
			oStream.writeString(&quot;&lt;/GloTerm&gt;&quot;)
			oStream.writeString(&quot;&lt;/ds:Rec&gt;&quot;)
			goDlgExport.Model.lblCountWrite.Label = iChapter
		end if
			
		&apos;write a definition if the chapter has content
		if oChapter.HasContent then
			iDefNr = iDefNr + 1
			&apos;select all paragraphs of this chapter and export them
			iDefinitions = iDefinitions + 1
			oStream.writeString(&quot;&lt;ds:Rec Entity=&quot;&quot;glo_definition&quot;&quot;&gt;&quot;)
			oStream.writeString(&quot;&lt;GloDefinition&gt;&quot;)
			
			oStream.writeString(&quot;&lt;Id&gt;&quot; &amp; iDefinitions &amp; &quot;&lt;/Id&gt;&quot;)
			oStream.writeString(&quot;&lt;TermId&gt;&quot; &amp; iTermID &amp; &quot;&lt;/TermId&gt;&quot;) &apos;related to the term ID
			
			&apos;write the short text
			oStream.writeString(&quot;&lt;ShortText&gt;&quot;)
			&apos;get the paragraphs of this chapter
			aParaSet() = GetParaSetOfChapter(oChapter.ID)	
			iParaCount = ubound(aParaSet())	
			sString = &quot;&quot;			
			&apos;walk through all paragraphs of the current chapter (in RAM database)
			sString = &quot;&quot;
			for i = 1 to iParaCount
				oPara = gaDocParagraph(aParaSet(i))
				&apos; concatenate all text portions of the current paagraph to get full text
				sString = sString &amp; GetTextPortionStringByParaID(oPara.ID)
			next i
			&apos;shorten the text to the snippet length (export dialog)
			if iSnippetLength &gt; 0 then
				sString = Left(sString, iSnippetLength)
			end if 
			oStream.writeString(sString)
			oStream.writeString(&quot;&lt;/ShortText&gt;&quot;)

			oStream.writeString(&quot;&lt;Nr&gt;&quot; &amp; iDefNr &amp; &quot;&lt;/Nr&gt;&quot;)
			oStream.writeString(&quot;&lt;ShortTextDirty&gt;0&lt;/ShortTextDirty&gt;&quot;)			
			oStream.writeString(&quot;&lt;/GloDefinition&gt;&quot;)
			oStream.writeString(&quot;&lt;/ds:Rec&gt;&quot;)		
		end if		

	next iChapter	
	oStream.writeString(&quot;&lt;/ds:DataSet&gt;&quot;)
	oStream.writeString(&quot;&lt;/exp:ExportItem&gt;&quot;)
	oStream.writeString(&quot;&lt;/exp:Export&gt;&quot;)
	oStream.closeOutput	
end sub	


sub ExportGlossaryCOPage
dim iChapter as long
dim oChapter as object
dim aParaSet() as long
dim oPara as object
dim iParaCount as long
dim i as integer
dim oStream as object
dim iDefinitionID as integer

	oStream = GetExportFileObject(gsExportPageDir &amp; gsPathSeparator &amp; XML_FILENAME)
	goExportXML = oStream
	
	oStream.writeString(gsHead)
	oStream.writeString(&quot;&lt;exp:Export&quot;)	
	oStream.writeString(&quot; InstallationId=&quot;&quot;&quot; &amp; cInstallationId &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; InstallationURL=&quot;&quot;&quot; &amp; cInstallationUrl &amp; &quot;&quot;&quot;&quot;) 
	oStream.writeString(&quot; Entity=&quot;&quot;pg&quot;&quot;&quot;)
	oStream.writeString(&quot; SchemaVersion=&quot;&quot;&quot; &amp; cSchemaVersionPage &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; TargetRelease=&quot;&quot;&quot; &amp; cTargetRelease &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:xsi=&quot;&quot;&quot; &amp; cxmlns_xsi &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:exp=&quot;&quot;&quot; &amp; cxmlns_exp &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xsi:schemaLocation=&quot;&quot;&quot; &amp; cxsi_schemaLocationPage &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns=&quot;&quot;&quot; &amp; cxmlnsPage &amp; &quot;&quot;&quot;&gt;&quot;)
	
	iDefinitionID = 0
	for iChapter = 1 to ubound(gaDocChapter())
	
		oChapter = gaDocChapter(iChapter)

		&apos;generate a new page object if this chapter is the first or follows solo-headline 
		if oChapter.HasContent then
			
			iDefinitionId = iDefinitionID + 1
			oStream.writeString(&quot;&lt;exp:ExportItem Id=&quot;&quot;gdf:&quot; &amp; iDefinitionId &amp; &quot;&quot;&quot;&gt;&quot;
			oStream.writeString(&quot;&lt;PageObject Language=&quot;&quot;-&quot;&quot; Active=&quot;&quot;1&quot;&quot; ActivationStart=&quot;&quot;&quot;&quot; ActivationEnd=&quot;&quot;&quot;&quot; ShowActivationInfo=&quot;&quot;0&quot;&quot;&gt;&quot;)
			&apos;get the paragraphs of this chapter
			aParaSet() = GetParaSetOfChapter(oChapter.ID)	
			iParaCount = ubound(aParaSet())	
			for i = 1 to iParaCount
				oPara = gaDocParagraph(aParaSet(i))
				if oPara.State &lt;&gt; PARA_STATE_EXPORTED then
					ExportParagraph(oPara)
				end if	
			next i
			oStream.writeString(&quot;&lt;/PageObject&gt;&quot;)
			oStream.writeString(&quot;&lt;/exp:ExportItem&gt;&quot;)
			
			&apos;goDlgExport.Model.lblCountWrite.Label = iChapter
		end if		

	next iChapter	
	oStream.writeString(&quot;&lt;/exp:Export&gt;&quot;)
	oStream.closeOutput	
End Sub


sub ExportGlossaryMetaData
dim oMetadata as object
dim oStream as object
dim sTitle as string
dim sDescription as string
dim aKeywords()
dim aAuthors()
dim sKeyword as string
dim sAuthor as string
dim i as integer
dim iCount as integer
dim oChapter as object
dim iDefinitions as integer

	&apos;1. export MedaObject metadata
	oStream = GetExportFileObject(gsExportMetaDir1 &amp; gsPathSeparator &amp; XML_FILENAME)

	oStream.writeString(gsHead)
	oStream.writeString(&quot;&lt;exp:Export&quot;)	
	oStream.writeString(&quot; InstallationId=&quot;&quot;&quot; &amp; cInstallationId &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; InstallationURL=&quot;&quot;&quot; &amp; cInstallationUrl &amp; &quot;&quot;&quot;&quot;) 
	oStream.writeString(&quot; Entity=&quot;&quot;md&quot;&quot;&quot;)
	oStream.writeString(&quot; SchemaVersion=&quot;&quot;&quot; &amp; cSchemaVersionMetadata &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; TargetRelease=&quot;&quot;&quot; &amp; cTargetRelease &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:xsi=&quot;&quot;&quot; &amp; cxmlns_xsi &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:exp=&quot;&quot;&quot; &amp; cxmlns_exp &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xsi:schemaLocation=&quot;&quot;&quot; &amp; cxsi_schemaLocationMetadata &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns=&quot;&quot;&quot; &amp; cxmlnsMetadata &amp; &quot;&quot;&quot;&gt;&quot;)
	
	iCount = ubound(gaExtMedia())
	if iCount &gt; 0 then
		for i = 1 to iCount
			sTitle = FileNameOutOfPath(gaExtMedia(i).FileName)
			sDescription = gaExtMedia(i).MediaTypeText
			oStream.writeString(&quot;&lt;exp:ExportItem Id=&quot;&quot;0:&quot; &amp; i &amp; &quot;:mob&quot;&quot;&gt;&quot;)
			oStream.writeString(&quot;&lt;MetaData&gt;&quot;)
			oStream.writeString(&quot;&lt;General Structure=&quot;&quot;Hierarchical&quot;&quot;&gt;&quot;)
			oStream.writeString(&quot;&lt;Identifier Catalog=&quot;&quot;ILIAS&quot;&quot; Entry=&quot;&quot;il_&quot; &amp; cInstallationId &amp; &quot;_mob_&quot; &amp; i &amp; &quot;&quot;&quot;/&gt;&quot;)
			oStream.writeString(&quot;&lt;Title Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&gt;&quot; &amp; sTitle &amp; &quot;&lt;/Title&gt;&quot;)
			oStream.writeString(&quot;&lt;Language Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;/&gt;&quot;)
			oStream.writeString(&quot;&lt;Description Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&gt;&quot; &amp; sDescription &amp; &quot;&lt;/Description&gt;&quot;)
			oStream.writeString(&quot;&lt;Keyword Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;/&gt;&quot;)
			oStream.writeString(&quot;&lt;/General&gt;&quot;)
			oStream.writeString(&quot;&lt;/MetaData&gt;&quot;)
			oStream.writeString(&quot;&lt;/exp:ExportItem&gt;&quot;)
		next i
	end if
	oStream.writeString(&quot;&lt;/exp:Export&gt;&quot;)
	oStream.closeOutput

	&apos;2. export general metadata
	oStream = GetExportFileObject(gsExportMetaDir2 &amp; gsPathSeparator &amp; XML_FILENAME)

	oStream.writeString(gsHead)
	oStream.writeString(&quot;&lt;exp:Export&quot;)	
	oStream.writeString(&quot; InstallationId=&quot;&quot;&quot; &amp; cInstallationId &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; InstallationURL=&quot;&quot;&quot; &amp; cInstallationUrl &amp; &quot;&quot;&quot;&quot;) 
	oStream.writeString(&quot; Entity=&quot;&quot;md&quot;&quot;&quot;)
	oStream.writeString(&quot; SchemaVersion=&quot;&quot;&quot; &amp; cSchemaVersionMetadata &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; TargetRelease=&quot;&quot;&quot; &amp; cTargetRelease &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:xsi=&quot;&quot;&quot; &amp; cxmlns_xsi &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:exp=&quot;&quot;&quot; &amp; cxmlns_exp &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xsi:schemaLocation=&quot;&quot;&quot; &amp; cxsi_schemaLocationMetadata &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns=&quot;&quot;&quot; &amp; cxmlnsMetadata &amp; &quot;&quot;&quot;&gt;&quot;)
	oStream.writeString(&quot;&lt;/exp:Export&gt;&quot;)
	oStream.closeOutput

	&apos;3. export glossary metadata
	oMetadata = GetGlossaryMetadata()
    sTitle = ReplaceSymbolsMetadata(oMetadata.docTitle)
    sDescription = ReplaceSymbolsMetadata(oMetadata.docDescription)
    aKeywords = ArrayOutOfString(ReplaceSymbolsMetadata(oMetadata.docKeywords), &quot;,&quot;)
    gsLang = GetLanguageCode(oMetadata.docLanguage)
    aAuthors = ArrayOutOfString(ReplaceSymbolsMetadata(oMetadata.docAuthors), &quot;,&quot;)

	oStream = GetExportFileObject(gsExportMetaDir3 &amp; gsPathSeparator &amp; XML_FILENAME)
	goExportXML = oStream

	oStream.writeString(gsHead)
	oStream.writeString(&quot;&lt;exp:Export&quot;)	
	oStream.writeString(&quot; InstallationId=&quot;&quot;&quot; &amp; cInstallationId &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; InstallationURL=&quot;&quot;&quot; &amp; cInstallationUrl &amp; &quot;&quot;&quot;&quot;) 
	oStream.writeString(&quot; Entity=&quot;&quot;md&quot;&quot;&quot;)
	oStream.writeString(&quot; SchemaVersion=&quot;&quot;&quot; &amp; cSchemaVersionMetadata &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; TargetRelease=&quot;&quot;&quot; &amp; cTargetRelease &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:xsi=&quot;&quot;&quot; &amp; cxmlns_xsi &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:exp=&quot;&quot;&quot; &amp; cxmlns_exp &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xsi:schemaLocation=&quot;&quot;&quot; &amp; cxsi_schemaLocationMetaData &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns=&quot;&quot;&quot; &amp; cxmlnsMetaData &amp; &quot;&quot;&quot;&gt;&quot;)

	oStream.writeString(&quot;&lt;exp:ExportItem Id=&quot;&quot;1:0:glo&quot;&quot;&gt;&quot;)
	oStream.writeString(&quot;&lt;MetaData&gt;&quot;)
	oStream.writeString(&quot;&lt;General Structure=&quot;&quot;Hierarchical&quot;&quot;&gt;&quot;)
	oStream.writeString(&quot;&lt;Identifier Catalog=&quot;&quot;ILIAS&quot;&quot; Entry=&quot;&quot;il_0_glo_1&quot;&quot;/&gt;&quot;)
	oStream.writeString(&quot;&lt;Title Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&gt;&quot; &amp; sTitle &amp; &quot;&lt;/Title&gt;&quot;)
	oStream.writeString(&quot;&lt;Language Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;/&gt;&quot;)
	oStream.writeString(&quot;&lt;Description Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&gt;&quot; &amp; sDescription &amp; &quot;&lt;/Description&gt;&quot;)
	if oMetadata.docKeywords &lt;&gt; &quot;&quot; Then
		for i = 0 to ubound(aKeywords())
			sKeyword = ltrim(rtrim(aKeywords(i))
			oStream.writeString(&quot;&lt;Keyword Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&gt;&quot; &amp; sKeyword &amp; &quot;&lt;/Keyword&gt;&quot;)
		next i    
	end if	
	oStream.writeString(&quot;&lt;/General&gt;&quot;)
	if oMetadata.docAuthors &lt;&gt; &quot;&quot; Then
	    oStream.writeString(&quot;&lt;Lifecycle Status=&quot;&quot;Draft&quot;&quot;&gt;&quot;)
	    oStream.writeString(&quot;&lt;Version Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;/&gt;&quot;)
		oStream.writeString(&quot;&lt;Contribute Role=&quot;&quot;Author&quot;&quot;&gt;&quot;)
		for i = 0 to ubound(aAuthors())
			sAuthor = ltrim(rtrim(aAuthors(i))
			oStream.writeString(&quot;&lt;Entity&gt;&quot; &amp; sAuthor &amp; &quot;&lt;/Entity&gt;&quot;)
		next i
		oStream.writeString(&quot;&lt;/Contribute&gt;&quot;)
		oStream.writeString(&quot;&lt;/Lifecycle&gt;&quot;)
	end if  
	if oMetadata.docCopyright &lt;&gt; &quot;&quot; Then
		oStream.writeString(&quot;&lt;Rights Costs=&quot;&quot;No&quot;&quot; CopyrightAndOtherRestrictions=&quot;&quot;Yes&quot;&quot;&gt;&quot;)
		oStream.writeString(&quot;&lt;Description Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&gt;&quot; &amp; oMetadata.docCopyright &amp; &quot;&lt;/Description&gt;&quot;)
		oStream.writeString(&quot;&lt;/Rights&gt;&quot;)
	end If	
	oStream.writeString(&quot;&lt;/MetaData&gt;&quot;)
	oStream.writeString(&quot;&lt;/exp:ExportItem&gt;&quot;)
	
	
	&apos;export metadata of the definitions 
	iDefinitions = 0
	for i = 1 to ubound(gaDocChapter())
		oChapter = gaDocChapter(i)
		&apos;remember the last term title that is also used for a definition, that has level 2
		if oChapter.Level = 1 then
			sTitle = oChapter.GetString
		end if	
		if oChapter.HasContent then		
			iDefinitions = iDefinitions + 1
			oStream.writeString(&quot;&lt;exp:ExportItem Id=&quot;&quot;&quot; &amp; cgloID &amp; &quot;:&quot; &amp; iDefinitions &amp; &quot;:gdf&quot;&quot;&gt;&quot;)
			oStream.writeString(&quot;&lt;MetaData&gt;&quot;)
			oStream.writeString(&quot;&lt;General Structure=&quot;&quot;Hierarchical&quot;&quot;&gt;&quot;)
			oStream.writeString(&quot;&lt;Identifier Catalog=&quot;&quot;ILIAS&quot;&quot; Entry=&quot;&quot;il_0_gdf_&quot; &amp; iDefinitions &amp; &quot;&quot;&quot;/&gt;&quot;)
			oStream.writeString(&quot;&lt;Title Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&gt;&quot; &amp; sTitle &amp; &quot;&lt;/Title&gt;&quot;)
			oStream.writeString(&quot;&lt;Language Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;/&gt;&quot;)
			oStream.writeString(&quot;&lt;Description Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;/&gt;&quot;)			
			oStream.writeString(&quot;&lt;Keyword Language=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;/&gt;&quot;)			
			oStream.writeString(&quot;&lt;/General&gt;&quot;)
			oStream.writeString(&quot;&lt;/MetaData&gt;&quot;)
			oStream.writeString(&quot;&lt;/exp:ExportItem&gt;&quot;)
		end if	
	next i
	oStream.writeString(&quot;&lt;/exp:Export&gt;&quot;)
	oStream.closeOutput
end sub


sub ExportGlossaryStyles
dim oStream As Object
dim sTitle as string
dim sDescription as string

	oStream = GetExportFileObject(gsExportStyleDir &amp; gsPathSeparator &amp; XML_FILENAME)
	goExportXML = oStream
	
	oStream.writeString(gsHead)
	oStream.writeString(&quot;&lt;exp:Export&quot;)	
	oStream.writeString(&quot; InstallationId=&quot;&quot;&quot; &amp; cInstallationId &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; InstallationURL=&quot;&quot;&quot; &amp; cInstallationUrl &amp; &quot;&quot;&quot;&quot;) 
	oStream.writeString(&quot; Entity=&quot;&quot;object_style&quot;&quot;&quot;)
	oStream.writeString(&quot; SchemaVersion=&quot;&quot;&quot; &amp; cSchemaVersionStyle &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; TargetRelease=&quot;&quot;&quot; &amp; cTargetRelease &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:xsi=&quot;&quot;&quot; &amp; cxmlns_xsi &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:exp=&quot;&quot;&quot; &amp; cxmlns_exp &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xsi:schemaLocation=&quot;&quot;&quot; &amp; cxsi_schemaLocationStyle &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns=&quot;&quot;&quot; &amp; cxmlnsStyle &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot; xmlns:ds=&quot;&quot;&quot; &amp; cxmlns_ds &amp; &quot;&quot;&quot;&quot;)
	oStream.writeString(&quot;&gt;&quot;)

	oStream.writeString(&quot;&lt;exp:ExportItem Id=&quot;&quot;&quot; &amp; cgloID &amp; &quot;&quot;&quot;&gt;&quot;)
	oStream.writeString(&quot;&lt;ds:DataSet InstallationId=&quot;&quot;&quot; &amp; cInstallationId &amp; &quot;&quot;&quot;&quot; &amp; &quot; InstallationURL=&quot;&quot;&quot;&quot; TopEntity=&quot;&quot;object_style&quot;&quot;&gt;&quot;)

	oStream.writeString(&quot;&lt;ds:Rec Entity=&quot;&quot;object_style&quot;&quot;&gt;&quot;)
	oStream.writeString(&quot;&lt;ObjectStyle&gt;&quot;)
	oStream.writeString(&quot;&lt;ObjectId&gt;&quot; &amp; cgloID &amp; &quot;&lt;/ObjectId&gt;&quot;)
	oStream.writeString(&quot;&lt;/ObjectStyle&gt;&quot;)
	oStream.writeString(&quot;&lt;/ds:Rec&gt;&quot;)

	sTitle =  goDlgExport.Model.txtMetaTitle.Text
	sDescription = goDlgExport.Model.txtMetaDescription.Text
	oStream.writeString(&quot;&lt;ds:Rec Entity=&quot;&quot;sty&quot;&quot;&gt;&quot;)
	oStream.writeString(&quot;&lt;Sty&gt;&quot;)
	oStream.writeString(&quot;&lt;Title&gt;&quot; &amp; sTitle &amp; &quot;&lt;/Title&gt;&quot;)
	oStream.writeString(&quot;&lt;Description&gt;&quot; &amp; sDescription &amp; &quot;&lt;/Description&gt;&quot;)
	oStream.writeString(&quot;&lt;Id&gt;&quot; &amp; XML_STYLE_ID &amp; &quot;&lt;/Id&gt;&quot;)
	oStream.writeString(&quot;&lt;ImagesDir&gt;Services/Style/set_1/expDir_1/dsDir_1&lt;/ImagesDir&gt;&quot;)
	oStream.writeString(&quot;&lt;/Sty&gt;&quot;)
	oStream.writeString(&quot;&lt;/ds:Rec&gt;&quot;)

	ExportIliasStyles

	oStream.writeString(&quot;&lt;ds:Rec Entity=&quot;&quot;sty_usage&quot;&quot;&gt;&quot;)
	oStream.writeString(&quot;&lt;StyUsage&gt;&quot;)
	oStream.writeString(&quot;&lt;ObjId&gt;&quot; &amp; cgloID &amp; &quot;&lt;/ObjId&gt;&quot;)
	oStream.writeString(&quot;&lt;StyleId&gt;&quot; &amp; XML_STYLE_ID &amp; &quot;&lt;/StyleId&gt;&quot;)
	oStream.writeString(&quot;&lt;/StyUsage&gt;&quot;)
	oStream.writeString(&quot;&lt;/ds:Rec&gt;&quot;)

	oStream.writeString(&quot;&lt;/ds:DataSet&gt;&quot;)
	oStream.writeString(&quot;&lt;/exp:ExportItem&gt;&quot;)
	oStream.writeString(&quot;&lt;/exp:Export&gt;&quot;)
	oStream.closeOutput
End Sub


function GetGlossaryMetaData() as object
dim oMetadata as object

	oMetadata = createObject(&quot;MetadataGlossary&quot;)
	with oMetadata
		.docTitle = goDlgExport.Model.txtMetaTitle.Text
		.docDescription = goDlgExport.Model.txtMetaDescription.Text
		.docLanguage = goDlgExport.Model.cmbMetaLanguage.Text
		.docKeywords = goDlgExport.Model.txtMetaKeywords.Text
		.docAuthors = goDlgExport.Model.txtMetaAuthor.Text
		.docCopyright = goDlgExport.Model.txtMetaCopyright.Text
	end With
	GetGlossaryMetaData = oMetadata
end Function  

</script:module>