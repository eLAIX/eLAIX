<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="exEP" script:language="StarBasic">&apos;****************************************************************************
&apos; eLAIX   : Writing ILIAS learning modules offline with OpenOffice.org Writer
&apos; Author  : Harry Boldt - h.boldt@boldt-media.de - http://elaix.org
&apos; License : GPL
&apos;****************************************************************************

&apos; This module is part of eLAIX. You can redistribute it and/or
&apos; modify it under the terms of the GNU Lesser General Public
&apos; License as published by the Free Software Foundation, either
&apos; version 3 of the License, or (at your option) any later version.
&apos; 
&apos; This program is distributed in the hope that it will be useful,
&apos; but WITHOUT ANY WARRANTY; without even the implied warranty of
&apos; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
&apos; Lesser General Public License for more details.
&apos; 
&apos; You should have received a copy of the GNU Lesser General Public
&apos; License along with this program. If not, please visit the Free
&apos; Software Foundation website at http://www.gnu.org/licenses/.

Option Explicit

private psFrameCaption as string
private poNavStream as object
private poPageStream as object
private poMetadata as object
private piBacksteps as integer
private gsFootnotes as string
private piPage as integer


sub SetEpubPathGlobals
dim sTempFolder as string 
dim oSFA as object

	&apos;Set Path Globals
	gsExportZIP = ConvertToURL(goDlgExport.Model.lblFilename.Label)
	sTempFolder = GetRandomString(&quot;tmp-&quot;, 12)
	gsExportZipDir = gsCurDir &amp; gsPathSeparator &amp; sTempFolder 
	if Dir(gsExportZipDir, 16) &lt;&gt; &quot;&quot; then &apos; Delete existing folder
		oSFA = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
		oSFA.setReadOnly(gsExportZipDir, false) &apos; gsExportZipDir is then writable (not readonly)
		RmDir(gsExportZipDir)
	end if
end sub


Sub ExportToEPUB
dim sImageDir as string
dim oStream as object

	gsExportType = &quot;EP&quot;
    ExportEpubDocument    
    goDlgExport.Model.lblPosition5.Label = gsCheckString
	ExportEpubStyles	
	ExportEpubMimeType
	ExportEpubContainer	
	ExportEpubPackage
	ExportEpubNavigation
    &apos;ExportEpubMedia    
    &apos;ExportEpubDocProperties
    &apos;ExportEpubFootnotes
End Sub


sub ExportEpubMimeType
dim oStream as object

	&apos;Write file &quot;mimetype&quot;
	oStream = GetExportFileObject(gsExportZipDir &amp; &quot;/mimetype&quot;)
	oStream.writeString(&quot;application/epub+zip&quot;)
	oStream.closeOutput()
end sub


sub ExportEpubContainer
dim oStream as object

	&apos;Write file &quot;mimetype&quot;
	oStream = GetExportFileObject(gsExportZipDir &amp; &quot;/META-INF/container.xml&quot;)
	oStream.writeString(&quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;utf-8&quot;&quot;?&gt;&quot; &amp; gsCR)
	oStream.writeString(&quot;&lt;container xmlns=&quot;&quot;urn:oasis:names:tc:opendocument:xmlns:container&quot;&quot; version=&quot;&quot;1.0&quot;&quot;&gt;&quot; &amp; gsCR)
	oStream.writeString(&quot;&lt;rootfiles&gt;&quot; &amp; gsCR)
	oStream.writeString(&quot;&lt;rootfile full-path=&quot;&quot;EPUB/package.opf&quot;&quot; media-type=&quot;&quot;application/oebps-package+xml&quot;&quot; /&gt;&quot; &amp; gsCR)
	oStream.writeString(&quot;&lt;/rootfiles&gt;&quot; &amp; gsCR)
	oStream.writeString(&quot;&lt;/container&gt;&quot;)
	oStream.closeOutput
end sub


sub ExportEpubPackage
dim oStream as object
	
	&apos;Create file &quot;EPUB/package.opf&quot;
	oStream = GetExportFileObject(gsExportZipDir &amp; &quot;/EPUB/package.opf&quot;)
	oStream.writeString(&quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;utf-8&quot;&quot; standalone=&quot;&quot;no&quot;&quot;?&gt;&quot; &amp; gsCR)
	oStream.writeString(&quot;&lt;package xmlns=&quot;&quot;http://www.idpf.org/2007/opf&quot;&quot; version=&quot;&quot;3.0&quot;&quot; unique-identifier=&quot;&quot;uid&quot;&quot;&gt;&quot; &amp; gsCR)

	&apos;METADATA: Write metadata of the book
	ExportEpubPackageMetadata(oStream)
	
	&apos;MANIFEST: Write information of all files within the book
	ExportEpubPackageManifest(oStream)
	
	&apos;SPINE: Write information about the order of the elements within the book
	ExportEpubPackageSpine(oStream)
	
	oStream.writeString(&quot;&lt;/package&gt;&quot; &amp; gsCR)
	oStream.closeOutput 
end sub


sub ExportEpubPackageMetadata(oStream as object)
dim sID as string
dim sTitle as string
dim aAuthors()
dim sAuthor as string
dim sDate as string
dim sTime as string
dim i as integer
dim sLastModified as string
dim sText as string

	oStream.writeString(&quot;&lt;metadata xmlns:dc=&quot;&quot;http://purl.org/dc/elements/1.1/&quot;&quot;&gt;&quot; &amp; gsCR)
	
    &apos;ID/ISBN
    if goDlgExport.Model.txtMetaID.Text &lt;&gt; &quot;&quot; then
	    sID = goDlgExport.Model.txtMetaID.Text
    else
	    sID = GetRandomString(&quot;UID-&quot;, 24) 
	    goDlgExport.Model.txtMetaID.Text = sID
	    SetInternalDocString(&quot;epubMetaID&quot;, sID)
	end if 	 
	oStream.writeString(gsTAB &amp; &quot;&lt;dc:identifier id=&quot;&quot;uid&quot;&quot;&gt;&quot; &amp; sID &amp; &quot;&lt;/dc:identifier&gt;&quot; &amp; gsCR)
	
	&apos;Title
    sText = ReplaceSymbolsMetadata(goDlgExport.Model.txtMetaTitle.Text)
    if sText = &quot;&quot; then sText = &quot;Unknown Title&quot;
	oStream.writeString(gsTAB &amp; &quot;&lt;dc:title&gt;&quot; &amp; sText &amp; &quot;&lt;/dc:title&gt;&quot; &amp; gsCR)

	&apos;language
	sText = goDlgExport.Model.cmbMetaLanguage.Text
	oStream.writeString(gsTAB &amp; &quot;&lt;dc:language&gt;&quot; &amp; sText &amp; &quot;&lt;/dc:language&gt;&quot; &amp; gsCR)
	
	&apos;authors
	if goDlgExport.Model.txtMetaAuthor.Text &lt;&gt; &quot;&quot; then
	    aAuthors = ArrayOutOfString(ReplaceSymbolsMetadata(goDlgExport.Model.txtMetaAuthor.Text), &quot;,&quot;)
		for i = 0 to ubound(aAuthors())
			sAuthor = ltrim(rtrim(aAuthors(i))
			oStream.writeString(gsTAB &amp; &quot;&lt;dc:creator id=&quot;&quot;creator&quot; &amp; i + 1 &amp; &quot;&quot;&quot;&gt;&quot; &amp; sAuthor &amp; &quot;&lt;/dc:creator&gt;&quot; &amp; gsCR)
		next i
	end if  
	
	&apos;Last modified
	sDate = CDateToISO(Date)
	sTime = Time
	sLastModified = mid(sDate, 1, 4) &amp; &quot;-&quot; &amp; mid(sDate, 5, 2) &amp; &quot;-&quot; &amp; mid(sDate, 7, 2) &amp; &quot;T&quot; &amp; sTime &amp; &quot;Z&quot;
	oStream.writeString(gsTAB &amp; &quot;&lt;meta property=&quot;&quot;dcterms:modified&quot;&quot;&gt;&quot; &amp; sLastModified &amp; &quot;&lt;/meta&gt;&quot; &amp; gsCR)
	
	&apos;contributor
	sText = goDlgExport.Model.txtMetaContributor.Text
	if sText &lt;&gt; &quot;&quot; then oStream.writeString(gsTAB &amp; &quot;&lt;dc:contributor id=&quot;&quot;contributor&quot;&quot;&gt;&quot; &amp; sText &amp; &quot;&lt;/dc:contributor&gt;&quot; &amp; gsCR)

	&apos;coverage
	sText = goDlgExport.Model.txtMetaCoverage.Text
	if sText &lt;&gt; &quot;&quot; then oStream.writeString(gsTAB &amp; &quot;&lt;dc:coverage id=&quot;&quot;coverage&quot;&quot;&gt;&quot; &amp; sText &amp; &quot;&lt;/dc:coverage&gt;&quot; &amp; gsCR)

	&apos;creator
	sText = goDlgExport.Model.txtMetaCreator.Text
	if sText &lt;&gt; &quot;&quot; then oStream.writeString(gsTAB &amp; &quot;&lt;dc:creator id=&quot;&quot;creator&quot;&quot;&gt;&quot; &amp; sText &amp; &quot;&lt;/dc:creator&gt;&quot; &amp; gsCR)

	&apos;publishing date
	sDate = goDlgExport.Model.dateMetaPublishing.Text
	sTime = goDlgExport.Model.timeMetaPublishing.Text
	if sDate &amp; sTime &lt;&gt; &quot;&quot; then oStream.writeString(gsTAB &amp; &quot;&lt;dc:date id=&quot;&quot;date&quot;&quot;&gt;&quot; &amp; sDate &amp; &quot;T&quot; &amp; sTime &amp; &quot;Z&quot; &amp; &quot;&lt;/dc:date&gt;&quot; &amp; gsCR)

	&apos;publisher
	sText = goDlgExport.Model.txtMetaPublisher.Text
	if sText &lt;&gt; &quot;&quot; then oStream.writeString(gsTAB &amp; &quot;&lt;dc:publisher id=&quot;&quot;publisher&quot;&quot;&gt;&quot; &amp; sText &amp; &quot;&lt;/dc:publisher&gt;&quot; &amp; gsCR)

	&apos;format
	sText = goDlgExport.Model.txtMetaFormat.Text
	if sText &lt;&gt; &quot;&quot; then oStream.writeString(gsTAB &amp; &quot;&lt;dc:format id=&quot;&quot;format&quot;&quot;&gt;&quot; &amp; sText &amp; &quot;&lt;/dc:format&gt;&quot; &amp; gsCR)

	&apos;relation
	sText = goDlgExport.Model.txtMetaRelation.Text
	if sText &lt;&gt; &quot;&quot; then oStream.writeString(gsTAB &amp; &quot;&lt;dc:relation id=&quot;&quot;relation&quot;&quot;&gt;&quot; &amp; sText &amp; &quot;&lt;/dc:relation&gt;&quot; &amp; gsCR)

	&apos;rights
	sText = goDlgExport.Model.txtMetaRights.Text
	if sText &lt;&gt; &quot;&quot; then oStream.writeString(gsTAB &amp; &quot;&lt;dc:rights id=&quot;&quot;rights&quot;&quot;&gt;&quot; &amp; sText &amp; &quot;&lt;/dc:rights&gt;&quot; &amp; gsCR)

	&apos;source
	sText = goDlgExport.Model.txtMetaSource.Text
	if sText &lt;&gt; &quot;&quot; then oStream.writeString(gsTAB &amp; &quot;&lt;dc:source id=&quot;&quot;source&quot;&quot;&gt;&quot; &amp; sText &amp; &quot;&lt;/dc:source&gt;&quot; &amp; gsCR)

	&apos;subject
	sText = goDlgExport.Model.txtMetaSubject.Text
	if sText &lt;&gt; &quot;&quot; then oStream.writeString(gsTAB &amp; &quot;&lt;dc:subject id=&quot;&quot;subject&quot;&quot;&gt;&quot; &amp; sText &amp; &quot;&lt;/dc:subject&gt;&quot; &amp; gsCR)

	&apos;type
	sText = goDlgExport.Model.txtMetaType.Text
	if sText &lt;&gt; &quot;&quot; then oStream.writeString(gsTAB &amp; &quot;&lt;dc:type id=&quot;&quot;type&quot;&quot;&gt;&quot; &amp; sText &amp; &quot;&lt;/dc:type&gt;&quot; &amp; gsCR)

	&apos;description
	sText = goDlgExport.Model.txtMetaDescription.Text
	if sText &lt;&gt; &quot;&quot; then oStream.writeString(gsTAB &amp; &quot;&lt;dc:description id=&quot;&quot;description&quot;&quot;&gt;&quot; &amp; sText &amp; &quot;&lt;/dc:description&gt;&quot; &amp; gsCR)

	oStream.writeString(&quot;&lt;/metadata&gt;&quot; &amp; gsCR)
end sub


sub ExportEpubPackageManifest(oStream as object)
dim iChapter as integer
dim iChapterCount as long 
dim oMedia as object
dim iMedia as integer
dim iMediaCount as long
dim sMediaType as string 
dim sFilename as string
dim oControl as object
dim iPos as integer
dim iLastPage as integer
dim iPage as integer

	oStream.writeString(&quot;&lt;manifest&gt;&quot; &amp; gsCR)
	&apos;Write the navigation page
	if goDlgExport.Model.optCreateNdxFile.State = 1 then
		oStream.writeString(gsTAB &amp; &quot;&lt;item id=&quot;&quot;ncx&quot;&quot; href=&quot;&quot;toc.ncx&quot;&quot; media-type=&quot;&quot;application/x-dtbncx+xml&quot;&quot;/&gt;&quot; &amp; gsCR)
	end if
	oStream.writeString(gsTAB &amp; &quot;&lt;item id=&quot;&quot;htmltoc&quot;&quot; href=&quot;&quot;nav.xhtml&quot;&quot; properties=&quot;&quot;nav&quot;&quot; media-type=&quot;&quot;application/xhtml+xml&quot;&quot;/&gt;&quot; &amp; gsCR)
	&apos;Write chapter pages
	iChapterCount = ubound(gaDocChapter())
	iChapter = 0
	iLastPage = 0
	do while iChapter &lt; iChapterCount
		iChapter = iChapter + 1	
		if gaDocChapter(iChapter).PageID &gt; iLastPage then
			iPage = gaDocChapter(iChapter).PageID
			oStream.writeString(gsTAB &amp; &quot;&lt;item id=&quot;&quot;page-&quot; &amp; iPage &amp; &quot;&quot;&quot; href=&quot;&quot;page-&quot; &amp; iPage &amp; &quot;.xhtml&quot;&quot; media-type=&quot;&quot;application/xhtml+xml&quot;&quot;/&gt;&quot; &amp; gsCR)
		end if	
		iLastPage = gaDocChapter(iChapter).PageID
	loop
	
	&apos;Write Graphics
	&apos;first check if a cover image has been defined (0 = no image | 1 = internal graphic | 3 = external file)
	oControl = goDlgExport.getControl(&quot;listCoverImage&quot;)
	iPos = oControl.SelectedItemPos
	
	iMediaCount = ubound(gaExtMedia())
	iMedia = 0
	do while iMedia &lt; iMediaCount
		iMedia = iMedia + 1
		oMedia = gaExtMedia(iMedia)
		sFilename = FileNameOutOfPath(oMedia.FileName)
		if (sFilename = gsEpubCoverImage) and (iPos = 1) then    
			oStream.writeString(gsTAB &amp; &quot;&lt;item id=&quot;&quot;cover&quot;&quot; href=&quot;&quot;cover.xhtml&quot;&quot; media-type=&quot;&quot;application/xhtml+xml&quot;&quot;/&gt;&quot; &amp; gsCR)
		    oStream.writeString(gsTAB &amp; &quot;&lt;item id=&quot;&quot;cover-image&quot;&quot; href=&quot;&quot;images/&quot; &amp; gsEpubCoverImage &amp; &quot;&quot;&quot; properties=&quot;&quot;cover-image&quot;&quot; media-type=&quot;&quot;&quot; &amp; oMedia.MediaTypeText &amp; &quot;&quot;&quot;/&gt;&quot; &amp; gsCR)
		    ExportEpubCoverPage(&quot;Cover image&quot;, sFilename)
		else
			oStream.writeString(gsTAB &amp; &quot;&lt;item id=&quot;&quot;img-&quot; &amp; oMedia.ID &amp; &quot;&quot;&quot; href=&quot;&quot;images/&quot; &amp; sFilename &amp; &quot;&quot;&quot;  media-type=&quot;&quot;&quot; &amp; oMedia.MediaTypeText &amp; &quot;&quot;&quot;/&gt;&quot; &amp; gsCR)	
		end if	
	loop
	if (iPos = 2) and (gsEpubCoverImage &lt;&gt; &quot;&quot;) then
		sMediaType = GetMediaTypeFromFilename(gsEpubCoverImage)
		oStream.writeString(gsTAB &amp; &quot;&lt;item id=&quot;&quot;cover&quot;&quot; href=&quot;&quot;cover.xhtml&quot;&quot; media-type=&quot;&quot;application/xhtml+xml&quot;&quot;/&gt;&quot; &amp; gsCR)
	    oStream.writeString(gsTAB &amp; &quot;&lt;item id=&quot;&quot;cover-image&quot;&quot; href=&quot;&quot;images/&quot; &amp; gsEpubCoverImage &amp; &quot;&quot;&quot; properties=&quot;&quot;cover-image&quot;&quot; media-type=&quot;&quot;&quot; &amp; sMediaType &amp; &quot;&quot;&quot;/&gt;&quot; &amp; gsCR)
	    ExportEpubCoverPage(&quot;Cover image&quot;, gsEpubCoverImage)
	end if 
	
	&apos;write link to css file
    oStream.writeString(gsTAB &amp; &quot;&lt;item id=&quot;&quot;css&quot;&quot; href=&quot;&quot;css/style.css&quot;&quot; media-type=&quot;&quot;text/css&quot;&quot;/&gt;&quot; &amp; gsCR)

	&apos;write closing manifest tag
	oStream.writeString(&quot;&lt;/manifest&gt;&quot; &amp; gsCR)

end sub


sub ExportEpubPackageSpine(oStream as object)
dim iChapter as integer
dim iChapterCount as long 
dim sCover as string
dim iLastPage as integer

	oStream.writeString(&quot;&lt;spine toc=&quot;&quot;ncx&quot;&quot;&gt;&quot; &amp; gsCR)
	&apos;sCover = GetInternalDocString(&quot;epubCoverFromDocument&quot;)
	if gsEpubCoverImage &lt;&gt; &quot;&quot; then
		oStream.writeString(gsTAB &amp; &quot;&lt;itemref idref=&quot;&quot;cover&quot;&quot; linear=&quot;&quot;no&quot;&quot;/&gt;&quot; &amp; gsCR)
	end if
	oStream.writeString(gsTAB &amp; &quot;&lt;itemref idref=&quot;&quot;htmltoc&quot;&quot; linear=&quot;&quot;no&quot;&quot;/&gt;&quot; &amp; gsCR)
	iChapter = 0
	iChapterCount = ubound(gaDocChapter())
	iLastPage = 0
	do while iChapter &lt; iChapterCount
		iChapter = iChapter + 1		
		if gaDocChapter(iChapter).PageID &gt; iLastPage then
			oStream.writeString(gsTAB &amp; &quot;&lt;itemref idref=&quot;&quot;page-&quot; &amp; gaDocChapter(iChapter).PageID &amp; &quot;&quot;&quot; linear=&quot;&quot;yes&quot;&quot;/&gt;&quot; &amp; gsCR)
		end if	
		iLastPage = gaDocChapter(iChapter).PageID
	loop		
	oStream.writeString(&quot;&lt;/spine&gt;&quot; &amp; gsCR)
end sub


sub ExportEpubNavigation
	ExportEpubTocNavigation
	if goDlgExport.Model.optCreateNdxFile.State = 1 then
		ExportEpubNcxNavigation
	end if
end sub
	

sub ExportEpubTocNavigation
dim sTitle as string
dim iChapterCount as integer

    sTitle = ReplaceSymbolsMetadata(goDlgExport.Model.txtMetaTitle.Text)

	&apos;Create file &quot;EPUB/xhtml/nav.xhtml and set the header&quot;
	poNavStream = GetExportFileObject(gsExportZipDir &amp; &quot;/EPUB/nav.xhtml&quot;)
	poNavStream.writeString(&quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;utf-8&quot;&quot; standalone=&quot;&quot;no&quot;&quot;?&gt;&quot; &amp; gsCR)
	poNavStream.writeString(&quot;&lt;html xmlns=&quot;&quot;http://www.w3.org/1999/xhtml&quot;&quot; xmlns:epub=&quot;&quot;http://www.idpf.org/2007/ops&quot;&quot; xml:lang=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot; lang=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot;&gt;&quot; &amp; gsCR)
	poNavStream.writeString(&quot;&lt;head&gt;&quot; &amp; gsCR)
	poNavStream.writeString(&quot;&lt;meta charset=&quot;&quot;utf-8&quot;&quot;/&gt;&quot; &amp; gsCR)	
	poNavStream.writeString(&quot;&lt;title&gt;&quot; &amp; sTitle &amp; &quot;&lt;/title&gt;&quot; &amp; gsCR)
	poNavStream.writeString(&quot;&lt;link rel=&quot;&quot;stylesheet&quot;&quot; type=&quot;&quot;text/css&quot;&quot; href=&quot;&quot;css/style.css&quot;&quot;/&gt;&quot; &amp; gsCR)
	poNavStream.writeString(&quot;&lt;/head&gt;&quot; &amp; gsCR)

	&apos;Generate a structured link list for all chapters and subchapters in the body section
	poNavStream.writeString(&quot;&lt;body&gt;&quot; &amp; gsCR)		
	poNavStream.writeString(&quot;&lt;nav id=&quot;&quot;toc&quot;&quot; xmlns:epub=&quot;&quot;http://www.idpf.org/2007/ops&quot;&quot; epub:type=&quot;&quot;toc&quot;&quot;&gt;&quot; &amp; gsCR)
	
    sTitle = goDlgExport.Model.txtTocTitle.Text
    if sTitle = &quot;&quot; then sTitle = &quot;Content&quot;
	poNavStream.writeString(&quot;&lt;h1 class=&quot;&quot;toc_title&quot;&quot;&gt;&quot; &amp; sTitle &amp; &quot;&lt;/h1&gt;&quot; &amp; gsCR)
	iChapterCount = ubound(gaDocChapter())
	piBacksteps = 0
	piPage = 1
	ExportEpubTocNavigationList(iChapterCount, 0)
	poNavStream.writeString(&quot;&lt;/nav&gt;&quot; &amp; gsCR)
	poNavStream.writeString(&quot;&lt;/body&gt;&quot; &amp; gsCR)

	poNavStream.writeString(&quot;&lt;/html&gt;&quot; &amp; gsCR)
	poNavStream.closeOutput 
	
end sub


function ExportEpubTocNavigationList(iChapterCount as integer, iChapter as integer) as integer
dim iLevelDiff as integer
dim sStr as string
dim bContinue
dim i as integer
dim iChapterID as integer
dim iPageID as integer

	bContinue = true
	poNavStream.writeString(&quot;&lt;ol&gt;&quot; &amp; gsCR)
	do while (iChapter &lt; iChapterCount) and bContinue
		if piBacksteps = 0 then
			iChapter = iChapter + 1	
			if goDlgExport.Model.optIncludeChapterNumberingToc.State = 1 then									
				sStr = gaDocChapter(iChapter).ListLabelString &amp; gaDocChapter(iChapter).GetString
			else
				sStr = gaDocChapter(iChapter).GetString
			end if
			iChapterID = gaDocChapter(iChapter).ID
			iPageID = gaDocChapter(iChapter).PageID
			poNavStream.writeString(&quot;&lt;li id=&quot;&quot;nav-&quot; &amp; iChapterID &amp; &quot;&quot;&quot;&gt;&quot;)		
			poNavStream.writeString(&quot;&lt;a href=&quot;&quot;page-&quot; &amp; iPageID &amp; &quot;.xhtml#chapter-&quot; &amp; iChapterID &amp; &quot;&quot;&quot;&gt;&quot; &amp; sStr &amp; &quot;&lt;/a&gt;&quot;)					

			&apos;check if there is a next level
			if iChapter &lt; iChapterCount then
				
				&apos;check if the next chapter has a higher level and is not a page break
				if (gaDocChapter(iChapter + 1).Level &gt; gaDocChapter(iChapter).Level)  then
					&apos;call this function recursively
					iChapter = ExportEpubTocNavigationList(iChapterCount, iChapter)

				&apos;check if the next chapter has a lower level
				elseif (gaDocChapter(iChapter + 1).Level &lt; gaDocChapter(iChapter).Level) then
					&apos;look how much level the next level is going back
					piBacksteps = gaDocChapter(iChapter).Level - gaDocChapter(iChapter + 1).Level - 1
					bContinue = false
				end if	
			end if			
			poNavStream.writeString(&quot;&lt;/li&gt;&quot; &amp; gsCR)	

		else 
			piBacksteps = piBacksteps - 1
			bContinue = false
		end if
	loop
	poNavStream.writeString(&quot;&lt;/ol&gt;&quot; &amp; gsCR)	
	ExportEpubTocNavigationList = iChapter		
end function


sub ExportEpubNcxNavigation
dim sTitle as string
dim sID as string
dim iChapterCount as integer

    sTitle = ReplaceSymbolsMetadata(goDlgExport.Model.txtMetaTitle.Text)
    sID = goDlgExport.Model.txtMetaID.Text

	&apos;Create file &quot;EPUB/xhtml/nav.xhtml and set the header&quot;
	poNavStream = GetExportFileObject(gsExportZipDir &amp; &quot;/EPUB/toc.ncx&quot;)
	poNavStream.writeString(&quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;utf-8&quot;&quot; standalone=&quot;&quot;no&quot;&quot;?&gt;&quot; &amp; gsCR)
	poNavStream.writeString(&quot;&lt;ncx xmlns=&quot;&quot;http://www.daisy.org/z3986/2005/ncx/&quot;&quot; version=&quot;&quot;2005-1&quot;&quot;&gt;&quot; &amp; gsCR)
	poNavStream.writeString(gsTAB &amp; &quot;&lt;head&gt;&quot; &amp; gsCR)
	poNavStream.writeString(gsTAB &amp; gsTAB &amp; &quot;&lt;meta name=&quot;&quot;cover&quot;&quot; content=&quot;&quot;cover&quot;&quot;/&gt;&quot; &amp; gsCR)
	poNavStream.writeString(gsTAB &amp; gsTAB &amp; &quot;&lt;meta name=&quot;&quot;dtb:uid&quot;&quot; content=&quot;&quot;&quot; &amp; sID &amp; &quot;&quot;&quot;/&gt;&quot; &amp; gsCR)	
	poNavStream.writeString(gsTAB &amp; &quot;&lt;/head&gt;&quot; &amp; gsCR)
	poNavStream.writeString(gsTAB &amp; &quot;&lt;docTitle&gt;&quot; &amp; gsCR)
	poNavStream.writeString(gsTAB &amp; gsTAB &amp; &quot;&lt;text&gt;&quot; &amp; sTitle &amp; &quot;&lt;/text&gt;&quot; &amp; gsCR)
	poNavStream.writeString(gsTAB &amp; &quot;&lt;/docTitle&gt;&quot; &amp; gsCR)

	&apos;Generate a structured link list for all chapters and subchapters in the body section
	poNavStream.writeString(gsTAB &amp; &quot;&lt;navMap&gt;&quot; &amp; gsCR)		
	iChapterCount = ubound(gaDocChapter())
	piBacksteps = 0
	piPage = 0
	ExportNcxNavigationList(iChapterCount, 0)
	poNavStream.writeString(gsTAB &amp; &quot;&lt;/navMap&gt;&quot; &amp; gsCR)
	poNavStream.writeString(&quot;&lt;/ncx&gt;&quot; &amp; gsCR)
	poNavStream.closeOutput 	
end sub


function ExportNcxNavigationList(iChapterCount as integer, iChapter as integer) as integer
dim iLevelDiff as integer
dim sStr as string
dim sIndentPoint as string
dim sIndentLabel as string
dim bContinue
dim iChapterID as integer
dim iPageID as integer
dim i as integer

	bContinue = true
	do while (iChapter &lt; iChapterCount) and bContinue
		if piBacksteps = 0 then
			iChapter = iChapter + 1	
			if goDlgExport.Model.optIncludeChapterNumberingToc.State = 1 then									
				sStr = gaDocChapter(iChapter).ListLabelString &amp; gaDocChapter(iChapter).GetString
			else
				sStr = gaDocChapter(iChapter).GetString
			end if	
			
			if iChapter = 0 then 
				sIndentPoint = gsTab &amp; gsTab
			else	
				sIndentPoint = GetRepeatedString(gsTab, gaDocChapter(iChapter).Level + 1)
			end if	
			iChapterID = gaDocChapter(iChapter).ID
			iPageID = gaDocChapter(iChapter).PageID
			poNavStream.writeString(sIndentPoint &amp; &quot;&lt;navPoint id=&quot;&quot;nav-&quot; &amp; iChapterID &amp; &quot;&quot;&quot; playOrder=&quot;&quot;&quot; &amp; iChapterID &amp; &quot;&quot;&quot;&gt;&quot; &amp; gsCR)
			sIndentLabel = GetRepeatedString(gsTab, gaDocChapter(iChapter).Level + 2)
			poNavStream.writeString(sIndentLabel &amp; &quot;&lt;navLabel&gt;&quot; &amp; gsCR
			poNavStream.writeString(sIndentLabel &amp; gsTab &amp; &quot;&lt;text&gt;&quot; &amp; sStr &amp; &quot;&lt;/text&gt;&quot; &amp; gsCR
			poNavStream.writeString(sIndentLabel &amp; &quot;&lt;/navLabel&gt;&quot; &amp; gsCR
			poNavStream.writeString(sIndentLabel &amp; &quot;&lt;content src=&quot;&quot;page-&quot; &amp; iPageID &amp; &quot;.xhtml#chapter-&quot; &amp; iChapterID &amp; &quot;&quot;&quot;/&gt;&quot; &amp; gsCR 

			&apos;check if there is a next level
			if iChapter &lt; iChapterCount then
				
				&apos;check if the next chapter has a higher level and is not a page break
				if (gaDocChapter(iChapter + 1).Level &gt; gaDocChapter(iChapter).Level)  then
					&apos;call this function recursively
					iChapter = ExportNcxNavigationList(iChapterCount, iChapter)

				&apos;check if the next chapter has a lower level
				elseif (gaDocChapter(iChapter + 1).Level &lt; gaDocChapter(iChapter).Level) then
					&apos;look how much level the next level is going back
					piBacksteps = gaDocChapter(iChapter).Level - gaDocChapter(iChapter + 1).Level - 1
					bContinue = false
				end if	
			end if
			poNavStream.writeString(sIndentPoint &amp; &quot;&lt;/navPoint&gt;&quot; &amp; gsCR)	
						
		else 
			piBacksteps = piBacksteps - 1
			bContinue = false
		end if
	loop
	ExportNcxNavigationList = iChapter		
end function


sub ExportEpubCoverPage(sTitle as string, sImage as string)
dim oStream as object
		
	&apos;Export the page head and body starting tags
	oStream = GetExportFileObject(gsExportZipDir &amp; &quot;/EPUB/cover.xhtml&quot;)
	oStream.writeString(&quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;utf-8&quot;&quot;?&gt;&quot; &amp; gsCR)
	oStream.writeString(&quot;&lt;html xml:lang=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot; lang=&quot;&quot;&quot; &amp; gsLang &amp; _
	 &quot;&quot;&quot; xmlns=&quot;&quot;http://www.w3.org/1999/xhtml&quot;&quot; xmlns:epub=&quot;&quot;http://www.idpf.org/2007/ops&quot;&quot;&gt;&quot; &amp; gsCR)
	oStream.writeString(&quot;&lt;head&gt;&quot; &amp; gsCR)
	oStream.writeString(&quot;&lt;title&gt;&quot; &amp; sTitle &amp; &quot;&lt;/title&gt;&quot; &amp; gsCR)
	oStream.writeString(&quot;&lt;link rel=&quot;&quot;stylesheet&quot;&quot; type=&quot;&quot;text/css&quot;&quot; href=&quot;&quot;css/style.css&quot;&quot;/&gt;&quot; &amp; gsCR)
	oStream.writeString(&quot;&lt;meta charset=&quot;&quot;utf-8&quot;&quot;/&gt;&quot; &amp; gsCR)
	oStream.writeString(&quot;&lt;/head&gt;&quot; &amp; gsCR)
	oStream.writeString(&quot;&lt;body id=&quot;&quot;cover&quot;&quot; epub:type=&quot;&quot;frontmatter&quot;&quot;&gt;&quot; &amp; gsCR)

	&apos;Export the cover image
	oStream.writeString(&quot;&lt;img src=&quot;&quot;images/&quot; &amp; sImage &amp; &quot;&quot;&quot; alt=&quot;&quot;Cover Image&quot;&quot; title=&quot;&quot;Cover Image&quot;&quot;/&gt;&quot; &amp; gsCR)

	&apos;Export the page head and body closing tags
	oStream.writeString(&quot;&lt;/body&gt;&quot; &amp; gsCR)
	oStream.writeString(&quot;&lt;/html&gt;&quot; &amp; gsCR)
	
	&apos;Close the document
	oStream.closeOutput 
end sub	


sub ExportEpubDocument
dim iChapterNo as long
dim oChapter as object
dim sIdent as string
dim sTitle as string
dim sDescription as string
dim aKeywords() as string
dim aParaSet() as long
dim oPara as object
dim iParaCount as long
dim i as long
dim sCharacteristic as string
dim iPage as integer
dim sTag as string
dim sHeadings as string
dim iCount as integer

	iPage = 0
	sHeadings = &quot;&quot;
	iCount =  ubound(gaDocChapter())
	 
	for iChapterNo = 1 to iCount
	
		oChapter = gaDocChapter(iChapterNo)
		iPage = oChapter.PageID
		&apos;Export the page head and body starting tags
		poPageStream = GetExportFileObject(gsExportZipDir &amp; &quot;/EPUB/page-&quot; &amp; iPage &amp; &quot;.xhtml&quot;)
		poPageStream.writeString(&quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;utf-8&quot;&quot;?&gt;&quot; &amp; gsCR)
		poPageStream.writeString(&quot;&lt;html xml:lang=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot; lang=&quot;&quot;&quot; &amp; gsLang &amp; _
		 &quot;&quot;&quot; xmlns=&quot;&quot;http://www.w3.org/1999/xhtml&quot;&quot; xmlns:epub=&quot;&quot;http://www.idpf.org/2007/ops&quot;&quot;&gt;&quot; &amp; gsCR)
		poPageStream.writeString(&quot;&lt;head&gt;&quot; &amp; gsCR)
		poPageStream.writeString(&quot;&lt;title&gt;&quot; &amp; oChapter.GetString &amp; &quot;&lt;/title&gt;&quot; &amp; gsCR)
		poPageStream.writeString(&quot;&lt;link rel=&quot;&quot;stylesheet&quot;&quot; type=&quot;&quot;text/css&quot;&quot; href=&quot;&quot;css/style.css&quot;&quot;/&gt;&quot; &amp; gsCR)
		poPageStream.writeString(&quot;&lt;meta charset=&quot;&quot;utf-8&quot;&quot;/&gt;&quot; &amp; gsCR)
		poPageStream.writeString(&quot;&lt;/head&gt;&quot; &amp; gsCR)
		poPageStream.writeString(&quot;&lt;body epub:type=&quot;&quot;frontmatter&quot;&quot;&gt;&quot; &amp; gsCR)
		poPageStream.writeString(&quot;&lt;div id=&quot;&quot;wrapper&quot;&quot;&gt;&quot; &amp; gsCR)


		do while iChapterNo &lt;= iCount 
			gsFootnotes = &quot;&quot;
			&apos;Export the title
			oChapter = gaDocChapter(iChapterNo)
			poPageStream.writeString(GetTitleString(oChapter)
					
			&apos;Enumerate all paragraphs of this chapter and export them
			aParaSet() = GetParaSetOfChapter(oChapter.ID)	
			iParaCount = ubound(aParaSet())	
			for i = 1 to iParaCount
				oPara = gaDocParagraph(aParaSet(i)) 
				if oPara.State &lt;&gt; PARA_STATE_EXPORTED then
					ExportEpubParagraph(oPara)
				end if	
				goDlgExport.Model.lblCountWrite.Label = oPara.ID
			next i
			
			if iChapterNo &lt; iCount then
				if gaDocChapter(iChapterNo + 1).PageID = iPage then
					iChapterNo = iChapterNo + 1
				else 
					exit do
				end if
			else
				exit do	
			end if		
			&apos;Place footnotes at the end of the page
			if gsFootnotes &lt;&gt; &quot;&quot; then
				poPageStream.writeString(&quot;&lt;div class=&quot;&quot;footnotes&quot;&quot;&gt;&quot; &amp; gsCR)
				poPageStream.writeString(gsFootnotes)
				poPageStream.writeString(&quot;&lt;/div&gt;&quot; &amp; gsCR)
			end if
		loop
			

		&apos;Export the body and html closing tags
		poPageStream.writeString(&quot;&lt;/div&gt;&quot; &amp; gsCR)
		poPageStream.writeString(&quot;&lt;/body&gt;&quot; &amp; gsCR)
		poPageStream.writeString(&quot;&lt;/html&gt;&quot; &amp; gsCR)
		
		&apos;Close the document
		poPageStream.closeOutput
	next iChapterNo	
end sub	


function GetTitleString(oChapter as object) as string
dim sTag as string
dim sLevel as string
dim sLabel as string

	sLevel = oChapter.Level
	sLabel = oChapter.ListLabelString
	sTag = &quot;&lt;div id=&quot;&quot;chapter-&quot; &amp; oChapter.ID &amp; &quot;&quot;&quot; class=&quot;&quot;para_Heading_&quot; &amp; oChapter.Level &amp; &quot;&quot;&quot;&gt;&quot;
	if (goDlgExport.Model.optIncludeChapterNumberingDoc.State = 1) and (sLabel &lt;&gt; &quot;&quot;) then
		sTag = sTag &amp; &quot;&lt;span class=&quot;&quot;label_Heading_&quot; &amp; sLevel &amp; &quot;&quot;&quot;&gt;&quot; &amp; sLabel &amp; &quot;&lt;/span&gt;&quot;
	end if
	GetTitleString = sTag &amp; oChapter.GetString &amp; &quot;&lt;/div&gt;&quot; &amp; gsCR
end function


sub ExportEpubParagraph(oPara as object)
dim iParaType as integer
dim aParaSet() as long
dim iCount as long 
dim iStartPos as long
dim iStopPos as integer
dim iLevel as integer

	iParaType = oPara.ParaType	
	select case iParaType
		case PARA_TYPE_TEXT
			ExportEpubTextPortions(oPara)

		case PARA_TYPE_LIST
			ExportEpubList(oPara, true)
			
		case PARA_TYPE_TABLE
			ExportEpubTable(oPara)

		case PARA_TYPE_FRAMESTART
			ExportEpubFrameStart(oPara)

		case PARA_TYPE_FRAMESTOP
			ExportEpubFrameStop(oPara)

		case PARA_TYPE_FILELIST
			&apos;ExportEpubFileList(oPara)
		
		end select
end sub


sub ExportEpubTextPortions(oPara As Object) 
  &apos; oPara : the paragraph to be exported 
dim sExportString as string 
dim aPortionSet()
dim iPortionCount as long
dim sTextPortionType as string
dim oPortion as object
dim aMediaSet()
dim oMedia as object
dim i as long
dim j as integer
dim iCount as integer
dim iLen as integer
dim sLaTeX as string
dim sIdent as long
dim iNoTextWrap as long
dim sImgFilename as string
dim sImgAltTag as string
dim sMediaTag as string
dim bGraphicIsFloated as boolean
dim sStylename as string
dim bIsSingleGraphic as boolean
dim iImgWidth as integer
dim iMaxWidth as integer

	bGraphicIsFloated = false
	
	&apos;step 1: get the stylename and the text portions of the paragraph
	sStylename = ReplaceUmlaut(oPara.ParaStylename)
	sStylename = ReplaceString(sStylename, &quot;_&quot;, &quot; &quot;)
	aPortionSet() = GetTextPortionSet(oPara.ID)

	&apos;step 2: concatenate all text portions and handle media export of textportions
	iPortionCount = ubound(aPortionSet())
	bIsSingleGraphic = false
	for i = 1 to iPortionCount
		oPortion = gaDocTextPortion(aPortionSet(i))
		sTextPortionType = oPortion.TextPortionType
		&apos;do not export graphic captions, these are handled by AppendMediaRec, accordion captions are also handled
		if (oPortion.ParaStylename &lt;&gt; &quot;Illustration&quot;) and (oPortion.ParaStylename &lt;&gt; &quot;ILIAS_Accordion_Caption&quot;) then
			Select Case sTextPortionType
				Case &quot;Text&quot; &apos;this portion is a text object! 
					&apos;check if last portion was a formula and append a blank if there is none
					iLen = len(sExportString)
					if iLen &gt; 6 then
						if mid(sExportString, iLen - 5) = &quot;[/tex]&quot; then
							sExportString = sExportString &amp; &quot; &quot; 
						end if
					end if	
					sExportString = sExportString &amp; GetEpubTextPortionExportString(oPortion)
					
				Case &quot;TextField&quot; &apos;this portion is a reference
					sExportString = sExportString &amp; GetEpubTextFieldExportString(oPortion)
					
				Case &quot;Bookmark&quot; &apos;this portion is a bookmark
					sExportString = sExportString &amp; GetEpubBookmarkExportString(oPortion)

				Case &quot;Footnote&quot; &apos;this portion is a footnote
					sExportString = sExportString &amp; GetEpubFootnoteExportString(oPortion)

				Case &quot;_Marginale&quot; &apos;this portion is a marginale
					sExportString = sExportString &amp; GetEpubMarginaleExportString(oPortion)

				Case &quot;Frame&quot; &apos;this portion is a frame
					&apos;it could be a formula
					if oPortion.FrameStyleName = &quot;Formula&quot; then
						sLaTeX = &quot;&lt;tex&gt;&quot; &amp; ReplaceTexString(oPortion.FormulaTeX) &amp; &quot;&lt;/tex&gt;&quot;
						&apos;set a blank before formula if there is text before
						iLen = len(sExportString)
						if iLen &gt; 0 then
							if mid(sExportString, iLen) &lt;&gt; &quot; &quot; then 
								sLaTeX = &quot; &quot; &amp; sLaTeX
							end	if
						end if
			    		sExportString = sExportString &amp; sLaTeX
					end if					
			end select
		end if	
		
    	&apos;export media joined to this text portion
		iNoTextWrap = com.sun.star.text.WrapTextMode.NONE
		oMedia = GetDocMediaByPortionID(oPortion.ID)
		if not isNull(oMedia) then
			&apos;graphics with surrounding portions should be exported as IntLink	
			if (oMedia.TextWrap = iNoTextWrap) and (oMedia.AnchorType = 1) and (oMedia.HoriOrient = 3) and (iPortionCount &gt; 1) then
				sImgFilename = &quot;images/&quot; &amp; FileNameOutOfPath(gaExtMedia(oMedia.ExtMediaID).FileName)
				if oMedia.Caption &lt;&gt; &quot;&quot; then
					sImgAltTag = oMedia.Caption
				else
					sImgAltTag = oMedia.MediaName
				end if	
				&apos;iImgWidth = Int(oMedia.Width / 26.443)
				&apos;iMaxWidth = Int(goDlgExport.Model.txtMaxImageWidth.Text)
				&apos;if iImgWidth &gt; iMaxWith then
				&apos;	sExportString = sExportString &amp; &quot;&lt;img src=&quot;&quot;&quot; &amp; sImgFilename &amp; &quot;&quot;&quot; alt=&quot;&quot;&quot; &amp; sImgAltTag &amp; &quot;&quot;&quot; max-width=&quot;&quot;100%&quot;&quot; /&gt;&quot;
				&apos;else			
					sExportString = sExportString &amp; &quot;&lt;img src=&quot;&quot;&quot; &amp; sImgFilename &amp; &quot;&quot;&quot; alt=&quot;&quot;&quot; &amp; sImgAltTag &amp; &quot;&quot;&quot; /&gt;&quot;
				&apos;end if
				sStylename = ReplaceUmlaut(oPara.ParaStyleName)
				sStylename = ReplaceString(sStylename, &quot;_&quot;, &quot; &quot;)
			else
				&apos;a single graphic should be exported as a MediaTag and should be placed before the text
				sMediaTag = GetEpubMediaTag(oMedia)
				&apos;check wether the graphic is left or right floated
				bIsSingleGraphic = true
				bGraphicIsFloated = oMedia.HoriOrient = com.sun.star.text.HoriOrientation.LEFT or oMedia.HoriOrient = com.sun.star.text.HoriOrientation.RIGHT
			end if	
		end if		
	next i

	&apos;step 3: export the concatenated text as graphic or paragraph
	if bIsSingleGraphic then
		poPageStream.writeString(sMediaTag &amp; &quot;&lt;p class=&quot;&quot;para_&quot; &amp; sStyleName &amp; &quot;&quot;&quot;&gt;&quot; &amp; sExportString &amp; &quot;&lt;/p&gt;&quot;)
	else
		poPageStream.writeString(&quot;&lt;p class=&quot;&quot;para_&quot; &amp; sStyleName &amp; &quot;&quot;&quot;&gt;&quot; &amp; sExportString &amp; &quot;&lt;/p&gt;&quot;)
	end if
	
	&apos;step 4: export a clear div, if a graphic is left or right floated
	if bGraphicIsFloated then
		poPageStream.writeString(&quot;&lt;div class=&quot;&quot;clear&quot;&quot;&gt;&lt;/div&gt;&quot; &amp; gsCR)
	end if
end sub


function ExportEpubList(oPara as object, bSetClass as boolean) as object
dim iParaCount as long
dim iListLevel as integer
dim iListType as integer
dim iNumberingLevel as integer
dim iNumberingType as integer
dim sNumberingType as string
dim oNextPara as object
dim sStylename as string
dim iRow as integer
dim iCol as integer
dim iChapter as integer
dim sMarginalNumberStyle as string
dim iPos as integer

	iParaCount = UBound(gaDocParagraph())
	iListLevel = oPara.NumberingLevel
	iListType = oPara.NumberingType
	sStyleName = oPara.ParaStyleName
	iRow = oPara.TableRow
	iCol = oPara.TableCol
	iChapter = oPara.ChapterID
    sNumberingType = GetEpubListType(oPara.NumberingType)
	
	&apos;first check, if this list is a marginal number
	iPos = goDlgExport.Model.cmbMarginalNumberStyle.SelectedItems(0)
	sMarginalNumberStyle = goDlgExport.Model.cmbMarginalNumberStyle.StringItemList(iPos)
	if oPara.ParaStyleName = sMarginalNumberStyle then
		poPageStream.writeString(&quot;&lt;div class=&quot;&quot;marginal_no&quot;&quot;&gt;&quot; &amp; oPara.NumberingLabel &amp; (&quot;&lt;/div&gt;&quot; &amp; gsCR)
	else
		ExportEpubListHeader(sStyleName, sNumberingType, bSetClass)
	
	    &apos;enumerate paragraphs that are list items (NumberingType ist not an empty string)
		do while (oPara.NumberingType &lt;&gt; &quot;&quot;) and (oPara.NumberingLevel = iListLevel) and _
				(oPara.NumberingType = iListType) and (oPara.ParaStylename = sStylename) and _
				(oPara.TableRow = iRow) and (oPara.TableCol = iCol) and _
				(oPara.ChapterID = iChapter)
		
			poPageStream.writeString(&quot;&lt;li&gt;&quot;)
			ExportEpubTextPortions(oPara)
			gaDocParagraph(oPara.ID).State = PARA_STATE_EXPORTED
			
			&apos;if oPara.ID = 6 then
			&apos;  sStylename = sStylename
			&apos;end if
			
			&apos;check next item to decide wether it has to be handeled within this item
			if (oPara.ID &lt; iParaCount) then
				iNumberingLevel = oPara.NumberingLevel
				iNumberingType = oPara.NumberingType
				oNextPara = gaDocParagraph(oPara.ID + 1)
				
				&apos;do nothing, if the next paragraph has another Stylename
				if oNextPara.ParaStylename &lt;&gt; sStylename then
	
				&apos;the item has a higher level (is a new list)
				elseif oNextPara.NumberingLevel &gt; oPara.NumberingLevel then
					oPara = ExportEpubList(oNextPara, false)
					&apos;gaDocParagraph(oPara.ID).State = PARA_STATE_PENDING
					
				&apos;the item has the same level and could be a bullet list or an unnumbered paragraph)	
				elseif oNextPara.NumberingLevel = iNumberingLevel then
				&apos;elseif ((oPara.NumberingType &lt;&gt; 6) and (oNextPara.NumberingType = 6)) or not (oNextPara.NumberingIsNumber) then
					oPara = oNextPara
					gaDocParagraph(oPara.ID).State = PARA_STATE_PENDING
					&apos;enumerate all items with the same level
					do while oPara.NumberingLevel = iNumberingLevel
					
						&apos;the item could be an unnumbered paragraph
						if not oPara.NumberingIsNumber then 
							ExportEpubTextPortions(oPara)
							gaDocParagraph(oPara.ID).State = PARA_STATE_EXPORTED
						&apos;the item could be a bullet list	
						elseif (oPara.NumberingType = 6) and (iNumberingType &lt;&gt; 6) then	
							oPara = ExportEpubList(oPara, true)
							&apos;gaDocParagraph(oPara.ID).State = PARA_STATE_PENDING
						else
							exit do	
						end if	
						
						if oPara.State = PARA_STATE_EXPORTED then
							if (oPara.ID &lt; iParaCount) then
								oPara = gaDocParagraph(oPara.ID + 1)
							else
								exit do
							end if	
						end if
					loop			
				
				end if
				
			end if
			poPageStream.writeString(&quot;&lt;/li&gt;&quot;)
			
			if oPara.State = PARA_STATE_EXPORTED then
				if (oPara.ID &lt; iParaCount) then
					oPara = gaDocParagraph(oPara.ID + 1)
				else
					exit do
				end if
			end if	
		
		loop
		&apos;export the list closing tag (&lt;/ul&gt; or &lt;ol&gt;)
		ExportEpubListFooter(sNumberingType)
	end if 
		
	ExportEpubList = oPara
end function


sub ExportEpubListHeader(sStylename as string, sNumberingType as string, bSetClass as boolean)

	sStylename = ReplaceUmlaut(sStylename)
	sStylename = ReplaceString(sStylename, &quot;_&quot;, &quot; &quot;)
    if sNumberingType = &quot;Unordered&quot; then
    	if bSetClass then
			&apos;poPageStream.writeString(&quot;&lt;ul class=&quot;&quot;&quot; &amp; sStyle &amp; &quot;&quot;&quot; style=&quot;&quot;margin-left: 0.8em&quot;&quot;&gt;&quot;)
			poPageStream.writeString(&quot;&lt;ul class=&quot;&quot;list_&quot; &amp; sStylename &amp; &quot;&quot;&quot;&gt;&quot;)
		else
			&apos;poPageStream.writeString(&quot;&lt;ul style=&quot;&quot;margin-left: 0.8em&quot;&quot;&gt;&quot;)
			poPageStream.writeString(&quot;&lt;ul&gt;&quot;)
		end if	
    else
    	if bSetClass then
			poPageStream.writeString(&quot;&lt;ol class=&quot;&quot;list_&quot; &amp; sStylename &amp; &quot;&quot;&quot; style=&quot;&quot;list-style-type:&quot; &amp; sNumberingType &amp; &quot;;&quot;&quot;&gt;&quot;)
		else
			poPageStream.writeString(&quot;&lt;ol style=&quot;&quot;list-style-type:&quot; &amp; sNumberingType &amp; &quot;;&quot;&quot;&gt;&quot;)
		end if	
    end if  	

end sub


sub ExportEpubListFooter(sNumberingType as string)

    if sNumberingType = &quot;Unordered&quot; then
		poPageStream.writeString(&quot;&lt;/ul&gt;&quot;)
	else	
		poPageStream.writeString(&quot;&lt;/ol&gt;&quot;)
	end if	
end sub


sub ExportEpubTable(oPara as object)
dim iTableRelativeWidth as integer
dim iTableBorderWidth as integer
dim oTablePara as object
dim iActRow as long
dim iActCol as long
dim iParaCount as long
dim aParaSet() as long
dim i as long
dim sColTag as string
dim sColStyle as string

dim aTablePadding(3)
dim iTableColor as string
dim sDistances as string
dim	sPadding as string
dim sBorderWidth as string
dim sBorderColor as string
dim	sBackground as string
dim sBorder as string
dim sAlign as string
dim aMargins(3)
dim sMarginTop as string
dim sMarginBottom as string
dim sHAlign as string
dim sVAlign as string

	if oPara.TableIsWidthRelative then 
		iTableRelativeWidth = oPara.TableRelativeWidth
	elseif oPara.TableWidth &lt; oPara.PageInnerWidth then
		iTableRelativeWidth = oPara.TableWidth / oPara.PageInnerWidth * 100
	else	
		iTableRelativeWidth = 100
	end if		
	
	if oPara.TableBorderDistances &lt;&gt; &quot;&quot; then
		sDistances = GetEpubCssStringByValueSet(oPara.TableBorderDistances, &quot;px&quot;)
	end if	
	sBackground = GetEpubHexColorString(oPara.TableBackColor)
	sAlign = GetEpubHAlignString(oPara.ParaAdjust)	
	aMargins() = ArrayOutOfString(oPara.TableMargins, &quot; &quot;)
	sMarginTop = Int(CInt(aMargins(0))/25) &amp; &quot;px&quot;
	sMarginBottom = Int(CInt(aMargins(2))/25) &amp; &quot;px&quot;
	aParaSet() = GetParaSetTable(oPara.ID)		
	iParaCount = ubound(aParaSet())
	poPageStream.writeString(&quot;&lt;div style=&quot;&quot;align: &quot; &amp; sAlign &amp; &quot;;&quot;&quot;&gt;&quot; &amp; gsCR)
	poPageStream.writeString(&quot;&lt;table style=&quot;&quot;margin-top:&quot; &amp; sMarginTop &amp; &quot;; margin-bottom:&quot; &amp; sMarginBottom &amp; &quot;; background-color:&quot; &amp; sBackground &amp; &quot;; width:&quot; &amp; iTableRelativeWidth &amp; &quot;%;&quot;&quot;&gt;&quot;
	if oPara.TableCaption &lt;&gt; &quot;&quot; then
		poPageStream.writeString(&quot;&lt;caption&gt;&quot; &amp; oPara.TableCaption &amp; &quot;&lt;/caption&gt;&quot;)
	end if	

	i = 1
	do while i &lt;= iParaCount
		oTablePara = gaDocParagraph(aParaSet(i))
		if oTablePara.ParaStyleName = &quot;Table Heading&quot; then
			poPageStream.writeString(&quot;&lt;thead&gt;&lt;tr&gt;&quot;
			sColTag = &quot;th&quot;
		elseif oTablePara.ParaStyleName = &quot;Table Footer&quot; then
			poPageStream.writeString(&quot;&lt;tfoot&gt;&lt;tr&gt;&quot;
			sColTag = &quot;td&quot;
		else 	
			poPageStream.writeString(&quot;&lt;tr&gt;&quot;)
			sColTag = &quot;td&quot;
		end if	
		oTablePara = gaDocParagraph(aParaSet(i))
		iActRow = oTablePara.TableRow
		do while (i &lt;= iParaCount) and (oTablePara.TableRow = iActRow)
			iActCol = oTablePara.TableCol
			if sDistances &lt;&gt; &quot;&quot; then
				sPadding = &quot;padding:&quot; &amp; sDistances &amp; &quot;;&quot;
			end if
			if oTablePara.TableBackColor &lt;&gt; &quot;&quot; then	
				sBackground = &quot; background-color:&quot; &amp; GetEpubHexColorString(oTablePara.TableBackColor) &amp; &quot;;&quot;
			end if
			sBorder = GetEpubCssBorderString(oTablePara.TableBorderWidths, oTablePara.TableBorderStyles, oTablePara.TableBorderColors)
			sHAlign = &quot; text-align:&quot; &amp; GetEpubHAlignString(oTablePara.TableHAlign) &amp; &quot;;&quot;
			sVAlign = &quot; vertical-align:&quot; &amp; GetEpubVAlignString(oTablePara.TableVAlign) &amp; &quot;;&quot;
			sColStyle = &quot; style=&quot;&quot;&quot; &amp; sPadding &amp; sBorder &amp; sBackground &amp; sHAlign &amp; sVAlign &amp; &quot;&quot;&quot;&quot;
			poPageStream.writeString(&quot;&lt;&quot; &amp; sColTag &amp; sColStyle &amp; &quot;&gt;&quot;)
			do while (oTablePara.TableRow = iActRow) and (oTablePara.TableCol = iActCol)
				if gaDocParagraph(aParaSet(i)).State &lt;&gt; PARA_STATE_EXPORTED then
					ExportEpubParagraph(oTablePara)
					gaDocParagraph(aParaSet(i)).State = PARA_STATE_EXPORTED
				end if	
				i = i + 1
				if i &lt;= iParaCount then
					oTablePara = gaDocParagraph(aParaSet(i))	
				else
					exit do
				end if
			loop	
			poPageStream.writeString(&quot;&lt;/&quot; &amp; sColTag &amp; &quot;&gt;&quot;)
		loop
		if oTablePara.ParaStyleName = &quot;Table Heading&quot; then
			poPageStream.writeString(&quot;&lt;/tr&gt;&lt;/thead&gt;&quot;
		else
			poPageStream.writeString(&quot;&lt;/tr&gt;&quot;
		end if
	loop				
	poPageStream.writeString(&quot;&lt;/table&gt;&quot; &amp; gsCR)
	poPageStream.writeString(&quot;&lt;/div&gt;&quot; &amp; gsCR)
	&apos;set a clear element to finish right float if the table is right aligned
	&apos;if (iTableRelativeWidth &lt; 100) and (sAlign = &quot;align-right&quot;) then
	&apos;		poPageStream.writeString(&quot;&lt;div class=&quot;&quot;clear&quot;&quot;&gt;&lt;/div&gt;&quot;
	&apos;end if	
end sub


function GetEpubHAlignString(iAlign as integer) as string
	select case iAlign
		case com.sun.star.style.ParagraphAdjust.LEFT: GetEpubHAlignString = &quot;left&quot;
		case com.sun.star.style.ParagraphAdjust.CENTER: GetEpubHAlignString = &quot;center&quot;
		case com.sun.star.style.ParagraphAdjust.RIGHT: GetEpubHAlignString = &quot;right&quot;
		case else
			 GetEpubHAlignString = &quot;justify&quot;
	end select
end function


function GetEpubVAlignString(iAlign as integer) as string

	select case iAlign
		case 3: GetEpubVAlignString = &quot;bottom&quot;
		case 2: GetEpubVAlignString = &quot;center&quot;
		case else GetEpubVAlignString = &quot;top&quot;
	end select
end function


function GetEpubCssBorderString(sBorderWidths as string, sBorderStyles as string, sBorderColors as string) as string
dim aWidth(3) as long
dim dWidth as double
dim iWidth as integer
dim sWidth as string
dim aStyle(3)
dim aColor(3)
dim sString as string
const iFactor = 15

	aWidth() = ArrayOutOfString(sBorderWidths, &quot; &quot;)
	aStyle() = ArrayOutOfString(sBorderStyles, &quot; &quot;)
	aColor() = ArrayOutOfString(sBorderColors, &quot; &quot;)
	if aWidth(0) &lt;&gt; &quot;0&quot; then
		sWidth = CStr(Int(CInt(aWidth(0))/iFactor + 1)) &apos; add 1 because Int is cutting decimal places 
		sString = &quot;border-top:&quot; &amp; sWidth &amp; &quot;px &quot; &amp; GetEpubCssBorderStyle(aStyle(0)) &amp; &quot; &quot; &amp; GetEpubHexColorString(aColor(0)) &amp; &quot;; &quot;
	end if	
	if aWidth(1) &lt;&gt; &quot;0&quot; then
		sWidth = CStr(Int(CInt(aWidth(1))/iFactor + 1)) &apos; add 1 because Int is cutting decimal places 
		sString = sString &amp; &quot;border-right:&quot; &amp; sWidth &amp; &quot;px &quot; &amp; GetEpubCssBorderStyle(aStyle(1)) &amp; &quot; &quot; &amp; GetEpubHexColorString(aColor(1)) &amp; &quot;; &quot;
	end if	
	if aWidth(2) &lt;&gt; &quot;0&quot; then
		sWidth = CStr(Int(CInt(aWidth(2))/iFactor + 1)) &apos; add 1 because Int is cutting decimal places 
		sString = sString &amp; &quot;border-bottom:&quot; &amp; sWidth &amp; &quot;px &quot; &amp; GetEpubCssBorderStyle(aStyle(2)) &amp; &quot; &quot; &amp; GetEpubHexColorString(aColor(2)) &amp; &quot;; &quot;
	end if	
	if aWidth(3) &lt;&gt; &quot;0&quot; then
		sWidth = CStr(Int(CInt(aWidth(3))/iFactor + 1)) &apos; add 1 because Int is cutting decimal places 
		sString = sString &amp; &quot;border-left:&quot; &amp; sWidth &amp; &quot;px &quot; &amp; GetEpubCssBorderStyle(aStyle(3)) &amp; &quot; &quot; &amp; GetEpubHexColorString(aColor(3)) &amp; &quot;; &quot;
	end if	
	GetEpubCssBorderString = sString	
end function


function GetEpubCssBorderStyle(iStyle as integer) as string
	select case iStyle
		case 0  : GetEpubCssBorderStyle = &quot;solid&quot;
		case 1  : GetEpubCssBorderStyle = &quot;dotted&quot;
		case 2  : GetEpubCssBorderStyle = &quot;dashed&quot;
		case 10 : GetEpubCssBorderStyle = &quot;outset&quot;
		case 11 : GetEpubCssBorderStyle = &quot;inset&quot;
		case else
			GetEpubCssBorderStyle = &quot;double&quot;
	end select	
end function


sub ExportEpubFrameStart(oPara as object)
dim sFrameType as string
dim sFrameCaption as string
dim sFrameStylename as string
dim i as long
dim IsFirstAccordion as boolean


	if oPara.FrameStyleName = &quot;ILIAS_FileList&quot; then
		poPageStream.writeString(&quot;&lt;section class=&quot;&quot;file_list&quot;&quot;&gt;&quot; &amp; gsCR)

	elseif oPara.FrameStyleName = &quot;ILIAS_Accordion_Vertical&quot; then
		poPageStream.writeString(&quot;&lt;section class=&quot;&quot;accordion vertical&quot;&quot;&gt;&quot; &amp; gsCR)

	elseif oPara.FrameStyleName = &quot;ILIAS_Accordion_Horizontal&quot; then
		poPageStream.writeString(&quot;&lt;section class=&quot;&quot;accordion horizontal&quot;&quot;&gt;&quot; &amp; gsCR)

	elseif oPara.FrameStyleName = &quot;ILIAS_Accordion_Element&quot; then
		poPageStream.writeString(&quot;&lt;section class=&quot;&quot;accordion element&quot;&quot;&gt;&quot; &amp; gsCR)
		
	else
		sFrameStylename = ReplaceUmlaut(oPara.FrameStylename)
		sFrameStylename = ReplaceString(sFrameStylename, &quot;_&quot;, &quot; &quot;)
		poPageStream.writeString(&quot;&lt;section class=&quot;&quot;&quot; &amp; sFrameStylename &amp; &quot;&quot;&quot;&gt;&quot; &amp; gsCR)
	end if
end sub


sub ExportEpubFrameStop(oPara as object)
dim sFrameType as string
dim i as long
dim IsLastAccordion as boolean
dim iParaCount as long
dim sFrameCaption as string

	poPageStream.writeString(&quot;&lt;/section&gt;&quot; &amp; gsCR)
end sub


sub ExportEpubFileList(oPara as object)
dim sExportString as string
dim sFileName as string
dim aPortionSet()
dim oPortionRec as object
dim iCount as integer
dim i as integer

	&apos;step 1: get the text portions of the paragraph
	sExportString = &quot;&quot; 
	aPortionSet() = GetTextPortionSet(oPara.ID)

	&apos;it could be the caption of the FileList
	if oPara.ParaStyleName = &quot;ILIAS_FileList_Caption&quot; then
		iCount = ubound(aPortionSet())
		for i = 1 to iCount
			oPortionRec = gaDocTextPortion(aPortionSet(i))
			sExportString = sExportString &amp; oPortionRec.GetString
		next i
		WriteToStream(goExportXML, &quot;&lt;Title Language=&quot; &amp; gsLang &amp; &quot;&gt;&quot; &amp; sExportString &amp; &quot;&lt;/Title&gt;&quot;)
			
	elseif oPara.ParaStyleName = &quot;ILIAS_FileList_Element&quot; then
		oPortionRec = gaDocTextPortion(aPortionSet(1))
		sExportString = FileNameOutOfPath(oPortionRec.HyperLinkURL)
		sFilename = GetCleanFilename(ConvertFromURL(sExportString))
		WriteToStream(goExportXML, &quot;&lt;FileItem PCID=&quot;&quot;&quot; &amp; oPara.ID &amp; &quot;&quot;&quot;&gt;&quot; 
		WriteToStream(goExportXML, &quot;&lt;Identifier Catalog=&quot;&quot;ILIAS&quot;&quot; Entry=&quot;&quot;il_0_file_&quot; &amp; oPara.ID &amp; &quot;&quot;&quot;/&gt;&quot;
		WriteToStream(goExportXML, &quot;&lt;Location Type=&quot;&quot;LocalFile&quot;&quot;&gt;&quot; &amp; sFilename &amp; &quot;&lt;/Location&gt;&quot;
		WriteToStream(goExportXML, &quot;&lt;Format&gt;application/&quot; &amp; GetFileNameExtension(sExportString) &amp; &quot;&lt;/Format&gt;&quot;
		WriteToStream(goExportXML, &quot;&lt;/FileItem&gt;&quot; 
	end if	
end sub


sub ExportEpubFootnotes
dim oStream as object 

	&apos;Export footnotes in a separate file if there are any
	if gsFootnotes &lt;&gt; &quot;&quot; then
		oStream = GetExportFileObject(gsExportZipDir &amp; &quot;/EPUB/xhtml/footnotes.xhtml&quot;)
		oStream.writeString(&quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;utf-8&quot;&quot;?&gt;&quot; &amp; gsCR)
		oStream.writeString(&quot;&lt;html xml:lang=&quot;&quot;&quot; &amp; gsLang &amp; &quot;&quot;&quot; lang=&quot;&quot;&quot; &amp; gsLang &amp; _
		 &quot;&quot;&quot; xmlns=&quot;&quot;http://www.w3.org/1999/xhtml&quot;&quot; xmlns:epub=&quot;&quot;http://www.idpf.org/2007/ops&quot;&quot;&gt;&quot; &amp; gsCR)
		oStream.writeString(&quot;&lt;head&gt;&quot; &amp; gsCR)
		oStream.writeString(&quot;&lt;title&gt;Footnotes&lt;/title&gt;&quot; &amp; gsCR)
		oStream.writeString(&quot;&lt;link rel=&quot;&quot;stylesheet&quot;&quot; type=&quot;&quot;text/css&quot;&quot; href=&quot;&quot;css/style.css&quot;&quot;/&gt;&quot; &amp; gsCR)
		oStream.writeString(&quot;&lt;meta charset=&quot;&quot;utf-8&quot;&quot;/&gt;&quot; &amp; gsCR)
		oStream.writeString(&quot;&lt;/head&gt;&quot; &amp; gsCR)
		oStream.writeString(&quot;&lt;body id=&quot;&quot;footnotes&quot;&quot; epub:type=&quot;&quot;frontmatter&quot;&quot;&gt;&quot; &amp; gsCR)

		&apos;Export the footnotes
		oStream.writeString(gsFootnotes)

		&apos;Export the body and html closing tags
		oStream.writeString(&quot;&lt;/body&gt;&quot; &amp; gsCR)
		oStream.writeString(&quot;&lt;/html&gt;&quot; &amp; gsCR)
		&apos;Close the document
		oStream.closeOutput
	end if 						
end sub


function GetEpubFootnoteExportString(oPortionRec as object) as string
dim aList()
dim sResult as string
dim iPos as integer
dim sURL as string
dim sLink as string
dim i as integer
dim sId as string
dim sRef as string
dim sFootnote as string

	aList = ArrayOutOfString(oPortionRec.Footnote, &quot; &quot;)
	sResult = &quot;&quot;
	for i = 0 to ubound(aList())    
		if (left(aList(i),4) = &quot;http&quot;) or (left(aList(i),3) = &quot;www&quot;) then  &apos;this portion is a hyperlink
			sURL = ReplaceString(aList(i), &quot;&amp;amp;amp;&quot;, &quot;&amp;&quot;  )
			sLink = ReplaceSymbolsFootnote(aList(i))
			sResult = sResult &amp; &quot;&lt;a href=&quot;&quot;&quot; &amp; sURL &amp; &quot;&quot;&quot; target=&quot;&quot;_blank&quot;&quot;&gt;&quot; &amp; sLink &amp; &quot;&lt;/a&gt;&quot; &amp; &quot; &quot;
		else
			sResult = sResult &amp; ReplaceSymbols(aList(i)) &amp; &quot; &quot;
		end if  
	next i
	sId = lTrim(rTrim(oPortionRec.GetString))
	sRef =  &quot;&lt;a class=&quot;&quot;footnote&quot;&quot; epub:type=&quot;&quot;noteref&quot;&quot; id=&quot;&quot;noteref&quot; &amp; sID &amp; &quot;&quot;&quot; href=&quot;&quot;#fn&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot; &amp; sID &amp; &quot;&lt;/a&gt;&quot;
	&apos;&apos;when readers will be able to show aside elements as tooltip
	&apos;sFootnote = &quot;&lt;aside epub:type=&quot;&quot;footnote&quot;&quot; id=&quot;&quot;fn&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&quot; &amp; sResult &amp; &quot;&lt;/aside&gt;&quot;
	&apos;GetEpubFootnoteExportString = sRef &amp; sFootnote

	&apos;meanwhile:
	gsFootnotes = gsFootnotes &amp; &quot;&lt;aside epub:type=&quot;&quot;footnote&quot;&quot; id=&quot;&quot;fn&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;&lt;p&gt;&lt;span class=&quot;&quot;fn-id&quot;&quot;&gt;&quot; &amp; sId &amp; &quot;&lt;/span&gt;&quot;_
							  &amp; sResult &amp; &quot;&lt;a class=&quot;&quot;back&quot;&quot; href=&quot;&quot;#noteref&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;↑&lt;/a&gt;&lt;/p&gt;&lt;/aside&gt;&quot;
							  &apos;&amp; sResult &amp; &quot;&lt;a id=&quot;&quot;fn-&quot; &amp; sID &amp; &quot;&quot;&quot; class=&quot;&quot;back&quot;&quot; href=&quot;&quot;#noteref&quot; &amp; sID &amp; &quot;&quot;&quot;&gt;↑&lt;/a&gt;&lt;/p&gt;&lt;/aside&gt;&quot;
	GetEpubFootnoteExportString = sRef

end function


function GetEpubParagraphString(iParaID as long) as string
dim i as long
dim iPortionCount as long
dim sString as string
dim oPara as object

	iPortionCount = ubound(gaDocTextPortion())
	for i = 1 to iPortionCount
		oPara = gaDocTextPortion(i)
		if gaDocTextPortion(i).ParaID = iParaID then
			sString = sString &amp; gaDocTextPortion(i).GetString
		elseif gaDocTextPortion(i).ParaID &gt; iParaID then
			exit for
		end if
	next i
	GetParagraphString = sString
end function


function GetEpubMediaTag(oMedia as object) as string
dim sTag as string
dim sImgFilename as string
dim iWidth as integer
dim sWidth as string
dim sHeight as string
dim oControl as object
dim iMode as integer
dim sStyle as string
dim sAlt as string

	&apos;if oMedia.MediaName = &quot;Grafik15&quot; then
	&apos;	oMedia.MediaName = oMedia.MediaName
	&apos;end if

	sImgFilename = &quot;images/&quot; &amp; FileNameOutOfPath(gaExtMedia(oMedia.ExtMediaID).FileName)
	&apos;the figure of centered graphics should have a fixed width, so a left aligned captions do have the same position
	if oMedia.HoriOrient = 2 then &apos;the graphic is centered
		sWidth = CStr(Int(oMedia.Width / 26.443)) &amp; &quot;px;&quot;
		sStyle = &quot; style=&quot;&quot;width:&quot; &amp; sWidth
		sTag = &quot;&lt;figure class=&quot;&quot;image_container &quot; &amp; GetEpubAlignString(oMedia) &amp; &quot;&quot;&quot;&quot; &amp; sStyle &amp; &quot;&quot;&quot;&gt;&quot;
	else	
		sTag = &quot;&lt;figure class=&quot;&quot;image_container &quot; &amp; GetEpubAlignString(oMedia) &amp; &quot;&quot;&quot;&gt;&quot;
	end if
	
	if oMedia.Caption &lt;&gt; &quot;&quot; then
		sAlt = oMedia.Caption
	else
		sAlt = oMedia.MediaName
	end if	

	oControl = goDlgExport.getControl(&quot;listScaleGraphics&quot;)
	iMode = oControl.SelectedItemPos
	select case iMode
		case 0:
			sTag = sTag &amp; &quot;&lt;img src=&quot;&quot;&quot; &amp; sImgFilename &amp; &quot;&quot;&quot; alt=&quot;&quot;&quot; &amp; sAlt &amp; &quot;&quot;&quot;/&gt;&quot;
		case 1:
			sWidth = CStr(Int(oMedia.Width / 26.443)) &amp; &quot;px;&quot;
			sStyle = &quot;&quot;&quot; style=&quot;&quot;height:auto; width:&quot; &amp; sWidth &amp; &quot;&quot;&quot;&quot;
			sTag = sTag &amp; &quot;&lt;img src=&quot;&quot;&quot; &amp; sImgFilename &amp; &quot;&quot;&quot; alt=&quot;&quot;&quot; &amp; sAlt &amp; sStyle &amp; &quot;/&gt;&quot;
		case 2:
			sHeight = CStr(Int(oMedia.Height / 26.459)) &amp; &quot;px;&quot;
			sStyle = &quot;&quot;&quot; style=&quot;&quot;width:auto; height:&quot; &amp; sHeight &amp; &quot;&quot;&quot;&quot;
			sTag = sTag &amp; &quot;&lt;img src=&quot;&quot;&quot; &amp; sImgFilename &amp; &quot;&quot;&quot; alt=&quot;&quot;&quot; &amp; sAlt &amp; sStyle &amp; &quot;/&gt;&quot;
		case 3:
			sWidth = CStr(Int(oMedia.Width / 26.443)) &amp; &quot;px;&quot;
			sHeight = CStr(Int(oMedia.Height / 26.459)) &amp; &quot;px;&quot;
			sStyle = &quot;&quot;&quot; style=&quot;&quot;width:auto; height:&quot; &amp; sHeight &amp; &quot;&quot;&quot;&quot;
			sTag = sTag &amp; &quot;&lt;img src=&quot;&quot;&quot; &amp; sImgFilename &amp; &quot;&quot;&quot; alt=&quot;&quot;&quot; &amp; sAlt &amp; sStyle &amp; &quot;/&gt;&quot;
	end select
	
	&apos;if iWidth &gt; Int(goDlgExport.Model.txtMaxImageWidth.Text) and oMedia.HoriOrient = com.sun.star.text.HoriOrientation.CENTER then
	&apos;	sWidth = &quot;100%;&quot;
	&apos;else	
	&apos;	sWidth = CStr(iWidth) &amp; &quot;px;&quot;
	&apos;end if	
	&apos;sHeight = CStr(Int(oMedia.Height / 26.459))
	&apos;sTag = &quot;&lt;figure class=&quot;&quot;image_container &quot; &amp; GetEpubAlignString(oMedia) &amp; &quot;&quot;&quot; width=&quot;&quot;&quot; &amp; sWidth &amp; &quot;&quot;&quot; height=&quot;&quot;&quot; &amp; sHeight &amp; &quot;&quot;&quot;&gt;&quot;
	if oMedia.Caption &lt;&gt; &quot;&quot; then
		sTag = sTag &amp; &quot;&lt;figcaption class=&quot;&quot;para_Illustration&quot;&quot;&gt;&quot; &amp; oMedia.Caption &amp; &quot;&lt;/figcaption&gt;&quot;
	end if	
	sTag = sTag &amp; &quot;&lt;/figure&gt;&quot;
	GetEpubMediaTag = sTag
end function


function GetEpubTextPortionExportString(oPortion as object) as string   
dim sNumberingStyleName As String
dim sResult as string
dim vLink as string
dim vURL as string
dim vPos as integer
dim lCharColor as long
dim sTextFarbe as string
dim vParaStyle as string
dim sCharStyle as string
dim vEsc as integer
dim aList()
dim i as integer
dim sClass as string
dim sAnchor as string
dim sTempStr as string
dim iAsc as integer
dim sType as string
dim sStylename as string

	sResult = ReplaceSymbolsEpub(oPortion.GetString)
	if sResult &lt;&gt; &quot;&quot; then
		&apos;first check if paragraph is ILIAS Code formatted
		vParaStyle = left(oPortion.ParaStyleName, 10)
		if oPortion.HyperLinkURL &lt;&gt; &quot;&quot; then
		
			&apos;it could be an external Link
			if left(oPortion.HyperLinkURL, 4) = &quot;http&quot; then
				vURL = ReplaceSymbols(oPortion.HyperLinkURL)
				vLink = ReplaceSymbols(sResult)
				sResult = &quot;&lt;a class=&quot;&quot;extern&quot;&quot; href=&quot;&quot;&quot; &amp; vURL &amp; &quot;&quot;&quot;&gt;&quot; &amp; vLink &amp; &quot;&lt;/a&gt;&quot;
				
			&apos;it could be an internal link	
			elseif left(oPortion.CharStyleName, 10) = &quot;ILIAS Link&quot; then
				dim sLink as string
				sLink = mid(oPortion.HyperLinkURL, 2)
				sType = mid(oPortion.CharStyleName, 12)
				sResult = &quot;&lt;a class=&quot;&quot;intern&quot;&quot; href=&quot;&quot;&quot; &amp; sLink &amp; &quot;&quot;&quot;&gt;&quot; &amp; oPortion.GetString &amp; &quot;&lt;/a&gt;&quot;
				
			&apos;it could be an internal link to a bookmark
			elseif left(oPortion.HyperLinkURL, 1) = &quot;#&quot; then
				dim sBookmark as string
				dim iChapterID as long
				dim oBookmarkPortion as object
				sBookmark = mid(oPortion.HyperLinkURL, 2)
				oBookmarkPortion = GetTextPortionByBookmark(sBookmark)
				if not isnull (oBookmarkPortion) then
					iChapterId = gaDocChapter(gaDocParagraph(oBookmarkPortion.ParaID).ChapterID).PageID
					sResult = &quot;&lt;a href=&quot;&quot;page-&quot; &amp; iChapterID &amp; &quot;.xhtml#&quot; &amp; sBookmark &amp; &quot;&quot;&quot;&gt;&quot; &amp; oPortion.GetString &amp; &quot;&lt;/a&gt;&quot;
				end if    
			end if    
		else
			&apos;check if textportion is a list
			sNumberingStyleName = oPortion.NumberingStyleName
			if sNumberingStyleName &lt;&gt; &quot;&quot; then  &apos;the paragraph is a list
				vPos = InStr(sResult, &quot;.&quot;)
				if vPos &gt; 0 then
					if IsNumeric(Left(sResult, vPos - 1)) then
						sResult = Mid(sResult,vPos + 1)
					end if
				end if	
			&apos;the TextPortion could be a list formatted as a paragraph
			elseif gaDocParagraph(oPortion.ParaID).ParaFirstLineIndent &lt; 0 then
				aList = ArrayOutOfString(sResult, chr(9))
				if uBound(aList()) &gt; 0 then
					if len(aList(0)) &lt;= 4 then						
						sStylename = ReplaceUmlaut(oPortion.ParaStyleName)
						sStylename = ReplaceString(sStylename, &quot;_&quot;, &quot; &quot;)
						sClass = &quot;label_&quot; &amp; sStylename
						sResult = &quot;&lt;span class=&quot;&quot;&quot; &amp; sClass &amp; &quot;&quot;&quot;&gt;&quot; &amp; aList(0) &amp; &quot;&lt;/span&gt;&quot;
						for i = 1 to ubound(aList)
							sResult = sResult &amp; aList(i)
						next i
					end if	
				end if	
			end if
			
			&apos;check, if the text portion is a formatting mark
			&apos;if len(oPortion.GetString) = 1 then
			&apos;	iASC = asc(oPortion.GetString)
			&apos;end if
		
		&apos;end if

	
			&apos;only reflect hard formatted text portions, if the character style is standard
			if oPortion.CharStyleName = &quot;&quot; then
				if oPortion.CharWeight = com.sun.star.awt.FontWeight.BOLD then  &apos;this portion is formatted in bold
					select case sResult
						case gsTab &apos; do nothing
						case &quot; &quot; &apos; do nothing
						case else 
							sResult = &quot;&lt;b&gt;&quot; &amp; sResult &amp; &quot;&lt;/b&gt;&quot; 
					end select	
				end if    
		
				&apos;check subscript and superscript formatting
				vEsc = oPortion.CharEscapement
				if oPortion.CharEscapement &lt; 0 then  &apos;this portion is formatted in subscript
					sResult = &quot;&lt;sub&gt;&lt;font size=&quot;&quot;-2&quot;&quot;&gt;&quot; &amp; sResult &amp; &quot;&lt;/font&gt;&lt;/sub&gt;&quot; 
				elseif oPortion.CharEscapement &gt; 0 then  &apos;this portion is formatted in superscript
					sResult = &quot;&lt;sup&gt;&lt;font size=&quot;&quot;-2&quot;&quot;&gt;&quot; &amp; sResult &amp; &quot;&lt;/font&gt;&lt;/sup&gt;&quot; 
				end if
		
				if (oPortion.CharPosture = com.sun.star.awt.FontSlant.ITALIC) then  &apos;this portion is formatted in italic
					sResult = &quot;&lt;i&gt;&quot; &amp; sResult &amp; &quot;&lt;/i&gt;&quot;  
				end if
		
				&apos;check if the textportion is underlined
				if (oPortion.CharUnderline &gt; 0) then
					sResult = &quot;&lt;u&gt;&quot; &amp; sResult &amp; &quot;&lt;/u&gt;&quot;	
				end if         	

				if oPortion.CharFontPitch =  com.sun.star.awt.FontPitch.FIXED then
			        sResult = &quot;&lt;code&gt;&quot; &amp; sResult &amp; &quot;&lt;/code&gt;&quot; 
				end if

				&apos;check textcolor other than black
				lCharColor = oPortion.CharColor
				if (lCharColor &lt;&gt; -1) and (oPortion.HyperLinkURL = &quot;&quot;) and (oPortion.CharStyleName = &quot;&quot;) _
				and (oPortion.ParaStylename &lt;&gt; gsMarginaleLeftStyle) and (oPortion.ParaStylename &lt;&gt; gsMarginaleRightStyle) then
					sTextFarbe = GetEpubHexColorString(lCharColor)
					sResult = &quot;&lt;span style=&quot;&quot;color: &quot; &amp; sTextFarbe &amp; &quot;&quot;&quot;&gt;&quot; &amp; sResult &amp; &quot;&lt;/span&gt;&quot;
				end if		

			else
				if oPortion.CharStyleName &lt;&gt; &quot;&quot; then
					sCharStyle = ReplaceUmlaut(oPortion.CharStyleName)
					sCharStyle = ReplaceString(sCharStyle, &quot;_&quot;, &quot; &quot;)
					sResult = &quot;&lt;span class=&quot;&quot;&quot; &amp; sCharStyle &amp; &quot;&quot;&quot;&gt;&quot; &amp; sResult &amp; &quot;&lt;/span&gt;&quot;
				end if	
			end if  

			if (oPortion.ParaStyleName = gsMarginaleLeftStyle) or (oPortion.ParaStyleName = gsMarginaleRightStyle) then
				sAnchor = ReplaceString(oPortion.GetString, &quot;_&quot;, &quot;.&quot;)
				sAnchor = ReplaceString(sAnchor, &quot;_&quot;, &quot; &quot;)
				sResult = &quot;&lt;Anchor Name=&quot;&quot;a&quot; &amp; sAnchor &amp; &quot;&quot;&quot;&gt;&quot; &amp; sResult &amp; &quot;&lt;/Anchor&gt;&quot;
			end if

		end if	
	else  &apos;the paragraph is only a return
		sResult = &quot;&lt;br/&gt;&lt;br/&gt;&quot;
	end if
	GetEpubTextPortionExportString = sResult
end function


function GetEpubBookmarkExportString(oPortionRec as object) as string
dim sAnchor as string
dim sString as string

	sAnchor = ReplaceString(oPortionRec.Bookmark, &quot;_&quot;, &quot; &quot;)
	sString = oPortionRec.GetString 
	GetEpubBookmarkExportString = &quot;&lt;span id=&quot;&quot;&quot; &amp; sAnchor &amp; &quot;&quot;&quot;&gt;&quot; &amp; sString &amp; &quot;&lt;/span&gt;&quot;

end function


function GetEpubTextFieldExportString(oPortionRec as object) as string
dim sResult as string
dim sTarget as string
dim sChapter as string
dim sText as string
dim sRef as string
dim i as integer
dim lCharColor as long
dim sTextColor as string
dim iNumberOfNull as integer

	sTarget = &quot;&quot;
	sResult = oPortionRec.GetString
	if sResult &lt;&gt; &quot;&quot; then
		&apos;first get the Paragraph to which is referenced
		for i = 1 to ubound(gaDocChapter())
			if gaDocChapter(i).ReferenceMark = oPortionRec.TextField then
				sChapter = &quot;#chapter-&quot; &amp; gaDocChapter(gaDocParagraph(i).ID).ID
				sTarget = &quot;page-&quot; &amp; gaDocChapter(gaDocParagraph(i).ID).PageID &amp; &quot;.xhtml&quot; &amp; sChapter
				exit for
			end if
		next i
  		
  		if sTarget &lt;&gt; &quot;&quot; then
			sText = ReplaceSymbols(oPortionRec.GetString)
			if oPortionRec.CharStyleName &lt;&gt; &quot;&quot; then
				sResult = &quot;&lt;a class=&quot;&quot;&quot; &amp; oPortionRec.CharStyleName &amp; &quot;&quot;&quot; href=&quot;&quot;&quot; &amp; sTarget &amp; &quot;&quot;&quot; title=&quot;&quot;&quot; &amp; sText &amp; &quot;&quot;&quot;&gt;&quot; &amp; sText &amp; &quot;&lt;/a&gt;&quot;
			else
				sResult = &quot;&lt;a href=&quot;&quot;&quot; &amp; sTarget &amp; &quot;&quot;&quot; title=&quot;&quot;&quot; &amp; sText &amp; &quot;&quot;&quot;&gt;&quot; &amp; sText &amp; &quot;&lt;/a&gt;&quot;
			end if	
		else	
			sResult = oPortionRec.GetString
		end if

		if oPortionRec.CharWeight = com.sun.star.awt.FontWeight.BOLD then  &apos;this portion is formatted in bold
			if len(sResult) &gt; 1 then
		        sResult = &quot;&lt;b&gt;&quot; &amp; sResult &amp; &quot;&lt;/b&gt;&quot; 
		    elseif asc(sResult) &lt;&gt; 9 and sResult &lt;&gt; &quot; &quot; then
		        sResult = &quot;&lt;b&gt;&quot; &amp; sResult &amp; &quot;&lt;/b&gt;&quot; 
		    end if    
		endif    
    
      &apos;check textcolor other than black
      lCharColor = oPortionRec.CharColor
      if lCharColor &lt;&gt; -1 AND oPortionRec.HyperLinkURL = &quot;&quot; AND oPortionRec.CharStyleName &lt;&gt; &quot;ILIAS Zitat&quot; then
        sTextColor = GetEpubHexColorString(lCharColor)
        sResult = &quot;&lt;font color=&quot;&quot;&quot; &amp; sTextColor &amp; &quot;&quot;&quot;&gt;&quot; &amp; sResult &amp; &quot;&lt;/font&gt;&quot;
      endif
    
      &apos;check subscript and superscript formatting
      if oPortionRec.CharEscapement &lt; 0 THEN  &apos;this portion is formatted in subscript
        sResult = &quot;&lt;sub&gt;&lt;font size=&quot;&quot;-2&quot;&quot;&gt;&quot; &amp; sResult &amp; &quot;&lt;/sub&gt;&lt;/font&gt;&quot; 
      elseif oPortionRec.CharEscapement &gt; 0 THEN  &apos;this portion is formatted in superscript
        sResult = &quot;&lt;sup&gt;&lt;font size=&quot;&quot;-2&quot;&quot;&gt;&quot; &amp; sResult &amp; &quot;&lt;/sup&gt;&lt;/font&gt;&quot; 
      endif

		if oPortionRec.CharFontPitch =  com.sun.star.awt.FontPitch.FIXED then
	        sResult = &quot;&lt;code&gt;&quot; &amp; sResult &amp; &quot;&lt;/code&gt;&quot; 
		end if
		
		if oPortionRec.CharPosture = com.sun.star.awt.FontSlant.ITALIC THEN  &apos;this portion is formatted in italic
	        sResult = &quot;&lt;i&gt;&quot; &amp; sResult &amp; &quot;&lt;/i&gt;&quot;  
		endif
	end if	
      
	GetEpubTextFieldExportString = sResult
end function 


function GetEpubMediaLayoutString(oMedia as object) as string
dim iWidth as integer
dim iHeight as integer
dim iMediaType as integer
dim sExtension as string

	iMediaType = gaExtMedia(oMedia.ExtMediaID).MediaType
	
	if iMediaType = MEDIA_TYPE_MEDIA then
		sExtension = GetFileNameExtension(oMedia.MediaURL)
		select case sExtension
			case &quot;mp3&quot;
				iWidth = 200
				iHeight = 20
			case else	
				if oMedia.Width &gt; 200 then
					iWidth = oMedia.Width
				else
					iWidth = 200
				end if
				if oMedia.Height &gt; 200 then
					iHeight = oMedia.Height
				else
					iHeight = 200
				end if	
		end select		
		GetEpubMediaLayoutString = &quot;Width=&quot;&quot;&quot; &amp; iWidth &amp; &quot;&quot;&quot; Height=&quot;&quot;&quot; &amp; iHeight &amp; &quot;&quot;&quot;&quot;

	&apos;for graphics and embbeded elements
	else
		if oMedia.Width &gt; 0 then
			iWidth = CStr(Int(oMedia.Width / 26.459))
			iHeight = CStr(Int(oMedia.Height / 26.459))
			GetepubMediaLayoutString = &quot;Width=&quot;&quot;&quot; &amp; iWidth &amp; &quot;&quot;&quot; Height=&quot;&quot;&quot; &amp; iHeight &amp; &quot;&quot;&quot;&quot;
		else
			GetEpubMediaLayoutString = &quot;&quot;
		end if  
	end if			
end function


function GetEpubAlignString(oMedia as object)

	&apos;check the horizontal orientation and wrap mode
	&apos; if (oMedia.HoriOrient = com.sun.star.text.HoriOrientation.RIGHT) AND _
	&apos;	(oMedia.TextWrap = com.sun.star.text.WrapTextMode.LEFT) then
	if oMedia.TextWrap = com.sun.star.text.WrapTextMode.LEFT then
		GetEpubAlignString = &quot;right-float&quot;
		
	&apos;elseif (oMedia.HoriOrient = com.sun.star.text.HoriOrientation.LEFT) AND _
	&apos;	(oMedia.TextWrap = com.sun.star.text.WrapTextMode.RIGHT) then
	elseif oMedia.TextWrap = com.sun.star.text.WrapTextMode.RIGHT then
		GetEpubAlignString = &quot;left-float&quot;
	
	&apos;nothing of that, so the graphic is aligned according ParaAdjust
	elseif oMedia.ParaAdjust = com.sun.star.style.ParagraphAdjust.LEFT then
		GetEpubAlignString = &quot;left-align&quot;
		
	elseif oMedia.ParaAdjust = com.sun.star.style.ParagraphAdjust.RIGHT then
		GetEpubAlignString = &quot;right-align&quot;
	else
		GetEpubAlignString = &quot;center&quot;
	end if
		
end function


function GetEpubPageAlias(piPos as integer) as string
dim vStr as string

	vStr = CStr(Ubound(gaHeadIdent()))
	vStr = &quot;&quot;&quot;page-&quot; &amp; CStr(piPos) &amp; &quot;&quot;&quot;&quot;
	GetPageAlias = vStr
end function


sub ExportEpubMetadata(psEntry, psTitle, psDescription as string, paKeywords(), bClose as boolean)
dim vItem as string
dim i as integer
dim vAnz as integer

  WriteToStream(goExportXML, &quot;&lt;MetaData&gt;&quot;)
  WriteToStream(goExportXML, GetTag(&quot;General&quot;, &quot;Structure=&quot; &amp; gsStru, &quot;&quot;, false))
  WriteToStream(goExportXML, GetTag(&quot;Identifier&quot;, &quot;Catalog=&quot; &amp; gsCata &amp; &quot; &quot; &amp; &quot;Entry=&quot; &amp; psEntry, &quot;&quot;, true)) 
  WriteToStream(goExportXML, GetTag(&quot;Title&quot;,&quot;Language=&quot; &amp; gsLang, psTitle, true))
  WriteToStream(goExportXML, &quot;&lt;Language Language=&quot; &amp; gsLang &amp; &quot;/&gt;&quot;)
  WriteToStream(goExportXML, GetTag(&quot;Description&quot;,&quot;Language=&quot; &amp; gsLang, psDescription, true))
  vAnz = Ubound(paKeywords())
  if vAnz &lt; 1 then
    WriteToStream(goExportXML, GetTag(&quot;Keyword&quot;,&quot;Language=&quot; &amp; gsLang, &quot;&quot;, true))
  else
    for i = 0 to vAnz
      vItem = LTrim(RTrim(paKeywords(i)))
      WriteToStream(goExportXML, GetTag(&quot;Keyword&quot;,&quot;Language=&quot; &amp; gsLang, vItem, true))
    next i
  end if  
  WriteToStream(goExportXML, &quot;&lt;/General&gt;&quot;)
  if bClose then WriteToStream(goExportXML, &quot;&lt;/MetaData&gt;&quot;)
end sub


sub ExportEpubMedia
dim iCount as integer
dim i as integer
dim sTitle as string
dim sDescription as string
dim sFilename as string
dim sIdent as string
dim aKeywords(0)
dim sLayout as string
dim sAlign as string
dim sExtension as string
dim sImageType as string
dim iMediaType as integer
dim iPos as integer

	iPos = 0
	iCount = ubound(gaDocMedia())
	for i = 1 to iCount
		if gaDocMedia(i).IsInUse then
			iPos = iPos + 1			
			iMediaType = gaExtMedia(gaDocMedia(i).ExtMediaID).MediaType
			
			&apos;the media is an image
			if iMediaType = MEDIA_TYPE_IMAGE then			
				sDescription = gaDocMedia(i).Title
				sTitle = gaDocMedia(i).MediaName
				sFileName = FileNameOutOfPath(gaExtMedia(gaDocMedia(i).ExtMediaID).FileName)
				sIdent = &quot;&quot;&quot;il_0_mob_&quot; &amp; CStr(i) &amp; &quot;&quot;&quot;&quot;
				if gbOptNoScaleGraphics then
					sLayout = &quot;&quot;
				else
					sLayout = GetEpubMediaLayoutString(gaDocMedia(i))
				end if  
				sAlign = &quot;HorizontalAlign=&quot; &amp; GetIliasAlignString(gaDocMedia(i))
				sImageType = GetMediaTypeFromFilename(sFilename) 

				WriteToStream(goExportXML, &quot;&lt;MediaObject&gt;&quot;)
				ExportMetadata(sIdent, sTitle, sDescription, aKeywords(), true)			
				WriteToStream(goExportXML, &quot;&lt;MediaItem Purpose=&quot;&quot;Standard&quot;&quot;&gt;&quot;)
				WriteToStream(goExportXML, GetTag(&quot;Location&quot;,&quot;Type=&quot;&quot;LocalFile&quot;&quot;&quot;, sFileName, true))
				WriteToStream(goExportXML, &quot;&lt;Format&gt;&quot; &amp; sImageType &amp; &quot;&lt;/Format&gt;&quot;)
				WriteToStream(goExportXML, GetTag(&quot;Layout&quot;, sLayout &amp; &quot; &quot; &amp; sAlign, &quot;&quot;, true))
				WriteToStream(goExportXML, &quot;&lt;/MediaItem&gt;&quot;)
				WriteToStream(goExportXML, &quot;&lt;MediaItem Purpose=&quot;&quot;Fullscreen&quot;&quot;&gt;&quot;)
				WriteToStream(goExportXML, GetTag(&quot;Location&quot;,&quot;Type=&quot;&quot;LocalFile&quot;&quot;&quot;, sFileName, true))
				WriteToStream(goExportXML, &quot;&lt;Format&gt;&quot; &amp; sImageType &amp; &quot;&lt;/Format&gt;&quot;)
				WriteToStream(goExportXML, GetTag(&quot;Layout &quot;, sAlign, &quot;&quot;, true))
				WriteToStream(goExportXML, &quot;&lt;/MediaItem&gt;&quot;)
				WriteToStream(goExportXML, &quot;&lt;/MediaObject&gt;&quot;)  

			&apos;the media is a sound, video or flash element
			else
				WriteToStream(goExportXML, &quot;&lt;MediaObject&gt;&quot;)
				if FileExists(gaDocMedia(i).MediaName) then
					sTitle = sFileName
				else
					sTitle = gaDocMedia(i).MediaName
				end if	
				sDescription = gaDocMedia(i).Title
				sFileName = FileNameOutOfPath(gaExtMedia(gaDocMedia(i).ExtMediaID).FileName)
				sIdent = &quot;&quot;&quot;il_0_mob_&quot; &amp; CStr(i) &amp; &quot;&quot;&quot;&quot;
				sLayout = GetEpubMediaLayoutString(gaDocMedia(i))
				ExportMetadata(sIdent, sTitle, sDescription, aKeywords(), true)
				WriteToStream(goExportXML, &quot;&lt;MediaItem Purpose=&quot;&quot;Standard&quot;&quot;&gt;&quot;)
				WriteToStream(goExportXML, GetTag(&quot;Location&quot;,&quot;Type=&quot;&quot;LocalFile&quot;&quot;&quot;, sFileName, true))
				WriteToStream(goExportXML, GetTag(&quot;Layout&quot;, sLayout &amp; &quot; &quot; &amp; sAlign, &quot;&quot;, true))
				WriteToStream(goExportXML, &quot;&lt;/MediaItem&gt;&quot;)
				WriteToStream(goExportXML, &quot;&lt;/MediaObject&gt;&quot;)
  			end if	                
		end if	
     next i
end sub    


sub ExportEpubPageBreak(oPara as object, iPageID as long)
dim sIdent as string
dim sTitle as string
dim sDescription as string
dim aKeywords()

		WriteToStream(goExportXML, &quot;&lt;/PageObject&gt;&quot;)
		WriteToStream(goExportXML, &quot;&lt;PageObject&gt;&quot;)
		sIdent = &quot;&quot;&quot;il_0_pg_&quot; &amp; iPageID &amp; &quot;&quot;&quot;&quot;
		sTitle = &quot;&quot;
		sDescription = &quot;&quot;
		ExportMetadata(sIdent, sTitle, sDescription, aKeywords(), true)

end sub


sub AddEpubPrefixToTextPortion(oPara as object, sPrefix as string)
dim iPortionCount as long
dim i as integer

	iPortionCount = ubound(gaDocTextPortion())
	for i = 1 to iPortionCount
		if gaDocTextPortion(i).ParaID = oPara.ID then
			gaDocTextPortion(i).GetString = sPrefix &amp; gaDocTextPortion(i).GetString
			exit for
		end if
	next i	
end sub



function GetEpubTag(aTag as String, aAttribut as String, aText as String, aClose as boolean) as string
Dim vString as String

  vString = &quot;&lt;&quot; &amp; aTag
  If aAttribut &lt;&gt; &quot;&quot; then
    vString = vString &amp; &quot; &quot; &amp; aAttribut &amp; &quot;&gt;&quot;
  end if  
  if aText &lt;&gt; &quot;&quot; then &apos; es gibt Text
    vString = vString &amp; aText
  end if  
  if aClose then
    vString = vString &amp; &quot;&lt;/&quot; &amp; aTag &amp; &quot;&gt;&quot;
  end if
  GetEpubTag = vString
end function


sub SetEpubTableCaptions
dim i as long
dim iParaID as long
dim iTableID as long
dim sCaption as string
dim bGoOn as boolean

	for i = ubound(gaDocTextPortion()) to 1 step -1
		if gaDocTextPortion(i).ParaStyleName = &quot;Table&quot; then
			&apos;set the paragraph.state of these portions to PARA_STATE_EXPORTED
			iParaID = gaDocTextPortion(i).ParaID
			gaDocParagraph(iParaID).State = PARA_STATE_EXPORTED
			bGoOn = true
			sCaption = &quot;&quot;
			do while bGoOn
				if (gaDocTextPortion(i).ParaStyleName = &quot;Table&quot;) then 
					&apos;concatenate the table caption
					sCaption = gaDocTextPortion(i).GetString &amp; sCaption
				else 
					bGoOn = false
				end if	
				if bGoOn then
					i = i - 1
					bGoOn = i &gt; 0
				end if	
			loop
			if (i &gt; 0) and (sCaption &lt;&gt; &quot;&quot;) then
				&apos;get the ParaRec of the last portion of the upper table
				iParaID = gaDocTextPortion(i).ParaID
				&apos;check if the paragraph is part of a table
				iTableID = gaDocParagraph(iParaID).TableParentID
				if iTableID &gt; 0 then
					&apos;set the table caption
					gaDocParagraph(iTableID).TableCaption = sCaption 
				end if	
			end if
		end if	
	next i	
end sub


function GetEpubChapterSetByType(sType as string)
dim aChapterList()
dim iChapterCount as long
dim i as long
dim j as long

	j = 0
	iChapterCount = ubound(gaDocChapter())
	redim aChapterList(iChapterCount)
	for i = 1 to iChapterCount
		if gaDocChapter(i).ChapterType = sType then
			j = j + 1
			aChapterList(j) = gaDocChapter(i)
		end if
	next i
	redim preserve aChapterList(j)
	GetEpubChapterSetByType = aChapterList()
end function


function GetEpubParaSetChapter(iChapterID as long)
dim aParaList()
dim iParaCount as long
dim i as long
dim j as long

	j = 0
	iParaCount = ubound(gaDocParagraph())
	redim aParaList(iParaCount)
	for i = 1 to iParaCount
		if gaDocParagraph(i).ChapterID = iChapterID then
			j = j + 1
			aParaList(j) = gaDocParagraph(i).ID
		elseif gaDocParagraph(i).ChapterID &gt; iChapterID then
			exit for
		end if
	next i
	redim preserve aParaList(j)
	GetEpubParaSetChapter = aParaList()
end function


function GetEpubParaSetPageArea(iPageArea as integer)
dim aParaList()
dim iParaCount as long
dim i as long
dim j as long

	j = 0
	iParaCount = ubound(gaDocParagraph())
	redim aParaList(iParaCount)
	for i = 1 to iParaCount
		if gaDocParagraph(i).PageArea = iPageArea then
			j = j + 1
			aParaList(j) = gaDocParagraph(i).ID
		elseif gaDocParagraph(i).PageArea &gt; iPageArea then
			exit for
		end if
	next i
	redim preserve aParaList(j)
	GetEpubParaSetPageArea = aParaList()
end function


function GetEpubParaSetTable(iParaID as long) 
dim aParaList() as long
dim iParaCount as long
dim i as long
dim j as long

	j = 0
	iParaCount = ubound(gaDocParagraph())
	redim aParaList(iParaCount)
	for i = 1 to iParaCount
		if gaDocParagraph(i).TableParentID = iParaID then
			j = j + 1
			aParaList(j) = gaDocParagraph(i).ID
		end if
	next i
	redim preserve aParaList(j)
	GetEpubParaSetTable = aParaList()
end function


function GetEpubParaSetList(iParaID as long)
dim aParaList()
dim iParaCount as long
dim i as long
dim j as long

	j = 0
	iParaCount = ubound(gaDocParagraph())
	redim aParaList(iParaCount)
	for i = iParaID to iParaCount
		if gaDocParagraph(i).NumberingType &lt;&gt; &quot;&quot; then
			j = j + 1
			aParaList(j) = gaDocParagraph(i).ID
		else
			exit for	
		end if
	next i
	redim preserve aParaList(j)
	GetEpubParaSetList = aParaList()
end function



function GetEpubTextPortionByBookmark(sBookmark as string) as object
dim iCount as long
dim i as long

	iCount = ubound(gaDocTextPortion())
	for i = 1 to iCount
		if gaDocTextPortion(i).Bookmark = sBookmark then
			GetEpubTextPortionByBookmark = gaDocTextPortion(i)
			exit for	
		end if
	next i
end function


function GetEpubParaSetListOld(iParaID as long)
dim aParaList()
dim iParaCount as long
dim iNumberingType as integer
dim i as long
dim j as long

	j = 0
	iParaCount = ubound(gaDocParagraph())
	&apos;sNumberingStyleName = gaDocParagraph(iParaID).NumberingStyleName
	iNumberingType = gaDocParagraph(iParaID).NumberingType
	redim aParaList(iParaCount)
	for i = iParaID to iParaCount
		if gaDocParagraph(i).NumberingType = iNumberingType then
			j = j + 1
			aParaList(j) = gaDocParagraph(i).ID
		else
			exit for	
		end if
	next i
	redim preserve aParaList(j)
	GetEpubParaSetList = aParaList()
end function


function GetEpubTextPortionSet(iParaID as long)
dim iPortionCount as long
dim aPortionList()
dim i as long
dim j as long

	j = 0
	iPortionCount = ubound(gaDocTextPortion())
	redim aPortionList(iPortionCount)
	for i = 1 to iPortionCount
		if gaDocTextPortion(i).ParaID = iParaID then
			j = j + 1
			aPortionList(j) = gaDocTextPortion(i).ID
		elseif gaDocTextPortion(i).ParaID &gt; iParaID then
			exit for
		end if
	next i
	redim preserve aPortionList(j)
	GetEpubTextPortionSet = aPortionList()
end function


function GetEpubDocMediaSet(iPortionID as long)
dim iMediaCount as long
dim aMediaList()
dim i as long
dim j as long

	j = 0
	iMediaCount = ubound(gaDocMedia())
	redim aMediaList(iMediaCount)
	for i = 1 to iMediaCount
		if gaDocMedia(i).TextPortionID = iPortionID then
			j = j + 1
			aMediaList(j) = gaDocMedia(i).ID
		end if
	next i
	redim preserve aMediaList(j)
	GetEpubDocMediaSet = aMediaList()
end function


function GetEpubDocMediaByPortionID(iPortionID as long) as object
dim iMediaCount as long
dim i as long

	iMediaCount = ubound(gaDocMedia())
	for i = 1 to iMediaCount
		if gaDocMedia(i).TextPortionID = iPortionID then
			GetEpubDocMediaByPortionID = gaDocMedia(i)
			exit function
		end if
	next i
end function


function GetEpubExtMediaByObjectName(sObjectName as string) as object
dim iMediaCount as long
dim i as long

	iMediaCount = ubound(gaExtMedia())
	for i = 1 to iMediaCount
		if gaExtMedia(i).ObjectName = sObjectName then
			GetEpubExtMediaByObjectName = gaExtMedia(i)
			exit function
		end if
	next i
end function


function GetEpubListType(iType as integer)
dim sType as string

	select case iType
		case 0: sType = &quot;upper-latin&quot;
		case 1: sType = &quot;lower-latin&quot;
		case 2: sType = &quot;upper-roman&quot;
		case 3: sType = &quot;lower-roman&quot;
		case 4: sType = &quot;decimal&quot;
		case 6: sType = &quot;Unordered&quot;
	end select
	GetEpubListType = sType
end function


function GetFirstDocMediaRecByExtMediaID(iExtMediaID as long) as object
dim i as long

	for i = 1 to ubound(gaDocMedia())
		if (gaDocMedia(i).ExtMediaID = iExtMediaID) and (gaDocMedia(i).IsInUse) then
			GetFirstDocMediaRecByExtMediaID = gaDocMedia(i)
			exit function
		end if
	next i
end function


sub SetDocPageIDs
dim iChapterCount as integer
dim iChapter as integer
dim iPageID as integer

	iChapterCount = ubound(gaDocChapter())
	iChapter = 1
	if gaDocChapter(1).HasPageBreak then
		iPageID = 0
	else 	
		iPageID = 1
	end if
	do while (iChapter &lt;= iChapterCount)
		if gaDocChapter(iChapter).HasPageBreak then
			iPageID = iPageID + 1
			gaDocChapter(iChapter).PageID = iPageID
		end if
		gaDocChapter(iChapter).PageID = iPageID			
		iChapter = iChapter + 1
	loop
end sub



</script:module>