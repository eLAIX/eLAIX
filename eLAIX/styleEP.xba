<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="styleEP" script:language="StarBasic">&apos;****************************************************************************
&apos; eLAIX   : Writing ILIAS learning modules offline with OpenOffice.org Writer
&apos; Author  : Harry Boldt - h.boldt@boldt-media.de - http://elaix.org
&apos; License : GPL
&apos;****************************************************************************

&apos; This module is part of eLAIX. You can redistribute it and/or
&apos; modify it under the terms of the GNU Lesser General Public
&apos; License as published by the Free Software Foundation, either
&apos; version 3 of the License, or (at your option) any later version.
&apos; 
&apos; This program is distributed in the hope that it will be useful,
&apos; but WITHOUT ANY WARRANTY; without even the implied warranty of
&apos; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
&apos; Lesser General Public License for more details.
&apos; 
&apos; You should have received a copy of the GNU Lesser General Public
&apos; License along with this program. If not, please visit the Free
&apos; Software Foundation website at http://www.gnu.org/licenses/.

Option Explicit

private const cFactor = 25

sub ExportEpubStyles
dim oStream as object 
dim sStyleImageFolder as string 

	oStream = GetExportFileObject(gsExportZipDir &amp; &quot;/EPUB/css/style.css&quot;)
	sStyleImageFolder = gsExportZipDir &amp; &quot;/EPUB/images/&quot;

	ExportEpubStandardStyles(oStream)
	ExportEpubPageStyles(oStream)
	ExportEpubSectionStyles(oStream, sStyleImageFolder)
	ExportEpubParagraphStyles(oStream, sStyleImageFolder)
	ExportEpubCharacterStyles(oStream, sStyleImageFolder)
	ExportEpubAccordionStyles(oStream)
	
	oStream.closeOutput 
end sub


sub ExportEpubStandardStyles(oStream as object)
	
	oStream.writeString(&quot;/* Standard Styles */&quot; &amp; gsCR)
	oStream.writeString(&quot;body{margin:0;padding:0;}&quot; &amp; gsCR  &amp; gsCR) 
	oStream.writeString(&quot;nav#toc ol{list-style-type:none;}&quot; &amp; gsCR)
	oStream.writeString(&quot;nav#toc ol li a{text-decoration:none;}&quot; &amp; gsCR)
	oStream.writeString(&quot;nav#toc ol li a:hover{text-decoration:underline;}&quot; &amp; gsCR)
	oStream.writeString(&quot;body#titlepage{text-align:center;}&quot; &amp; gsCR)
	oStream.writeString(&quot;.footnotes{border-top:2px solid #333;margin-top:30;padding-top:15;font-size:0.85em;}&quot; &amp; gsCR) 
	oStream.writeString(&quot;a.footnote{vertical-align:4px;font-size:80%;text-decoration:none;}&quot; &amp; gsCR)
	oStream.writeString(&quot;.footnotes .separator{width:150px;border-top:2px solid #000;margin-top:25px;padding-top:15px}&quot; &amp; gsCR)
	oStream.writeString(&quot;.footnotes .fn-id{padding-right:20px;}&quot; &amp; gsCR)
	oStream.writeString(&quot;.footnotes a.back {text-decoration:none;}&quot; &amp; gsCR) 
	oStream.writeString(&quot;figure{margin:0;padding:0;}&quot; &amp; gsCR) 
	oStream.writeString(&quot;figure.left-float{float:left; margin-right:15px;}&quot; &amp; gsCR) 
	oStream.writeString(&quot;figure.right-float{float:right; margin-left:15px;}&quot; &amp; gsCR) 
	oStream.writeString(&quot;figure.center{text-align:center; margin:auto; max-width:100%;}&quot; &amp; gsCR) 
	oStream.writeString(&quot;img{max-width:100%; height:auto;}&quot; &amp; gsCR) 
	oStream.writeString(&quot;ul{padding-top:0;}&quot; &amp; gsCR) 
	oStream.writeString(&quot;.clear{clear:both;}&quot; &amp; gsCR) 
	oStream.writeString(&quot;table{border-spacing:0;}&quot; &amp; gsCR) 
	oStream.writeString(&quot;.marginal_no{float:left;margin-left:-25px;}&quot; &amp; gsCR) 
	oStream.writeString(&quot;.align-center{margin:auto;}&quot; &amp; gsCR) 
	oStream.writeString(&quot;.align-right{float:right;}&quot; &amp; gsCR  &amp; gsCR) 
end sub


sub ExportEpubPageStyles(oStream as object)
dim sStyleString as string
dim iPos as integer
dim sMarginalNumberStyle as string

	sStyleString = GetEpubPageStyles()
	oStream.writeString(&quot;/* Body styles */&quot; &amp; gsCR)
	oStream.writeString(sStyleString &amp; gsCR)			
			
	&apos;check if marginal numbers are used
	iPos = goDlgExport.Model.cmbMarginalNumberStyle.SelectedItems(0)
	sMarginalNumberStyle = goDlgExport.Model.cmbMarginalNumberStyle.StringItemList(iPos)
	if iPos &gt; 0 then
		oStream.writeString(&quot;#wrapper{padding-left: 30px;}&quot; &amp; gsCR)
	end if
end sub


sub ExportEpubSectionStyles(oStream as object, sStyleImageFolder as string)
dim oDocument as object
dim oStyleFamilies as object
dim oFrameStyles as object
dim oStyle as object
dim iCount as integer
dim i as integer
dim sStyleString as string
dim iNumType as integer
dim sGraphicName as string
dim sLocation as string
dim oGraphic as object

	oStyleFamilies = ThisComponent.StyleFamilies
	oFrameStyles = oStyleFamilies.getByName( &quot;FrameStyles&quot; )

	&apos;get all applied paragraphs
	iCount = oFrameStyles.GetCount
	for i = 0 to iCount - 1
		oStyle = oFrameStyles.GetByIndex(i)		
		&apos;the style is used by the document
		if oStyle.isInUse and (oStyle.Name &lt;&gt; &quot;&quot;) then
			sGraphicName = oStyle.BackGraphicURL
			if sGraphicName &lt;&gt; &quot;&quot; then
				&apos;oGraphic = GetGraphicByURL(sGraphicName)
				sGraphicName = ExportGraphicByURL(oStyle.BackGraphicURL, sStyleImageFolder)
				AppendFileToExtMediaByName(MEDIA_TYPE_MEDIA, sGraphicName, sGraphicName)
				if sGraphicName = &quot;save_again&quot; then
					oDocument = ThisComponent()
					oDocument.Store
					sGraphicName = ExportGraphicByURL(oStyle.BackGraphicURL, sStyleImageFolder)
				end if
			end if
			sStyleString = GetEpubStyleStringSection(oStyle, sGraphicName)
			oStream.writeString(sStyleString &amp; gsCR)
		end if			
	next i
end sub


sub ExportEpubParagraphStyles(oStream as object, sStyleImageFolder as string)
dim oDocument as object
dim oStyleFamilies as object
dim oParaStyles as object
dim oStyle as object
dim iCount as integer
dim i as integer
dim sStyleString as string
dim iNumType as integer
dim sGraphicName as string
dim sLocation as string
dim oGraphic as object
dim sStylename as string

	oStyleFamilies = ThisComponent.StyleFamilies
	oParaStyles = oStyleFamilies.getByName( &quot;ParagraphStyles&quot; )

	&apos;get all applied paragraphs
	iCount = oParaStyles.GetCount
	for i = 0 to iCount - 1
		oStyle = oParaStyles.GetByIndex(i)
		&apos;the style is used by the document
		if oStyle.isInUse and (oStyle.Name &lt;&gt; &quot;&quot;) then
			sStylename = ReplaceString(oStyle.Name, &quot;_&quot;, &quot; &quot;)
			iNumType = GetEpubNumberingTypeByStyleName(sStylename)

			&apos;xray oStyle

			&apos;check if this style is an ordered list
			if iNumType = 4 then
				sStyleString = GetEpubStyleStringOrderedList(oStyle) 
				oStream.writeString(sStyleString &amp; gsCR)
			
			&apos;check if this style is an unordered list
			elseif iNumType = 6 then
				sStyleString = GetEpubStyleStringUnorderedList(oStyle) 
				oStream.writeString(sStyleString &amp; gsCR)

			&apos;check if this style is a marginale left style
			elseif oStyle.Name = gsMarginaleLeftStyle then
				sStyleString = GetEpubStyleStringMarginaleLeft(oStyle)
				oStream.writeString(sStyleString &amp; gsCR)
							
			&apos;check if this style is the marginale right style
			elseif oStyle.Name = gsMarginaleRightStyle then
				sStyleString = GetEpubStyleStringMarginaleRight(oStyle
				oStream.writeString(sStyleString &amp; gsCR)

			elseif oStyle.Name = &quot;Standard&quot; then
				&apos;do nothing, this paragraph is handled in the page container
				
			&apos;this is a non special style
			else				
				sGraphicName = oStyle.ParaBackGraphicURL
				if sGraphicName &lt;&gt; &quot;&quot; then
					&apos;oGraphic = GetGraphicByURL(sGraphicName)
					sGraphicName = ExportGraphicByURL(oStyle.ParaBackGraphicURL, sStyleImageFolder)
					AppendFileToExtMediaByName(MEDIA_TYPE_MEDIA, sGraphicName, sGraphicName)
					if sGraphicName = &quot;save_again&quot; then
						oDocument = ThisComponent()
						oDocument.Store
						sGraphicName = ExportGraphicByURL(oStyle.ParaBackGraphicURL, sStyleImageFolder)
					end if
				end if				
				sStyleString = GetEpubStyleStringParagraph(oStyle, sGraphicName)
				oStream.writeString(sStyleString &amp; gsCR)
			end if	
			
			&apos;always create a ListLabel Class, if there&apos;s a negative FirstLineIndent
			if oStyle.ParaFirstLineIndent &lt; 0 then
				sStyleString = GetEpubStyleStringListLabel(oStyle)
				oStream.writeString(sStyleString &amp; gsCR)
			end if			
		end if			
	next i
	
	&apos;step 2: set extra alignment styles for hard aligned paragraphs
	sStyleString = GetEpubStyleStringAlignment(&quot;center&quot;)
	oStream.writeString(sStyleString &amp; gsCR)
	sStyleString = GetEpubStyleStringAlignment(&quot;right&quot;)
	oStream.writeString(sStyleString &amp; gsCR)
	sStyleString = GetEpubStyleStringAlignment(&quot;justify&quot;)
	oStream.writeString(sStyleString &amp; gsCR)
end sub


sub ExportEpubCharacterStyles(oStream as object, sStyleImageFolder as string)
dim oDocument as object
dim oStyleFamilies as object
dim oCharStyles as object
dim oStyle as object
dim iCount as integer
dim i as integer
dim sStyleString as string
dim iNumType as integer
dim sGraphicName as string
dim sLocation as string

	oStyleFamilies = ThisComponent.StyleFamilies
	oCharStyles = oStyleFamilies.getByName( &quot;CharacterStyles&quot; )

	&apos;get all applied paragraphs
	iCount = oCharStyles.GetCount
	for i = 0 to iCount - 1
		oStyle = oCharStyles.GetByIndex(i)		
		&apos;the style is used by the document
		if oStyle.isInUse and (oStyle.Name &lt;&gt; &quot;&quot;) then
			sStyleString = GetEpubStyleStringCharacter(oStyle)
			oStream.writeString(sStyleString &amp; gsCR)
		end if			
	next i
end sub


sub ExportEpubAccordionStyles(oStream as object)
dim sStyleString as string
dim oStyleFamilies as object
dim oStyles as object
dim oStyle as object

	oStyleFamilies = ThisComponent.StyleFamilies
	oStyles = oStyleFamilies.getByName( &quot;FrameStyles&quot; )	
	if oStyles.HasByName(&quot;ILIAS Accordion Element&quot;) then
		oStyle = oStyles.GetByName(&quot;ILIAS Accordion Element&quot;)
		sStyleString = GetEpubStyleStringAccordionVertical(oStyle)
		oStream.writeString(sStyleString &amp; gsCR)
		sStyleString = GetEpubStyleStringAccordionHorizontal(oStyle)
		oStream.writeString(sStyleString &amp; gsCR)
	end if

	oStyleFamilies = ThisComponent.StyleFamilies
	oStyles = oStyleFamilies.getByName( &quot;ParagraphStyles&quot; )
	if oStyles.HasByName(&quot;ILIAS Accordion Caption&quot;) then
		oStyle = oStyles.GetByName(&quot;ILIAS Accordion Caption&quot;)	
		sStyleString = GetEpubStyleStringAccordionTogglerVertical(oStyle)
		oStream.writeString(sStyleString &amp; gsCR)
		sStyleString = GetEpubStyleStringAccordionTogglerHorizontal(oStyle)
		oStream.writeString(sStyleString &amp; gsCR)
	end if
	
	sStyleString = GetEpubStyleStringAccordionTextVertical()
	oStream.writeString(sStyleString &amp; gsCR)
	sStyleString = GetEpubStyleStringAccordionTextHorizontal()
	oStream.writeString(sStyleString &amp; gsCR)
end sub	


function GetEpubStyleStringOrderedList(oStyle as object) as string
dim sStyleString as string
dim sStyleName as string
dim oProps(7) as new com.sun.star.beans.PropertyValue
dim i as integer
dim oNumStyle as object
dim oNumRules as object
dim iNumLevel as integer
dim iLeftMargin as integer
dim iFirstLineOffset as integer
dim sPadding as string

	&apos;STEP 1: set the list itself (ol tag)
	sStylename = ReplaceUmlaut(oStyle.Name)
	sStylename = ReplaceString(sStylename, &quot;_&quot;, &quot; &quot;)
	sStyleString = &quot;ol.list_&quot; &amp; sStyleName &amp; &quot; {&quot; &amp; gsCR
	sStyleString = sStylestring &amp; &quot;font-size: &quot; &amp;  CInt(oStyle.CharHeight) &amp; &quot;pt;&quot; &amp; gsCR

	&apos;Get the NumberingLevel of the first found paragraph with this Stylename
	iNumLevel = GetEpubNumberingLevelByStyleName(sStyleName)
	if (iNumLevel &gt;= 0) and (oStyle.NumberingStyleName &lt;&gt; &quot;&quot;) then
		&apos;Get the left margin from the current level of the joined Numberingstyle  
		oNumStyle = GetEpubNumberingStyleByName(oStyle.NumberingStyleName)
		oNumRules = oNumStyle.NumberingRules
		&apos;Set the left margin
		iLeftMargin = GetEpubNumRulesProperty(oNumRules, &quot;IndentAt&quot;, iNumLevel)
		iFirstLineOffset = GetEpubNumRulesProperty(oNumRules, &quot;FirstLineIndent&quot;, iNumLevel)
		sPadding = GetEpubFormattedPixelString(25 + Int(iLeftMargin/cFactor + 0.5) + Int(iFirstLineOffset/cFactor + 0.5)
		sStyleString = sStylestring &amp; &quot;padding-left: &quot; &amp; sPadding &amp; gsCR
	end if	
	sStyleString = sStylestring &amp; &quot;}&quot; &amp; gsCR &amp; gsCR

	&apos;STEP 2: set the list items (p tag)
	sStyleString = sStylestring &amp; &quot;ol.&quot; &amp; sStylename &amp; &quot; p {&quot; &amp; gsCR
	oProps(0).Name  = &quot;margin-top&quot;
	oProps(0).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaTopMargin / cFactor))
	oProps(1).Name  = &quot;margin-right&quot;
	oProps(1).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaRightMargin / cFactor))
	oProps(2).Name  = &quot;margin-bottom&quot;
	oProps(2).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaBottomMargin / cFactor))
	oProps(3).Name  = &quot;margin-left&quot;
	oProps(3).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaLeftMargin / cFactor))
	oProps(4).Name  = &quot;padding-top&quot;
	oProps(4).Value =  GetEpubFormattedPixelString(0)
	oProps(5).Name  = &quot;padding-right&quot;
	oProps(5).Value =  GetEpubFormattedPixelString(0)
	oProps(6).Name  = &quot;padding-bottom&quot;
	oProps(6).Value =  GetEpubFormattedPixelString(0)
	oProps(7).Name  = &quot;padding-left&quot;
	oProps(7).Value =  GetEpubFormattedPixelString(0)
	&apos;oProps(8).Name  = &quot;text-indent&quot;
	&apos;oProps(8).Value = GetEpubFormattedPixelString(Int(oStyle.ParaFirstLineIndent / cFactor))

	for i = 0 to ubound(oProps)
		sStyleString = sStyleString + oProps(i).Name &amp; &quot;: &quot; &amp; oProps(i).Value &amp; &quot;;&quot; &amp; gsCR
	next i	
	sStyleString = sStyleString &amp; &quot;}&quot; &amp; gsCR
	
	GetEpubStyleStringOrderedList = sStyleString
end function


function GetEpubStyleStringUnorderedList(oStyle as object) as string
dim sStyleString as string
dim sStyleName as string
dim oProps(6) as new com.sun.star.beans.PropertyValue
dim i as integer
dim oNumStyle as object
dim oNumRules as object
dim iNumLevel as integer
dim iLeftMargin as integer
dim iListMargin as integer
dim iFirstLineOffset as integer

	&apos;STEP 1: set the list itself (ul tag)
	sStylename = ReplaceUmlaut(oStyle.Name)
	sStylename = ReplaceString(sStylename, &quot;_&quot;, &quot; &quot;)
	sStyleString = &quot;ul.list_&quot; &amp; sStyleName &amp; &quot; {&quot; &amp; gsCR
	sStyleString = sStylestring &amp; &quot;font-size: &quot; &amp;  CInt(oStyle.CharHeight) &amp; &quot;pt;&quot; &amp; gsCR

	&apos;Get the NumberingLevel of the first found paragraph with this Stylename
	iNumLevel = GetEpubNumberingLevelByStyleName(sStylename)
	if (iNumLevel &gt;= 0) and (oStyle.NumberingStyleName &lt;&gt; &quot;&quot;) then
		&apos;Get the left margin from the current level of the joined Numberingstyle  
		oNumStyle = GetEpubNumberingStyleByName(oStyle.NumberingStyleName)
		oNumRules = oNumStyle.NumberingRules
		&apos;Set the left margin
		iLeftMargin = GetEpubNumRulesProperty(oNumRules, &quot;IndentAt&quot;, iNumLevel)
		iFirstLineOffset = GetEpubNumRulesProperty(oNumRules, &quot;FirstLineIndent&quot;, iNumLevel)
		iListMargin = int((iLeftMargin + iFirstLineOffset)/cFactor)
		sStyleString = sStylestring &amp; &quot;margin-left: &quot; &amp; iListMargin &amp; &quot;px;&quot; &amp; gsCR
		sStyleString = sStylestring &amp; &quot;padding-left: 15px;&quot; &amp; gsCR
	end if	
	sStyleString = sStylestring &amp; &quot;}&quot; &amp; gsCR &amp; gsCR

	&apos;STEP 2: set the list items (ul element)
	sStyleString = sStylestring &amp; &quot;ul .para_&quot; &amp; sStylename &amp; &quot;{&quot; &amp; gsCR
	oProps(0).Name  = &quot;margin-top&quot;
	oProps(0).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaTopMargin / cFactor))
	oProps(1).Name  = &quot;margin-right&quot;
	oProps(1).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaRightMargin / cFactor))
	oProps(2).Name  = &quot;margin-bottom&quot;
	oProps(2).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaBottomMargin / cFactor))
	oProps(3).Name  = &quot;padding-top&quot;
	oProps(3).Value =  GetEpubFormattedPixelString(0)
	oProps(4).Name  = &quot;padding-right&quot;
	oProps(4).Value =  GetEpubFormattedPixelString(0)
	oProps(5).Name  = &quot;padding-bottom&quot;
	oProps(5).Value =  GetEpubFormattedPixelString(0)
	oProps(6).Name  = &quot;padding-left&quot;
	oProps(6).Value =  abs(Int(iFirstLineOffset/cFactor)) - 15 &amp; &quot;px&quot;

	&apos;if the left margin of this list-style is set manually
	&apos;if oStyle.ParaLeftMargin &gt; 0 then
	&apos;	&apos;only set left margin, if this is the first level
	&apos;	&apos;if oPara.NumberingLevel = 1 then
	&apos;		redim preserve oProps(7)
	&apos;		oProps(7).Name  = &quot;margin-left&quot;
	&apos;		oProps(7).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaLeftMargin / cFactor) + Int(oStyle.ParaFirstLineIndent / cFactor))
	&apos;	&apos;end if	
	&apos;end if	

	for i = 0 to ubound(oProps)
		sStyleString = sStyleString + oProps(i).Name &amp; &quot;: &quot; &amp; oProps(i).Value &amp; &quot;;&quot; &amp; gsCR
	next i	
	sStyleString = sStyleString &amp; &quot;}&quot; &amp; gsCR
	
	GetEpubStyleStringUnorderedList = sStyleString
end function


function GetEpubStyleStringMarginaleLeft(oStyle as object) as string
dim sStyleString as string
dim sStyleName as string
dim oProps(8) as new com.sun.star.beans.PropertyValue
dim i as integer

	sStylename = ReplaceUmlaut(oStyle.Name)
	sStylename = ReplaceString(sStylename, &quot;_&quot;, &quot; &quot;)
	sStyleString = &quot;.&quot; &amp;sStyleName &amp; &quot; {&quot; &amp; gsCR

	oProps(0).Name  = &quot;margin-top&quot;
	oProps(0).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaTopMargin / cFactor))
	oProps(1).Name  = &quot;margin-right&quot;
	oProps(1).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaRightMargin / cFactor))
	oProps(2).Name  = &quot;margin-bottom&quot;
	oProps(2).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaBottomMargin / cFactor))
	oProps(3).Name  = &quot;margin-left&quot;
	oProps(3).Value =  GetEpubFormattedPixelString((giMarginaleLeftWidth * -1) + 5)
	oProps(4).Name  = &quot;font-size&quot;
	oProps(4).Value =  &quot;75%&quot;
	oProps(5).Name  = &quot;float&quot;
	oProps(5).Value =  &quot;left&quot;
	oProps(6).Name  = &quot;margin-left&quot;
	oProps(6).Value =  &quot;-25px&quot;
	&apos;oProps(6).Name  = &quot;width&quot;
	&apos;oProps(6).Value =  GetEpubFormattedPixelString(giMarginaleLeftWidth - 5)
	oProps(7).Name  = &quot;font-weight&quot;
	if oStyle.CharWeight = com.sun.star.awt.FontWeight.BOLD then
		oProps(7).Value = &quot;bold&quot;
	else
		oProps(7).Value = &quot;normal&quot;
	end if	 	
 	oProps(8).Name  = &quot;color&quot;
	if oStyle.CharColor = -1 then
		oProps(8).Value = &quot;&quot;
	else	
		oProps(8).Value = GetEpubHexColorString(oStyle.CharColor)
	end if 
	
	for i = 0 to ubound(oProps)
		sStyleString = sStyleString + oProps(i).Name &amp; &quot;: &quot; &amp; oProps(i).Value &amp; &quot;;&quot; &amp; gsCR
	next i	
	sStyleString = sStyleString &amp; &quot;}&quot; &amp; gsCR
	
	GetEpubStyleStringMarginaleLeft = sStyleString
end function


function GetEpubStyleStringMarginaleRight(oStyle as object) as string
dim sStyleString as string
dim sStyleName as string
dim oProps(10) as new com.sun.star.beans.PropertyValue
dim i as integer

	sStylename = ReplaceUmlaut(oStyle.Name)
	sStylename = ReplaceString(sStylename, &quot;_&quot;, &quot; &quot;)
	sStyleString = &quot;.&quot; &amp; StyleName &amp; &quot; {&quot; &amp; gsCR

	oProps(0).Name  = &quot;margin-top&quot;
	oProps(0).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaTopMargin / cFactor))
	oProps(1).Name  = &quot;margin-right&quot;
	oProps(1).Value =  GetEpubFormattedPixelString(cFactor)
	oProps(2).Name  = &quot;margin-bottom&quot;
	oProps(2).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaBottomMargin / cFactor))
	oProps(3).Name  = &quot;margin-left&quot;
	oProps(3).Value =  GetEpubFormattedPixelString(0)
	oProps(4).Name  = &quot;font-size&quot;
	oProps(4).Value =  &quot;75%&quot;
	oProps(5).Name  = &quot;position&quot;
	oProps(5).Value = &quot;absolute&quot;
	oProps(6).Name  = &quot;width&quot;
	oProps(6).Value =  GetEpubFormattedPixelString(giMarginaleRightWidth - cFactor)
	oProps(7).Name  = &quot;right&quot;
	oProps(7).Value =  GetEpubFormattedPixelString(10)
	oProps(8).Name  = &quot;padding&quot;
	oProps(8).Value =  GetEpubFormattedPixelString(0)
	oProps(9).Name  = &quot;font-weight&quot;
	if oStyle.CharWeight = com.sun.star.awt.FontWeight.BOLD then
		oProps(9).Value = &quot;bold&quot;
	else
		oProps(9).Value = &quot;normal&quot;
	end if	 	
 	oProps(10).Name  = &quot;color&quot;
	if oStyle.CharColor = -1 then
		oProps(10).Value = &quot;&quot;
	else	
		oProps(10).Value = GetEpubHexColorString(oStyle.CharColor)
	end if 
	
	for i = 0 to ubound(oProps)
		sStyleString = sStyleString + oProps(i).Name &amp; &quot;: &quot; &amp; oProps(i).Value &amp; &quot;;&quot; &amp; gsCR
	next i	
	sStyleString = sStyleString &amp; &quot;}&quot; &amp; gsCR
	
	GetEpubStyleStringMarginaleRight = sStyleString
end function


&apos;******************************************************************************************
&apos; Building the export strings
&apos;******************************************************************************************

function GetEpubStyleStringSection(oStyle as object, sGraphicName as string) as string
dim sStyleString as string
dim sStyleName as string
dim oProps(14) as new com.sun.star.beans.PropertyValue
dim i as integer
dim iCount as integer

	&apos;oPara = GetEpubParaByStyleName(sStyleName)
	sStylename = ReplaceUmlaut(oStyle.Name)
	sStylename = ReplaceString(sStylename, &quot;_&quot;, &quot; &quot;)
	sStylename = ReplaceString(sStylename, &quot;p&quot;, &quot;+&quot;)
	
	oProps(0).Name  = &quot;margin-top&quot;
	oProps(0).Value =  GetEpubFormattedPixelString(Int(oStyle.TopMargin / cFactor))
	oProps(1).Name  = &quot;margin-right&quot;
	oProps(1).Value =  GetEpubFormattedPixelString(Int(oStyle.RightMargin / cFactor))
	oProps(2).Name  = &quot;margin-bottom&quot;
	oProps(2).Value =  GetEpubFormattedPixelString(Int(oStyle.BottomMargin / cFactor))
	oProps(3).Name  = &quot;margin-left&quot;
	oProps(3).Value =  GetEpubFormattedPixelString(Int(oStyle.LeftMargin / cFactor))
	oProps(4).Name  = &quot;position&quot;
	oProps(4).Value =  &quot;relative&quot;	
	oProps(5).Name  = &quot;color&quot;
	oProps(5).Value =  &quot;#000000&quot;
	
	oProps(6).Name  = &quot;background-color&quot;
	oProps(6).Value =  GetEpubHexColorString(oStyle.BackColorRGB)
	oProps(7).Name  = &quot;border-top&quot;
	oProps(7).Value = GetEpubCSSBorderString(oStyle.TopBorder)
	oProps(8).Name  = &quot;border-right&quot;
	oProps(8).Value = GetEpubCSSBorderString(oStyle.RightBorder)
	oProps(9).Name  = &quot;border-bottom&quot;
	oProps(9).Value = GetEpubCSSBorderString(oStyle.BottomBorder)
	oProps(10).Name  = &quot;border-left&quot;
	oProps(10).Value = GetEpubCSSBorderString(oStyle.LeftBorder)
	oProps(11).Name  = &quot;padding-top&quot;
	oProps(11).Value = GetEpubFormattedPixelString(Int(oStyle.TopBorderDistance / cFactor))
	oProps(12).Name  = &quot;padding-right&quot;
	oProps(12).Value = GetEpubFormattedPixelString(Int(oStyle.RightBorderDistance / cFactor))
	oProps(13).Name  = &quot;padding-bottom&quot;
	oProps(13).Value = GetEpubFormattedPixelString(Int(oStyle.BottomBorderDistance / cFactor))
	oProps(14).Name  = &quot;padding-left&quot;
	oProps(14).Value = GetEpubFormattedPixelString(Int(oStyle.LeftBorderDistance / cFactor))
		
	if sGraphicName &lt;&gt; &quot;&quot; then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount + 2)
		oProps(iCount).Name  = &quot;background-image&quot;
		oProps(iCount).Value = &quot;url(&apos;../images/&quot; &amp; sGraphicname &amp; &quot;&apos;)&quot;
		iCount = iCount + 1
		oProps(iCount).Name  = &quot;background-repeat&quot;
		oProps(iCount).Value = &quot;no-repeat&quot;
		iCount = iCount + 1
		oProps(iCount).Name  = &quot;background-position&quot;
		oProps(iCount).Value = &quot;left top&quot;
	end if
	 
	for i = 0 to ubound(oProps)
		sStyleString = sStyleString + oProps(i).Name &amp; &quot;: &quot; &amp; oProps(i).Value &amp; &quot;;&quot; &amp; gsCR
	next i	
	sStyleString = &quot;section_&quot; &amp; sStyleName &amp; &quot;{&quot; &amp; gsCR &amp; sStyleString &amp; &quot;}&quot; &amp; gsCR
		
	GetEpubStyleStringSection = sStyleString
end function


function GetEpubStyleStringParagraph(oStyle as object, sGraphicName as string) as string
dim oControl as object
dim sStyleString as string
dim sStyleName as string
dim sStyle as string
dim oPara as object
dim oProps(2) as new com.sun.star.beans.PropertyValue
dim oProp as new com.sun.star.beans.PropertyValue
dim i as integer
dim iCount as integer
dim oStandard as object

	oStandard = GetStyleByName(&quot;ParagraphStyles&quot;, &quot;Standard&quot;)
	sStylename = ReplaceUmlaut(oStyle.Name)
	sStylename = ReplaceString(sStylename, &quot;&quot;, &quot; (user)&quot;)
	sStylename = ReplaceString(sStylename, &quot;&quot;, &quot;.&quot;)
	sStylename = ReplaceString(sStylename, &quot;_&quot;, &quot; &quot;)
	sStylename = ReplaceString(sStylename, &quot;_&quot;, &quot;/&quot;)
	sStylename = ReplaceString(sStylename, &quot;p&quot;, &quot;+&quot;)
	
	if (Left(sStylename, 7) = &quot;Heading&quot;) and (sStylename &lt;&gt; &quot;Heading&quot;) then
		sStyleString = &quot;.para_&quot; &amp; sStyleName &amp; &quot; {&quot; &amp; gsCR
	&apos;	sStyleString = &quot;h&quot; &amp; mid(sStyleName, 9) &amp; &quot;{&quot; &amp; gsCR
		oProps(0).Name  = &quot;margin-top&quot;		
		if oStyle.BreakType = 4 then &apos;set no margin-top on top of a page
			oProps(0).Value =  0
		else	
			oProps(0).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaTopMargin / cFactor))
		end if	
		oProps(1).Name  = &quot;margin-left&quot;
		oProps(1).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaLeftMargin / cFactor))
		
		&apos;if sStylename = &quot;Heading_1&quot; then
		&apos;	xray oStyle
		&apos;end if
		
	elseif sStylename = &quot;ILIAS_FileList_Caption&quot; then
		sStyleString = &quot;.FileListHeading {&quot; &amp; gsCR
		oProps(0).Name  = &quot;margin-top&quot;
		oProps(0).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaTopMargin / cFactor))
		oProps(1).Name  = &quot;margin-left&quot;
		oProps(1).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaLeftMargin / cFactor))
		
	elseif sStylename = &quot;ILIAS_FileList_Element&quot; then
		sStyleString = &quot;li.FileListItem {&quot; &amp; gsCR
		oProps(0).Name  = &quot;margin-top&quot;
		oProps(0).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaTopMargin / cFactor))
		oProps(1).Name  = &quot;margin-left&quot;
		oProps(1).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaLeftMargin / cFactor))
		
	else
		sStyleString = &quot;.para_&quot; &amp; sStyleName &amp; &quot; {&quot; &amp; gsCR
		oProps(0).Name  = &quot;margin-top&quot;
		oProps(0).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaTopMargin / cFactor))
		oProps(1).Name  = &quot;margin-left&quot;
		oProps(1).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaLeftMargin / cFactor))
	end if
	
	oProps(2).Name  = &quot;position&quot;
	oProps(2).Value =  &quot;relative&quot;	
	
	if oStyle.ParaFirstLineIndent &lt;&gt; 0 then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;text-indent&quot;
		oProps(iCount).Value = GetEpubFormattedPixelString(Int(oStyle.ParaFirstLineIndent / cFactor))
	end if

	&apos;if oStyle.GetPropertyState(&quot;ParaRightMargin&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;margin-right&quot;
		oProps(iCount).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaRightMargin / cFactor))
	&apos;end if
		
	&apos;if oStyle.GetPropertyState(&quot;ParaBottomMargin&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;margin-bottom&quot;
		oProps(iCount).Value =  GetEpubFormattedPixelString(Int(oStyle.ParaBottomMargin / cFactor))
	&apos;end if
		
	if oStyle.CharColor &lt;&gt; oStandard.CharColor then
		if oStyle.CharColor &lt;&gt; -1 then
			iCount = uBound(oProps) + 1
			redim preserve oProps(iCount)
			oProps(iCount).Name  = &quot;color&quot;
			oProps(iCount).Value =  GetEpubHexColorString(oStyle.CharColor)
		end if	
	end if
		
	if (oStyle.CharHeight &lt;&gt; oStandard.CharHeight) or (Left(sStylename, 7) = &quot;Heading&quot;) then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;font-size&quot;
		oProps(iCount).Value =  CInt(oStyle.CharHeight) &amp; &quot;pt&quot;
	end if

	if oStyle.CharUnderline &lt;&gt; oStandard.CharUnderline then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;text-decoration&quot;
		oProps(iCount).Value =  GetEpubCssUnderlineString(oStyle.CharUnderline)
	end if

	&apos;if oStyle.GetPropertyState(&quot;ParaAdjust&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;text-align&quot;
		oProps(iCount).Value =  GetEpubCssAlignString(oStyle.ParaAdjust)
	&apos;end if

	&apos;if oStyle.GetPropertyState(&quot;ParaBackColor&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;background-color&quot;
		oProps(iCount).Value =  GetEpubHexColorString(oStyle.ParaBackColor)
	&apos;end if

	if oStyle.GetPropertyState(&quot;TopBorder&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;border-top&quot;
		oProps(iCount).Value =  GetEpubCSSBorderString(oStyle.TopBorder)
	end if

	if oStyle.GetPropertyState(&quot;RightBorder&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;border-right&quot;
		oProps(iCount).Value =  GetEpubCSSBorderString(oStyle.RightBorder)
	end if

	if oStyle.GetPropertyState(&quot;BottomBorder&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;border-bottom&quot;
		oProps(iCount).Value =  GetEpubCSSBorderString(oStyle.BottomBorder)
	end if

	if oStyle.GetPropertyState(&quot;LeftBorder&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;border-left&quot;
		oProps(iCount).Value =  GetEpubCSSBorderString(oStyle.LeftBorder)
	end if

	if oStyle.GetPropertyState(&quot;TopBorderDistance&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;padding-top&quot;
		oProps(iCount).Value =  GetEpubFormattedPixelString(Int(oStyle.TopBorderDistance / cFactor))
	end if

	if oStyle.GetPropertyState(&quot;RightBorderDistance&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;padding-right&quot;
		oProps(iCount).Value =  GetEpubFormattedPixelString(Int(oStyle.RightBorderDistance / cFactor))
	end if

	if oStyle.GetPropertyState(&quot;BottomBorderDistance&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;padding-bottom&quot;
		oProps(iCount).Value =  GetEpubFormattedPixelString(Int(oStyle.BottomBorderDistance / cFactor))
	end if

	if oStyle.GetPropertyState(&quot;LeftBorderDistance&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;padding-left&quot;
		oProps(iCount).Value =  GetEpubFormattedPixelString(Int(oStyle.LeftBorderDistance / cFactor))
	end if

	if oStyle.CharWeight &lt;&gt; oStandard.CharWeight then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;font-weight&quot;
		if oStyle.CharWeight = com.sun.star.awt.FontWeight.BOLD then
			oProps(iCount).Value = &quot;bold&quot;
		else
			oProps(iCount).Value = &quot;normal&quot;
		end if	 	
	end if

	&apos;if sStylename = &quot;Heading_1&quot; then
	&apos;	xray oStyle
	&apos;end if	

	if not oStyle.ParaSplit then
		iCount = uBound(oProps)
		redim preserve oProps(iCount + 1)
		oProps(iCount + 1).Name  = &quot;display&quot;
		oProps(iCount + 1).Value =  &quot;inline-block&quot;
		&apos;oProps(iCount + 2).Name  = &quot;width&quot;
		&apos;oProps(iCount + 2).Value =  &quot;100%&quot;
	end if
		
	if oStyle.ParaKeepTogether then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;page-break-after&quot;
		oProps(iCount).Value =  &quot;avoid&quot;
	end if

	if oStyle.ParaIsHyphenation then
		iCount = uBound(oProps)
		redim preserve oProps(iCount + 20)
		oProps(iCount + 1).Name  = &quot;hyphens&quot;
		oProps(iCount + 1).Value =  &quot;auto&quot;
		oProps(iCount + 2).Name  = &quot;hyphenate-limit-lines&quot;
		oProps(iCount + 2).Value =  CStr(oStyle.ParaHyphenationMaxHyphens)		
		oProps(iCount + 3).Name  = &quot;hyphenate-limit-before&quot;
		oProps(iCount + 3).Value =  CStr(oStyle.ParaHyphenationMaxLeadingChars)		
		oProps(iCount + 4).Name  = &quot;hyphenate-limit-after&quot;
		oProps(iCount + 4).Value =  CStr(oStyle.ParaHyphenationMaxTrailingChars)		
		oProps(iCount + 5).Name  = &quot;hyphenate-limit-last&quot;
		oProps(iCount + 5).Value =  &quot;page&quot;		

		oProps(iCount + 6).Name  = &quot;-webkit-hyphens&quot;
		oProps(iCount + 6).Value =  &quot;auto&quot;
		oProps(iCount + 7).Name  = &quot;-webkit-hyphenate-limit-lines&quot;
		oProps(iCount + 7).Value =  CStr(oStyle.ParaHyphenationMaxHyphens)		
		oProps(iCount + 8).Name  = &quot;-webkit-hyphenate-limit-before&quot;
		oProps(iCount + 8).Value =  CStr(oStyle.ParaHyphenationMaxLeadingChars)		
		oProps(iCount + 9).Name  = &quot;-webkit-hyphenate-limit-after&quot;
		oProps(iCount + 9).Value =  CStr(oStyle.ParaHyphenationMaxTrailingChars)		
		oProps(iCount + 10).Name  = &quot;-webkit-hyphenate-limit-last&quot;
		oProps(iCount + 10).Value =  &quot;page&quot;		

		oProps(iCount + 11).Name  = &quot;-moz-hyphens&quot;
		oProps(iCount + 11).Value =  &quot;auto&quot;
		oProps(iCount + 12).Name  = &quot;-moz-hyphenate-limit-lines&quot;
		oProps(iCount + 12).Value =  CStr(oStyle.ParaHyphenationMaxHyphens)		
		oProps(iCount + 13).Name  = &quot;-moz-hyphenate-limit-before&quot;
		oProps(iCount + 13).Value =  CStr(oStyle.ParaHyphenationMaxLeadingChars)		
		oProps(iCount + 14).Name  = &quot;-moz-hyphenate-limit-after&quot;
		oProps(iCount + 14).Value =  CStr(oStyle.ParaHyphenationMaxTrailingChars)		
		oProps(iCount + 15).Name  = &quot;-moz-hyphenate-limit-last&quot;
		oProps(iCount + 15).Value =  &quot;page&quot;		

		oProps(iCount + 16).Name  = &quot;-ms-hyphens&quot;
		oProps(iCount + 16).Value =  &quot;auto&quot;
		oProps(iCount + 17).Name  = &quot;-ms-hyphenate-limit-lines&quot;
		oProps(iCount + 17).Value =  CStr(oStyle.ParaHyphenationMaxHyphens)		
		oProps(iCount + 18).Name  = &quot;-ms-hyphenate-limit-before&quot;
		oProps(iCount + 18).Value =  CStr(oStyle.ParaHyphenationMaxLeadingChars)		
		oProps(iCount + 19).Name  = &quot;-ms-hyphenate-limit-after&quot;
		oProps(iCount + 19).Value =  CStr(oStyle.ParaHyphenationMaxTrailingChars)		
		oProps(iCount + 20).Name  = &quot;-ms-hyphenate-limit-last&quot;
		oProps(iCount + 20).Value =  &quot;page&quot;		

	end if

	SetEpubMoreParaStyleProperties(oStyle, oProps(), sGraphicName)	
	 
	for i = 0 to ubound(oProps)
		sStyleString = sStyleString + oProps(i).Name &amp; &quot;: &quot; &amp; oProps(i).Value &amp; &quot;;&quot; &amp; gsCR
	next i	
	sStyleString = sStyleString &amp; &quot;}&quot; &amp; gsCR
	
	&apos;check if first letter is a drop cap
	if oStyle.DropCapFormat.Count &gt; 0 then
		&apos;set the height of the letter according to the CharHeight and the value of Lines
		dim iHeight as integer
		dim sMargin as string
		dim iDistance as integer
		dim oCharStyle as object
		iHeight = oStyle.CharHeight * oStyle.DropCapFormat.Lines + 8 * oStyle.DropCapFormat.Lines
		&apos;sMargin = (oStyle.CharHeight / 2) - 4 &amp; &quot;px &quot;
		sMargin = &quot;0 &quot;
		iDistance =  GetEpubFormattedPixelString(Int(oStyle.DropCapFormat.Distance / cFactor))
		sStyle = &quot;.para_&quot; &amp; sStylename &amp; &quot;:first-letter{&quot; &amp; gsCR
		sStyle = sStyle &amp; &quot;font-size: &quot; &amp; iHeight &amp; &quot;px;&quot; &amp; gsCR
		sStyle = sStyle &amp; &quot;float: left;&quot; &amp; gsCR
		sStyle = sStyle &amp; &quot;margin: &quot; &amp; sMargin &amp; iDistance &amp; &quot;px 0 0;&quot; &amp; gsCR &amp; &quot;}&quot; &amp; gsCR
		&apos;if a character style is defined, read its properties
		if oStyle.DropCapCharStylename &lt;&gt; &quot;&quot; then
			oCharStyle = GetStyleByName(&quot;CharacterStyles&quot;, oStyle.DropCapCharStylename)
			if not isnull(oCharStyle) then
				if oCharStyle.CharColor &lt;&gt; -1 then
					sStyle = sStyle &amp; &quot;color: &quot; &amp; GetEpubHexColorString(oCharStyle.CharColor) &amp; &quot;;&quot; &amp; gsCR
				end if	
				if oCharStyle.GetPropertyState(&quot;CharBackColor&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
					sStyle = sStyle &amp; &quot;background-color: &quot; &amp; GetEpubHexColorString(oStyle.CharBackColor) &amp; &quot;;&quot; &amp; gsCR
				end if			
				if oCharStyle.GetPropertyState(&quot;CharWeight&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
					if oCharStyle.CharWeight = com.sun.star.awt.FontWeight.BOLD then
						sStyle = sStyle &amp; &quot;font-weight: bold;&quot; &amp; gsCR
					else
						sStyle = sStyle &amp; &quot;font-weight: normal;&quot; &amp; gsCR
					end if	 	
				end if				
				if oCharStyle.GetPropertyState(&quot;CharShadowed&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
					if oCharStyle.CharShadowed then
						sStyle = sStyle &amp; &quot;text-shadow: #b0b0b0 &quot; &amp; GetEpubFormattedPixelString(2) &amp; &quot; &quot; &amp; GetEpubFormattedPixelString(2) &amp; &quot; &quot; &amp; GetEpubFormattedPixelString(3) &amp; &quot;;&quot; &amp; gsCR
					end if
				end if					
				if oCharStyle.GetPropertyState(&quot;CharPosture&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
					if oCharStyle.CharPosture = com.sun.star.awt.FontSlant.ITALIC then
						sStyle = sStyle &amp; &quot;font-style: italic;&quot; &amp; gsCR
					end if
				end if					 
				if oCharStyle.GetPropertyState(&quot;CharFontName&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
					if oCharStyle.CharFontPitch = com.sun.star.awt.FontPitch.FIXED then
						sStyle = sStyle &amp; &quot;font-family: monospace;&quot; &amp; gsCR						
					elseif oStyle.CharFontFamily = com.sun.star.awt.FontFamily.ROMAN then
						sStyle = sStyle &amp; &quot;font-family: serif;&quot; &amp; gsCR						
					else	
						sStyle = sStyle &amp; &quot;font-family: sans-serif;&quot; &amp; gsCR						
					end if
				end if	
			end if
		end if	
		sStyleString = sStyleString &amp; gsCR &amp; gsCR &amp; sStyle		
	end if
		
	GetEpubStyleStringParagraph = sStyleString
end function


sub SetEpubMoreParaStyleProperties(oStyle as object, oProps(), sGraphicName as string)
dim iCount as integer
dim oProp as new com.sun.star.beans.PropertyValue
dim sFontname as string

	if oStyle.CharShadowed then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProp.Name  = &quot;text-shadow&quot;
		oProp.Value = &quot;#b0b0b0 &quot; &amp; GetEpubFormattedPixelString(2) &amp; &quot; &quot; &amp; GetEpubFormattedPixelString(2) &amp; &quot; &quot; &amp; GetEpubFormattedPixelString(3)
		oProps(iCount) = oProp
	end if
	
	if oStyle.CharPosture = com.sun.star.awt.FontSlant.ITALIC then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProp.Name  = &quot;font-style&quot;
		oProp.Value = &quot;italic&quot;
		oProps(iCount) = oProp
	end if
	 
	sFontname = oStyle.CharFontname
	if instr(sFontname, &quot; &quot;) &gt; 0 then
		sFontname = &quot;&quot;&quot;&quot; &amp; sFontname &amp; &quot;&quot;&quot;&quot;
	end if

	if oStyle.CharFontPitch = com.sun.star.awt.FontPitch.FIXED then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProp.Name  = &quot;font-family&quot;
		oProp.Value = sFontname &amp; &quot;, monospace&quot;
		oProps(iCount) = oProp

	elseif oStyle.CharFontFamily = com.sun.star.awt.FontFamily.ROMAN then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProp.Name  = &quot;font-family&quot;
		oProp.Value = sFontname &amp; &quot;, serif&quot;
		oProps(iCount) = oProp

	else	
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProp.Name  = &quot;font-family&quot;
		oProp.Value = sFontname &amp; &quot;, sans-serif&quot;
		oProps(iCount) = oProp
	end if
	 
	if oStyle.CharFlash then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProp.Name  = &quot;text-decoration&quot;
		oProp.Value = &quot;blink&quot;
		oProps(iCount) = oProp
	end if
	 
	if oStyle.CharUnderline = com.sun.star.awt.FontUnderline.SINGLE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProp.Name  = &quot;text-decoration&quot;
		oProp.Value = &quot;underline&quot;
		oProps(iCount) = oProp
	elseif oStyle.CharStrikeout = com.sun.star.awt.FontStrikeout.SINGLE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProp.Name  = &quot;text-decoration&quot;
		oProp.Value = &quot;line-through&quot;
		oProps(iCount) = oProp
	end if
	
	if oStyle.CharCaseMap = com.sun.star.style.CaseMap.UPPERCASE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProp.Name  = &quot;text-transform&quot;
		oProp.Value = &quot;uppercase&quot;
		oProps(iCount) = oProp
	elseif oStyle.CharCaseMap = com.sun.star.style.CaseMap.LOWERCASE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProp.Name  = &quot;text-transform&quot;
		oProp.Value = &quot;lowercase&quot;
		oProps(iCount) = oProp
	elseif oStyle.CharCaseMap = com.sun.star.style.CaseMap.SMALLCAPS then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProp.Name  = &quot;font-variant&quot;
		oProp.Value = &quot;small-caps&quot;
		oProps(iCount) = oProp
	end if

	if oStyle.CharKerning &gt; 0 then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProp.Name  = &quot;letter-spacing&quot;
		oProp.Value = CStr(Int(oStyle.CharKerning / cFactor)) &amp; &quot;pt&quot;
		oProps(iCount) = oProp
	end if
	
	if sGraphicName &lt;&gt; &quot;&quot; then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount + 2)
		oProp.Name  = &quot;background-image&quot;
		oProp.Value = &quot;url(&apos;../images/&quot; &amp; sGraphicname &amp; &quot;&apos;)&quot;
		oProps(iCount) = oProp
		iCount = iCount + 1
		oProp.Name  = &quot;background-repeat&quot;
		oProp.Value = &quot;no-repeat&quot;
		oProps(iCount) = oProp
		iCount = iCount + 1
		oProp.Name  = &quot;background-position&quot;
		oProp.Value = &quot;left top&quot;
		oProps(iCount) = oProp
	end if
end sub


function GetEpubStyleStringCharacter(oStyle as object) as string
dim sStyleString as string
dim sStyleName as string
dim oPara as object
dim oProps(0) as new com.sun.star.beans.PropertyValue
dim i as integer
dim iCount as integer

	&apos;oPara = GetEpubParaByStyleName(sStyleName)
	sStylename = ReplaceUmlaut(oStyle.Name)
	sStylename = ReplaceString(sStylename, &quot;_&quot;, &quot; &quot;)
	sStylename = ReplaceString(sStylename, &quot;p&quot;, &quot;+&quot;)
	sStyleString = &quot;span.&quot; &amp; sStyleName &amp;  &quot;, a.&quot; &amp; sStyleName &amp; &quot; {&quot; &amp; gsCR

	if oStyle.GetPropertyState(&quot;CharColor&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		if oStyle.CharColor &lt;&gt; -1 then
			iCount = uBound(oProps) + 1
			redim preserve oProps(iCount)
			oProps(iCount).Name = &quot;color&quot;
			oProps(iCount).Value = GetEpubHexColorString(oStyle.CharColor)
		end if	
	end if

	if oStyle.GetPropertyState(&quot;CharHeight&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name = &quot;font-size&quot;
		oProps(iCount).Value = CInt(oStyle.CharHeight) &amp; &quot;pt&quot;
	end if

	if oStyle.GetPropertyState(&quot;CharUnderline&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name = &quot;text-decoration&quot;
		oProps(iCount).Value = GetEpubCssUnderlineString(oStyle.CharUnderline)
	end if

	if oStyle.GetPropertyState(&quot;CharBackColor&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;background-color&quot;
		oProps(iCount).Value  = GetEpubHexColorString(oStyle.CharBackColor)
	end if

	if oStyle.GetPropertyState(&quot;CharWeight&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		iCount = uBound(oProps) + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;font-weight&quot;
		if oStyle.CharWeight = com.sun.star.awt.FontWeight.BOLD then
			oProps(iCount).Value = &quot;bold&quot;
		else
			oProps(iCount).Value = &quot;normal&quot;
		end if	 	
	end if	

	if oStyle.GetPropertyState(&quot;CharShadowed&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		if oStyle.CharShadowed then
			iCount = uBound(oProps) + 1
			redim preserve oProps(iCount)
			oProps(iCount).Name  = &quot;text-shadow&quot;
			oProps(iCount).Value = &quot;#b0b0b0 &quot; &amp; GetEpubFormattedPixelString(2) &amp; &quot; &quot; &amp; GetEpubFormattedPixelString(2) &amp; &quot; &quot; &amp; GetEpubFormattedPixelString(3)
		end if
	end if	
	
	if oStyle.GetPropertyState(&quot;CharPosture&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		if oStyle.CharPosture = com.sun.star.awt.FontSlant.ITALIC then
			iCount = uBound(oProps) + 1
			redim preserve oProps(iCount)
			oProps(iCount).Name  = &quot;font-style&quot;
			oProps(iCount).Value = &quot;italic&quot;
		end if
	end if	
	 
	if oStyle.GetPropertyState(&quot;CharFontName&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		if oStyle.CharFontPitch = com.sun.star.awt.FontPitch.FIXED then
			iCount = uBound(oProps) + 1
			redim preserve oProps(iCount)
			oProps(iCount).Name  = &quot;font-family&quot;
			oProps(iCount).Value = oStyle.CharFontname &amp; &quot;, monospace&quot;
			
		elseif oStyle.CharFontFamily = com.sun.star.awt.FontFamily.ROMAN then
			iCount = uBound(oProps) + 1
			redim preserve oProps(iCount)
			oProps(iCount).Name  = &quot;font-family&quot;
			oProps(iCount).Value = oStyle.CharFontname &amp; &quot;, Serif&quot;
					
		else	
			iCount = uBound(oProps) + 1
			redim preserve oProps(iCount)
			oProps(iCount).Name  = &quot;font-family&quot;
			oProps(iCount).Value = oStyle.CharFontname &amp; &quot;, Sans-serif&quot;
		end if
	end if	
	 
	if oStyle.GetPropertyState(&quot;CharFlash&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		if oStyle.CharFlash then
			iCount = uBound(oProps) + 1
			redim preserve oProps(iCount)
			oProps(iCount).Name  = &quot;text-decoration&quot;
			oProps(iCount).Value = &quot;blink&quot;
		end if
	end if	
	 
	if oStyle.GetPropertyState(&quot;CharUnderline&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		if oStyle.CharUnderline = com.sun.star.awt.FontUnderline.SINGLE then
			iCount = uBound(oProps) + 1
			redim preserve oProps(iCount)
			oProps(iCount).Name  = &quot;text-decoration&quot;
			oProps(iCount).Value = &quot;underline&quot;
		elseif oStyle.CharStrikeout = com.sun.star.awt.FontStrikeout.SINGLE then
			iCount = uBound(oProps) + 1
			redim preserve oProps(iCount)
			oProps(iCount).Name  = &quot;text-decoration&quot;
			oProps(iCount).Value = &quot;line-through&quot;
		end if
	end if	
	
	if oStyle.GetPropertyState(&quot;CharCaseMap&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		if oStyle.CharCaseMap = com.sun.star.style.CaseMap.UPPERCASE then
			iCount = uBound(oProps) + 1
			redim preserve oProps(iCount)
			oProps(iCount).Name  = &quot;text-transform&quot;
			oProps(iCount).Value = &quot;uppercase&quot;
		elseif oStyle.CharCaseMap = com.sun.star.style.CaseMap.LOWERCASE then
			iCount = uBound(oProps) + 1
			redim preserve oProps(iCount)
			oProps(iCount).Name  = &quot;text-transform&quot;
			oProps(iCount).Value = &quot;lowercase&quot;
		elseif oStyle.CharCaseMap = com.sun.star.style.CaseMap.SMALLCAPS then
			iCount = uBound(oProps) + 1
			redim preserve oProps(iCount)
			oProps(iCount).Name  = &quot;font-variant&quot;
			oProps(iCount).Value = &quot;small-caps&quot;
		end if
	end if	

	if oStyle.GetPropertyState(&quot;CharKerning&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		if oStyle.CharKerning &gt; 0 then
			iCount = uBound(oProps) + 1
			redim preserve oProps(iCount)
			oProps(iCount).Name  = &quot;letter-spacing&quot;
			oProps(iCount).Value = CStr(Int(oStyle.CharKerning / cFactor)) &amp; &quot;pt&quot;
		end if
	end if	
		 
	for i = 1 to ubound(oProps)
		sStyleString = sStyleString + oProps(i).Name &amp; &quot;: &quot; &amp; oProps(i).Value &amp; &quot;;&quot; &amp; gsCR
	next i	
	sStyleString = sStyleString &amp; &quot;}&quot; &amp; gsCR
		
	GetEpubStyleStringCharacter = sStyleString
end function


function GetEpubStyleStringAlignment(sAlignment as string) as string
dim sStyleName as string
dim sStyleString as string
	sStyleName = &quot;align&quot; &amp; sAlignment
	sStyleString = &quot;.&quot; &amp; sStyleName &amp; &quot; {&quot; &amp; gsCR &amp; &quot;text-align: &quot; &amp; sAlignment &amp; &quot;;&quot; &amp; gsCR &amp; &quot;}&quot; &amp; gsCR
	GetEpubStyleStringAlignment = sStyleString
end function


function GetEpubPageStyles() as string
dim oStyleFamilies as object
dim oStyles as object
dim oStyle as object
dim sStyleString as string
dim iMarginaleLeft as integer
dim iMarginaleRight as integer
dim sStyleName as string
dim oPara as object
dim oProps(0) as new com.sun.star.beans.PropertyValue
dim i as integer
dim iCount as integer

	&apos;first set default values
	if giMarginaleLeftWidth = 0 then 
		iMarginaleLeft = 20
	else	
		iMarginaleLeft = giMarginaleLeftWidth
	end if	
	if giMarginaleRightWidth = 0 then 
		iMarginaleRight = 20
	else
		iMarginaleRight = giMarginaleRightWidth
	end if	
		
	&apos;get styles from the standard page style
	oStyleFamilies = ThisComponent.StyleFamilies
	oStyles = oStyleFamilies.getByName( &quot;PageStyles&quot; )
	oStyle = oStyles.GetByName(&quot;Standard&quot;)	
	
	oProps(0).Name  = &quot;background-color&quot;
	if oStyle.GetPropertyState(&quot;BackColor&quot;) = com.sun.star.beans.PropertyState.DIRECT_VALUE then
		oProps(0).Value =  GetEpubHexColorString(oStyle.BackColor)
	else
		oProps(0).Value = &quot;#FFFFFF&quot;
	end if	

	&apos;then get styles from the standard paragraph style
	iCount = 0
	oStyles = oStyleFamilies.getByName( &quot;ParagraphStyles&quot; )
	oStyle = oStyles.GetByName(&quot;Standard&quot;)	
	if oStyle.CharColor &lt;&gt; -1 then
		iCount = iCount + 1
		redim preserve oProps(iCount)
		oProps(iCount).Name  = &quot;color&quot;
		oProps(iCount).Value = GetEpubHexColorString(oStyle.CharColor)
	end if
	
	iCount = iCount + 1
	redim preserve oProps(iCount)
	oProps(iCount).Name  = &quot;font-size&quot;
	oProps(iCount).Value =  CInt(oStyle.CharHeight) &amp; &quot;pt&quot;

	iCount = iCount + 1
	redim preserve oProps(iCount)
	oProps(iCount).Name  = &quot;text-decoration&quot;
	oProps(iCount).Value = GetEpubCssUnderlineString(oStyle.CharUnderline)

	iCount = iCount + 1
	redim preserve oProps(iCount)
	oProps(iCount).Name  = &quot;text-align&quot;
	oProps(iCount).Value = GetEpubCssAlignString(oStyle.ParaAdjust)

	iCount = iCount + 1
	redim preserve oProps(iCount)
	oProps(iCount).Name  = &quot;font-weight&quot;
	if oStyle.CharWeight = com.sun.star.awt.FontWeight.BOLD then
		oProps(iCount).Value = &quot;bold&quot;
	else
		oProps(iCount).Value = &quot;normal&quot;
	end if	 	

	SetEpubMoreParaStyleProperties(oStyle, oProps(), &quot;&quot;)		 

	for i = 0 to ubound(oProps)
		sStyleString = sStyleString + oProps(i).Name &amp; &quot;: &quot; &amp; oProps(i).Value &amp; &quot;;&quot; &amp; gsCR
	next i			
	GetEpubPageStyles = &quot;body {&quot; &amp; gsCR &amp; sStyleString &amp; &quot;}&quot; &amp; gsCR
end function


function GetEpubStyleStringListLabel(oStyle as object) as string
dim sStyleString as string
dim sStyleName as string
dim iLeft as integer

	sStylename = ReplaceUmlaut(oStyle.Name)
	sStylename = ReplaceString(sStylename, &quot;_&quot;, &quot; &quot;)
	iLeft = abs(Int((oStyle.ParaFirstLineIndent) / cFactor))
	sStyleString = &quot;.label_&quot; &amp; sStyleName &amp; &quot; {&quot; &amp; gsCR
	sStyleString = sStyleString &amp; &quot;display: inline-block;&quot; &amp; gsCR 
	sStyleString = sStyleString &amp; &quot;float: left;&quot; &amp; gsCR
	sStyleString = sStyleString &amp; &quot;width:&quot; &amp; iLeft &amp; &quot;px;&quot; &amp; gsCR &amp; &quot;}&quot; &amp; gsCR	
	GetEpubStyleStringListLabel = sStyleString
end function


function GetEpubStyleStringAccordionVertical(oStyle as object) as string
dim sStyleString as string
dim sStyleName as string
dim oProps(8) as new com.sun.star.beans.PropertyValue
dim i as integer

	sStyleName = &quot;VAccordICntr&quot;
	sStyleString = &quot;.&quot; &amp; sStyleName &amp; &quot; {&quot;

	oProps(0).Name  = &quot;margin-top&quot;
	oProps(0).Value =  GetEpubFormattedPixelString(Int(oStyle.TopMargin / cFactor))
	oProps(1).Name  = &quot;margin-right&quot;
	oProps(1).Value =  GetEpubFormattedPixelString(Int(oStyle.RightMargin / cFactor))
	oProps(2).Name  = &quot;margin-bottom&quot;
	oProps(2).Value =  GetEpubFormattedPixelString(Int(oStyle.BottomMargin / cFactor))
	oProps(3).Name  = &quot;margin-left&quot;
	oProps(3).Value =  GetEpubFormattedPixelString(Int(oStyle.LeftMargin / cFactor))
	oProps(4).Name  = &quot;border-top&quot;
	oProps(4).Value = GetEpubCSSBorderString(oStyle.TopBorder)
	oProps(5).Name  = &quot;border-right&quot;
	oProps(5).Value = GetEpubCSSBorderString(oStyle.RightBorder)
	oProps(6).Name  = &quot;border-bottom&quot;
	oProps(6).Value = GetEpubCSSBorderString(oStyle.BottomBorder)
	oProps(7).Name  = &quot;border-left&quot;
	oProps(7).Value = GetEpubCSSBorderString(oStyle.LeftBorder)
	oProps(8).Name  = &quot;background-color&quot;
	oProps(8).Value = GetEpubHexColorString(oStyle.BackColor)

	for i = 0 to ubound(oProps)
		sStyleString = sStyleString + oProps(i).Name &amp; &quot;: &quot; &amp; oProps(i).Value &amp; &quot;;&quot; &amp; gsCR
	next i	
	sStyleString = sStyleString &amp; &quot;}&quot; &amp; gsCR
	
	GetEpubStyleStringAccordionVertical = sStyleString
end function


function GetEpubStyleStringAccordionHorizontal(oStyle as object) as string
dim sStyleString as string
dim sStyleName as string
dim oProps(8) as new com.sun.star.beans.PropertyValue
dim i as integer

	sStyleName = &quot;HAccordICntr&quot;
	sStyleString = &quot;.&quot; &amp; sStyleName &amp; &quot; {&quot;

	oProps(0).Name  = &quot;margin-top&quot;
	oProps(0).Value =  GetEpubFormattedPixelString(Int(oStyle.TopMargin / cFactor))
	oProps(1).Name  = &quot;margin-right&quot;
	oProps(1).Value =  GetEpubFormattedPixelString(Int(oStyle.RightMargin/cFactor + 5))
	oProps(2).Name  = &quot;margin-bottom&quot;
	oProps(2).Value =  GetEpubFormattedPixelString(Int(oStyle.BottomMargin / cFactor))
	oProps(3).Name  = &quot;margin-left&quot;
	oProps(3).Value =  GetEpubFormattedPixelString(Int(oStyle.LeftMargin / cFactor))
	oProps(4).Name  = &quot;border-top&quot;
	oProps(4).Value = GetEpubCSSBorderString(oStyle.TopBorder)
	oProps(5).Name  = &quot;border-right&quot;
	oProps(5).Value = GetEpubCSSBorderString(oStyle.RightBorder)
	oProps(6).Name  = &quot;border-bottom&quot;
	oProps(6).Value = GetEpubCSSBorderString(oStyle.BottomBorder)
	oProps(7).Name  = &quot;border-left&quot;
	oProps(7).Value = GetEpubCSSBorderString(oStyle.LeftBorder)
	oProps(8).Name  = &quot;background-color&quot;
	oProps(8).Value = GetEpubHexColorString(oStyle.BackColor)

	for i = 0 to ubound(oProps)
		sStyleString = sStyleString + oProps(i).Name &amp; &quot;: &quot; &amp; oProps(i).Value &amp; &quot;;&quot; &amp; gsCR
	next i	
	sStyleString = sStyleString &amp; &quot;}&quot; &amp; gsCR
	
	GetEpubStyleStringAccordionHorizontal = sStyleString
end function


function GetEpubStyleStringAccordionTogglerVertical(oStyle as object) as string
dim sStyleString as string
dim sStyleName as string
dim oProps(7) as new com.sun.star.beans.PropertyValue
dim i as integer

	sStyleName = &quot;VAccordIHead&quot;
	sStyleString = &quot;.&quot; &amp; sStyleName &amp; &quot; {&quot;

	oProps(0).Name  = &quot;color&quot;
	oProps(0).Value =  GetEpubHexColorString(oStyle.CharColor)
	oProps(1).Name  = &quot;font-size&quot;
	oProps(1).Value =  CInt(oStyle.CharHeight) &amp; &quot;pt&quot;
	oProps(2).Name  = &quot;text-decoration&quot;
	oProps(2).Value =  GetEpubCssUnderlineString(oStyle.CharUnderline)
	oProps(3).Name  = &quot;background-color&quot;
	oProps(3).Value =  GetEpubHexColorString(oStyle.ParaBackColor)
	oProps(4).Name  = &quot;cursor&quot;
	oProps(4).Value =  &quot;pointer&quot;
	oProps(5).Name  = &quot;padding&quot;
	oProps(5).Value =  GetEpubFormattedPixelString(3) &amp; &quot; &quot; &amp; GetEpubFormattedPixelString(8)
	oProps(6).Name  = &quot;text-align&quot;
	oProps(6).Value =  &quot;left&quot;
	oProps(7).Name  = &quot;font-weight&quot;
	if oStyle.CharWeight = com.sun.star.awt.FontWeight.BOLD then
		oProps(7).Value = &quot;bold&quot;
	else
		oProps(7).Value = &quot;normal&quot;
	end if	 	

	SetEpubMoreParaStyleProperties(oStyle, oProps(), &quot;&quot;)	

	for i = 0 to ubound(oProps)
		sStyleString = sStyleString + oProps(i).Name &amp; &quot;: &quot; &amp; oProps(i).Value &amp; &quot;;&quot; &amp; gsCR
	next i	
	sStyleString = sStyleString &amp; &quot;}&quot; &amp; gsCR
	
	GetEpubStyleStringAccordionTogglerVertical = sStyleString
end function


function GetEpubStyleStringAccordionTogglerHorizontal(oStyle as object) as string
dim sStyleString as string
dim sStyleName as string
dim oProps(7) as new com.sun.star.beans.PropertyValue
dim i as integer

	sStyleName = &quot;HAccordIHead&quot;
	sStyleString = &quot;.&quot; &amp; sStyleName &amp; &quot; {&quot;

	oProps(0).Name  = &quot;color&quot;
	oProps(0).Value =  GetEpubHexColorString(oStyle.CharColor)
	oProps(1).Name  = &quot;font-size&quot;
	oProps(1).Value =  CInt(oStyle.CharHeight) &amp; &quot;pt&quot;
	oProps(2).Name  = &quot;text-decoration&quot;
	oProps(2).Value =  GetEpubCssUnderlineString(oStyle.CharUnderline)
	oProps(3).Name  = &quot;background-color&quot;
	oProps(3).Value =  GetEpubHexColorString(oStyle.ParaBackColor)
	oProps(4).Name  = &quot;cursor&quot;
	oProps(4).Value =  &quot;pointer&quot;
	oProps(5).Name  = &quot;padding&quot;
	oProps(5).Value =  GetEpubFormattedPixelString(3) &amp; &quot; &quot; &amp; GetEpubFormattedPixelString(8)
	oProps(6).Name  = &quot;text-align&quot;
	oProps(6).Value =  &quot;left&quot;
	oProps(7).Name  = &quot;font-weight&quot;
	if oStyle.CharWeight = com.sun.star.awt.FontWeight.BOLD then
		oProps(7).Value = &quot;bold&quot;
	else
		oProps(7).Value = &quot;normal&quot;
	end if	 	

	SetEpubMoreParaStyleProperties(oStyle, oProps(), &quot;&quot;)	

	for i = 0 to ubound(oProps)
		sStyleString = sStyleString + oProps(i).Name &amp; &quot;: &quot; &amp; oProps(i).Value &amp; &quot;;&quot; &amp; gsCR
	next i	
	sStyleString = sStyleString &amp; &quot;}&quot; &amp; gsCR
	
	GetEpubStyleStringAccordionTogglerHorizontal = sStyleString
end function


function GetEpubStyleStringAccordionTextVertical() as string
dim sStyleString as string
dim sStyleName as string
dim oProps(0) as new com.sun.star.beans.PropertyValue
dim i as integer

	sStyleName = &quot;VAccordICont&quot;
	sStyleString = &quot;.&quot; &amp; sStyleName &amp; &quot; {&quot;

	oProps(0).Name  = &quot;padding&quot;
	oProps(0).Value =  GetEpubFormattedPixelString(8)

	for i = 0 to ubound(oProps)
		sStyleString = sStyleString + oProps(i).Name &amp; &quot;: &quot; &amp; oProps(i).Value &amp; &quot;;&quot; &amp; gsCR
	next i	
	sStyleString = sStyleString &amp; &quot;}&quot; &amp; gsCR 
	
	GetEpubStyleStringAccordionTextVertical = sStyleString
end function


function GetEpubStyleStringAccordionTextHorizontal() as string
dim sStyleString as string
dim sStyleName as string
dim oProps(0) as new com.sun.star.beans.PropertyValue
dim i as integer

	sStyleName = &quot;HAccordICont&quot;
	sStyleString = &quot;.&quot; &amp; sStyleName &amp; &quot; {&quot;

	oProps(0).Name  = &quot;padding&quot;
	oProps(0).Value =  GetEpubFormattedPixelString(0) &amp; &quot; &quot; &amp; GetEpubFormattedPixelString(8)

	for i = 0 to ubound(oProps)
		sStyleString = sStyleString + oProps(i).Name &amp; &quot;: &quot; &amp; oProps(i).Value &amp; &quot;;&quot; &amp; gsCR
	next i	
	sStyleString = sStyleString &amp; &quot;}&quot; &amp; gsCR
	
	GetEpubStyleStringAccordionTextHorizontal = sStyleString
end function


function GetEpubParaByStyleName(sStyleName as string) as object
dim i as long
dim iParaCount as long
dim oPara as object

	iParaCount = ubound(gaDocParagraph())
	for i = 1 to iParaCount
		if gaDocParagraph(i).ParaStyleName = sStyleName then
			oPara = gaDocParagraph(i)
			exit for
		end if
	next i
	GetEpubParaByStyleName = oPara
end function


function GetEpubInternalStyleName(sFamily as string, sStylename as string) as string
dim oStyleFamilies as object
dim oParaStyles as object
dim oStyle as object
dim i as integer
dim iCount as integer

	oStyleFamilies = ThisComponent.StyleFamilies
	oParaStyles = oStyleFamilies.getByName(sFamily)

	&apos;get all applied paragraphs
	iCount = oParaStyles.GetCount
	for i = 0 to iCount - 1
		oStyle = oParaStyles.GetByIndex(i)
		if oStyle.DisplayName = sStylename then
			exit for
		end if
	next i
	GetEpubInternalStyleName = oStyle.Name
end function


function GetEpubNumberingTypeByStyleName(sStyleName as string) as integer
dim i as long
dim iParaCount as long
dim iNumType as integer

	iParaCount = ubound(gaDocParagraph())
	iNumType = -1	 
	for i = 1 to iParaCount
		if gaDocParagraph(i).ParaStyleName = sStyleName then
			iNumType = gaDocParagraph(i).NumberingType
			exit for
		end if
	next i
	GetEpubNumberingTypeByStyleName = iNumType
end function



function GetEpubNumberingLevelByStyleName(sStyleName as string) as integer
dim i as long
dim iParaCount as long
dim iNumLevel as integer

	iParaCount = ubound(gaDocParagraph())
	iNumLevel = -1	 
	for i = 1 to iParaCount
		if gaDocParagraph(i).ParaStyleName = sStyleName then
			iNumLevel = gaDocParagraph(i).NumberingLevel
			exit for
		end if
	next i
	GetEpubNumberingLevelByStyleName = iNumLevel
end function


function GetEpubHexColorString(lCharColor as long) as string
dim sColor as string
dim iNumberOfZero as integer
dim i as integer

	sColor = CStr(Hex(lCharColor))
	if lCharColor &lt;&gt; -1 then
		if Len(sColor) &lt; 6 then
			iNumberOfZero = 6 - Len(sColor) 
			for i=1 to iNumberOfZero
				sColor = &quot;0&quot; &amp; sColor
			next i
		end if
	end if
	GetEpubHexColorString = &quot;#&quot; &amp; sColor
end function


function GetEpubCssUnderlineString(iUnderline as integer) as string
dim sUnderline as string

	if iUnderline = 0 then
		sUnderline = &quot;none&quot;
	else 	
		sUnderline = &quot;underline&quot;
	end if
	GetEpubCssUnderlineString = sUnderline
end function


function GetEpubCssAlignString(iAdjust as integer) as string
dim sAdjust as string

	select case iAdjust
		case com.sun.star.style.ParagraphAdjust.LEFT : sAdjust = &quot;left&quot;
		case com.sun.star.style.ParagraphAdjust.RIGHT : sAdjust = &quot;right&quot;
		case com.sun.star.style.ParagraphAdjust.CENTER : sAdjust = &quot;center&quot;
		case com.sun.star.style.ParagraphAdjust.BLOCK : sAdjust = &quot;justify&quot;
		case com.sun.star.style.ParagraphAdjust.STRETCH : sAdjust = &quot;justify&quot;
		case else sAdjust = &quot;left&quot;
	end select
	GetEpubCssAlignString = sAdjust
end function


function GetEpubCssBorderString(oBorder as object) as string
dim sBorder as string
dim sColor as string
dim iWidth as integer
dim sWidth as string
dim sOfficeVersion as string
dim sLineStyle as string

	&apos;first check if this paragraph has a border at all
	if oBorder.OuterLineWidth = 0 then
		sBorder = GetEpubFormattedPixelString(0)
	else
		iWidth = Int(oBorder.OuterLineWidth/15 + 1) &apos; add 1 because Int is cutting decimal places 
		sWidth = GetEpubFormattedPixelString(iWidth)		
		sColor = GetEpubHexColorString(oBorder.Color)
		&apos;if LibreOffice is running, there is a line style
		sOfficeVersion = GetCurrentOfficeVersion()
		if sOfficeVersion = &quot;LibreOffice&quot; then
			sLineStyle = GetEpubCssBorderStyle(oBorder.LineStyle)
			sBorder = sWidth &amp; &quot; &quot; &amp; sLineStyle &amp; &quot; &quot; &amp; sColor
		else
			sBorder = sWidth &amp; &quot; solid &quot; &amp; sColor
		end if	
	end if	
	GetEpubCssBorderString = sBorder
end function


function GetEpubNumberingStyleByName(sStylename) as object
dim oFamilies as object
dim oNumStyles as object
dim oStyle as object

	&apos;Get all Styles
	oFamilies = ThisComponent.StyleFamilies
	&apos;Get only Numbering Styles from all Styles
	oNumStyles = oFamilies.getByName(&quot;NumberingStyles&quot;)
	&apos;check if the corresponding NumberingStyle exists
	oStyle = oNumStyles.getByName(sStylename)

	GetEpubNumberingStyleByName = oStyle
end function


function GetEpubNumRulesProperty(oNumRules as object, sProperty as string, iLevel as integer) as variant
dim vValue as variant
dim oRule as object
dim i as integer

		oRule = oNumRules.getByIndex(iLevel)
		&apos;search the property &quot;NumberingType&quot; in the Property-Set 
		
		for i = LBound(oRule) to UBound(oRule)
			if oRule(i).Name = sProperty then
				vValue = oRule(i).Value
				exit for
			end if
		next i

	GetEpubNumRulesProperty = vValue
end function


function GetEpubFormattedPixelString(iPixelValue as integer) as string
	if iPixelValue = 0 then
		GetEpubFormattedPixelString = &quot;0&quot;
	else
		GetEpubFormattedPixelString = CStr(iPixelValue) &amp; &quot;px&quot;
	end if
end function


function GetEpubCssStringByValueSet(sValueSet as string, optional sUnit as string)
dim aValues(3)
dim dValue as double
dim sString as string
dim iCount as integer
dim i as integer
dim iFactor as integer

	aValues = ArrayOutOfString(sValueSet, &quot; &quot;)
	iFactor = 25
	sString = &quot;&quot;
	iCount = ubound(aValues())

	&apos;a missing unit parameter indicates that it is a color
	if isMissing(sUnit) then
		for i = 0 to iCount
			dValue = aValues(i)
			if dValue &lt;&gt; 0 then 
				aValues(i) = GetEpubHexColorString(aValues(i))
			end if	
			sString = sString &amp; aValues(i) &amp; &quot; &quot;
		next i
	else &apos;the unit is px
		for i = 0 to iCount
			dValue = aValues(i)
			if dValue &lt;&gt; 0 then 
				aValues(i) = cStr(int((dValue/iFactor))) &amp; sUnit
			end if	
			sString = sString &amp; aValues(i) &amp; &quot; &quot;
		next i
	end if	
	GetEpubCssStringByValueSet = rtrim(sString)
end function



</script:module>